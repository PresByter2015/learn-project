2020/04/23 00:09:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 00:14:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 00:21:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 00:26:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 00:29:15 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 00:29:28 [I] socket keepConnect :keepAlive
2020/04/23 00:29:42 [I] socket keepConnect :keepAlive
2020/04/23 00:39:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 00:39:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 00:49:08 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 00:51:42 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 01:21:55 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 01:21:56 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 01:21:56 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 01:23:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 01:26:22 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 01:29:28 [I] socket keepConnect :keepAlive
2020/04/23 01:29:42 [I] socket keepConnect :keepAlive
2020/04/23 02:06:52 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 02:06:52 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 02:29:28 [I] socket keepConnect :keepAlive
2020/04/23 02:29:42 [I] socket keepConnect :keepAlive
2020/04/23 02:31:29 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 02:35:45 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 02:35:45 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 02:37:16 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 02:37:16 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 02:54:36 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 02:54:53 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 02:58:56 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 03:19:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 03:21:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 03:21:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 03:21:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 03:21:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 03:29:28 [I] socket keepConnect :keepAlive
2020/04/23 03:29:42 [I] socket keepConnect :keepAlive
2020/04/23 03:44:37 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 03:47:08 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 03:47:08 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 03:47:08 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 03:49:22 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT SUM(train_count) AS value ,post 
FROM (SELECT (SELECT COUNT(id) from train_plan_student_attend WHERE student_id = a.id GROUP BY student_id) AS train_count,a.* FROM train_student a) tmp_count
GROUP BY post
2020/04/23 03:49:22 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 03:55:09 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 04:01:02 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 04:18:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 04:18:57 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,select name,code,level,maintain_integral_week 
from show_integral 
ORDER BY maintain_integral_week DESC limit 10
2020/04/23 04:18:57 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,select name,code,level,maintain_integral_total 
from show_integral 
ORDER BY maintain_integral_total DESC limit 10
2020/04/23 04:29:28 [I] socket keepConnect :keepAlive
2020/04/23 04:29:42 [I] socket keepConnect :keepAlive
2020/04/23 04:31:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 04:31:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 04:44:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 04:55:25 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 05:11:02 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 05:15:58 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 05:17:16 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 05:17:16 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 05:24:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 05:27:17 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 05:29:28 [I] socket keepConnect :keepAlive
2020/04/23 05:29:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 05:29:42 [I] socket keepConnect :keepAlive
2020/04/23 05:33:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 05:40:29 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 05:40:38 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 05:45:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 05:45:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 05:57:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 06:04:34 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 06:04:34 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 06:12:31 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 06:15:38 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 06:18:18 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 06:18:18 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 06:29:28 [I] socket keepConnect :keepAlive
2020/04/23 06:29:42 [I] socket keepConnect :keepAlive
2020/04/23 06:37:24 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 06:51:45 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 06:51:46 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 06:51:46 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 07:01:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 07:05:43 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 07:05:43 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 07:09:33 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 07:09:33 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 07:25:06 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 07:25:31 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 07:29:28 [I] socket keepConnect :keepAlive
2020/04/23 07:29:42 [I] socket keepConnect :keepAlive
2020/04/23 07:30:30 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 07:42:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 07:42:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 07:55:02 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 07:58:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 07:58:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 07:59:21 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 07:59:25 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 07:59:38 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:00:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:00:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:00:08 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 08:00:13 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:00:13 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 08:00:13 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 08:00:34 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:00:38 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:00:39 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:00:41 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:00:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:00:48 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:00:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:00:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:00:57 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:00:57 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:01:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 08:01:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:01:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:01:10 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 08:01:13 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:01:15 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:01:15 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 08:01:18 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:01:23 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:01:24 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 08:01:26 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:01:26 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:01:26 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:01:26 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:01:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:01:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:01:41 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT convert(timediff/60/60,decimal(20,1)) AS timehour , name
FROM (
	SELECT
	(SELECT SUM(unix_timestamp(b.end_time)-unix_timestamp(b.start_time))
	FROM train_activity_plan b
	LEFT JOIN train_activity a ON b.activity_id = a.id AND a.del_flag = 0
	WHERE b.end_time < NOW()
	AND a.audit_result = 3
	AND b.del_flag = 0
	AND b.type_id in(45,46)
	and (b.id in(SELECT plan_id FROM train_plan_student_asso WHERE student_id = ts.id AND del_flag = 0)
	or b.id in(SELECT plan_id FROM train_plan_student_enroll WHERE student_id = ts.id AND del_flag = 0 AND audit = 1))
	) AS timediff ,ts.*
	FROM train_student ts
) tmp
WHERE timediff > 0 order by  timediff desc limit 10
2020/04/23 08:01:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:01:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 08:01:48 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:02:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:02:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:02:03 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:02:06 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 08:02:08 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:02:08 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:02:10 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:02:10 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:02:10 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:02:12 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:02:35 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:02:35 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:02:41 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:02:41 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:02:46 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 08:03:09 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:03:09 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:03:09 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 08:03:09 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 08:03:13 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:03:13 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:03:20 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:03:20 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:03:26 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 08:07:34 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:10:58 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:12:20 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:14:13 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 08:14:21 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:14:27 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:14:27 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:14:27 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:14:29 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:14:30 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:14:34 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:14:37 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:14:38 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:14:38 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 08:14:42 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:14:42 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:14:51 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:20:20 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 08:29:28 [I] socket keepConnect :keepAlive
2020/04/23 08:29:42 [I] socket keepConnect :keepAlive
2020/04/23 08:29:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:29:51 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:29:52 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:29:52 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:29:52 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:33:41 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 08:33:41 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 08:33:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:33:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:33:45 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 08:33:47 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:33:51 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:33:51 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 08:33:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:33:56 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:33:56 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:33:57 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:33:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:36:17 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:40:14 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:43:14 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:46:17 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:46:17 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:46:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:46:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:46:23 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:46:25 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 08:46:31 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 08:46:41 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:46:42 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:46:49 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:46:49 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:47:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 08:47:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:47:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:47:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:47:10 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:47:31 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:47:38 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:47:38 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:55:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:55:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:55:46 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 08:55:46 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:55:51 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:55:51 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:55:51 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:55:53 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:55:53 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:56:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 08:56:02 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:56:04 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:56:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:56:11 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:56:12 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 08:56:13 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 08:56:14 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:56:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 08:56:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 08:57:10 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 08:59:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 08:59:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 09:01:36 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:01:36 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:01:36 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:01:55 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:01:55 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:01:58 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:01:58 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:02:39 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:02:56 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:05:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:05:45 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:05:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:06:17 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:06:58 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:06:58 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:07:00 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:07:22 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:07:33 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 09:08:20 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:08:23 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:08:23 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:08:25 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:08:26 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:08:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:08:37 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:08:45 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:08:55 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:10:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:10:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:12:04 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:12:04 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:12:11 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:12:11 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:12:33 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 09:12:33 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:12:33 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:12:33 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:12:37 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:12:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 09:12:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:12:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:13:12 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:13:12 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 09:13:27 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:13:27 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:13:27 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:13:29 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:13:29 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:13:37 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:13:42 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:13:45 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:13:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:13:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:14:04 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:14:08 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:14:21 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:14:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:14:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:14:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 09:14:49 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:15:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:15:47 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:15:47 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:15:49 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:15:49 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:15:49 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:16:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:16:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:16:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:16:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:16:30 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:16:31 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:16:32 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:16:35 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:16:37 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:16:42 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:16:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:16:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT convert(timediff/60/60,decimal(20,1)) AS timehour , name
FROM (
	SELECT
	(SELECT SUM(unix_timestamp(b.end_time)-unix_timestamp(b.start_time))
	FROM train_activity_plan b
	LEFT JOIN train_activity a ON b.activity_id = a.id AND a.del_flag = 0
	WHERE b.end_time < NOW()
	AND a.audit_result = 3
	AND b.del_flag = 0
	AND b.type_id in(45,46)
	and (b.id in(SELECT plan_id FROM train_plan_student_asso WHERE student_id = ts.id AND del_flag = 0)
	or b.id in(SELECT plan_id FROM train_plan_student_enroll WHERE student_id = ts.id AND del_flag = 0 AND audit = 1))
	) AS timediff ,ts.*
	FROM train_student ts
) tmp
WHERE timediff > 0 order by  timediff desc limit 10
2020/04/23 09:16:48 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 09:16:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:16:55 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:16:55 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:16:55 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 09:17:04 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:17:12 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:17:24 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:17:24 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 09:17:34 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 09:17:39 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:17:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:17:48 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:17:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:17:53 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:17:53 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:18:06 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:18:06 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:18:06 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:18:06 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:18:11 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:18:11 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:18:26 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:18:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:18:32 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:18:33 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:18:33 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:18:37 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:18:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:18:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:18:47 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:18:47 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:18:47 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:18:47 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:18:49 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:18:51 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:18:51 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:18:52 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:19:02 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:19:13 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:19:21 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:19:21 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:19:24 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT SUM(train_count) AS value ,identity 
FROM (SELECT (SELECT COUNT(id) from train_plan_student_attend WHERE student_id = a.id GROUP BY student_id) AS train_count,a.* FROM train_student a) tmp_count
GROUP BY identity
2020/04/23 09:19:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:19:47 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:19:58 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:20:00 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:20:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:20:40 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:21:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:21:12 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 09:21:18 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:21:18 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:21:26 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:21:34 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:21:34 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:21:36 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:21:39 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:21:41 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:21:41 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:21:41 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 09:21:48 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:21:48 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:21:48 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:21:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:21:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:22:18 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:22:32 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:22:32 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:22:32 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:22:32 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:22:34 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:22:34 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:23:18 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:24:16 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:24:16 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:24:20 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:25:15 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:25:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:25:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:25:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/23 09:25:28 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:25:43 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 09:25:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:25:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:25:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:25:46 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:26:03 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:26:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:27:14 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:28:04 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/23 09:28:06 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:28:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:28:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:28:15 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:28:15 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:28:16 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:28:53 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:29:10 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:29:23 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:29:28 [I] socket keepConnect :keepAlive
2020/04/23 09:29:37 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/23 09:29:37 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/23 09:29:42 [I] socket keepConnect :keepAlive
2020/04/23 09:30:52 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/23 09:31:12 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/04/23 09:32:24 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/23 09:32:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 15:08:05 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/04/23 15:08:05 [I] ---MySQLHost-47.97.7.53----MySQLPassword-hjA4932Fgtb---UyunUrl-----ShowUrl- ---StoreUlr------
2020/04/23 15:08:05 [I] Starting Show
2020/04/23 15:08:05 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/04/23 15:08:05 [I] Configuration Info
Config files:
  [0]: E:\项目相关\数据可视化\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: E:\项目相关\数据可视化\dashboard-windows(本地可运行版)\server
  data: E:\项目相关\数据可视化\dashboard-windows(本地可运行版)\server\data
  logs: E:\项目相关\数据可视化\dashboard-windows(本地可运行版)\server\data\log
  plugins: E:\项目相关\数据可视化\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/04/23 15:08:05 [I] ---mysql---host-47.97.7.53:3306------name-dashborad_sx----user-dashborad_sx----paw-hjA4932Fgtb----
2020/04/23 15:08:05 [I] Database: mysql
2020/04/23 15:08:05 [I] ---mysql---host-47.97.7.53:3306------name-dashborad_sx----user-dashborad_sx----paw-hjA4932Fgtb----
2020/04/23 15:08:05 [I] Database: mysql
2020/04/23 15:08:07 [createRedis.go:34 Create()] [E] dial tcp 127.0.0.1:6379: connectex: No connection could be made because the target machine actively refused it.
2020/04/23 15:08:07 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/04/23 15:08:07 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/04/23 15:08:10 [I] Listen: http://0.0.0.0:7700
2020/04/23 15:08:28 [I] ++++++
2020/04/23 15:08:28 [I] ++++++
2020/04/23 15:08:28 [I] ++++++
2020/04/23 15:08:28 [I] ++++++
2020/04/23 15:08:31 [I] ++++++
2020/04/23 15:08:31 [I] ++++++
2020/04/23 15:08:35 [I] ++++++
2020/04/23 15:08:35 [I] ++++++
2020/04/23 15:08:35 [I] ++++++
2020/04/23 15:08:35 [I] ++++++
2020/04/23 15:08:35 [I] ++++++
2020/04/23 15:08:35 [I] ++++++
2020/04/23 15:08:35 [I] ++++++
2020/04/23 15:08:35 [I] ++++++
2020/04/23 15:08:35 [I] ++++++
2020/04/23 15:08:35 [I] ++++++
2020/04/23 15:08:38 [I] ++++++
2020/04/23 15:08:38 [I] ++++++
2020/04/23 15:08:38 [I] ++++++
2020/04/23 15:08:39 [I] ++++++
2020/04/23 15:08:39 [I] ++++++
2020/04/23 15:08:39 [I] ++++++
2020/04/23 15:08:39 [I] ++++++
2020/04/23 15:08:39 [I] ++++++
2020/04/23 15:08:39 [I] ++++++
2020/04/23 15:08:41 [I] start save to redis
2020/04/23 15:08:42 [I] ++++++
2020/04/23 15:08:42 [I] ++++++
2020/04/23 15:08:42 [I] ++++++
2020/04/23 15:08:43 [I] ++++++
2020/04/23 15:08:43 [I] ++++++
2020/04/23 15:08:45 [I] ++++++
2020/04/23 15:08:45 [I] ++++++
2020/04/23 15:08:45 [I] ++++++
2020/04/23 15:08:45 [I] connect
2020/04/23 15:08:45 [I] ++++++
2020/04/23 15:08:45 [I] ++++++
2020/04/23 15:08:45 [I] ++++++
2020/04/23 15:08:45 [I] ++++++
2020/04/23 15:08:46 [I] ++++++
2020/04/23 15:08:46 [I] ++++++
2020/04/23 15:08:47 [I] ++++++
2020/04/23 15:08:47 [I] ++++++
2020/04/23 15:08:47 [I] ++++++
2020/04/23 15:08:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/23 15:08:47 [I] ++++++
2020/04/23 15:08:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/23 15:08:47 [I] ++++++
2020/04/23 15:08:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/23 15:08:47 [I] ++++++
2020/04/23 15:08:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/23 15:08:47 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/23 15:08:48 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/23 15:08:48 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/23 15:08:48 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/23 15:08:48 [I] ++++++
2020/04/23 15:08:48 [I] ++++++
2020/04/23 15:08:48 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/23 15:08:48 [I] ++++++
2020/04/23 15:08:48 [I] ++++++
2020/04/23 15:08:48 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/23 15:08:49 [I] ++++++
2020/04/23 15:08:49 [I] ++++++
2020/04/23 15:08:49 [I] ++++++
2020/04/23 15:08:49 [I] ++++++
2020/04/23 15:08:49 [I] ++++++
2020/04/23 15:08:49 [I] ++++++
2020/04/23 15:08:52 [I] ++++++
2020/04/23 15:08:52 [I] ++++++
2020/04/23 15:09:02 [I] ++++++
2020/04/23 15:09:02 [I] ++++++
2020/04/23 15:09:02 [I] ++++++
2020/04/23 15:09:03 [I] ++++++
2020/04/23 15:09:03 [I] ++++++
2020/04/23 15:09:10 [I] ++++++
2020/04/23 15:09:10 [I] ++++++
2020/04/23 15:09:10 [I] ++++++
2020/04/23 15:09:10 [I] ++++++
2020/04/23 15:09:10 [I] ++++++
2020/04/23 15:09:10 [I] ++++++
2020/04/23 15:09:10 [I] ++++++
2020/04/23 15:09:10 [I] ++++++
2020/04/23 15:09:10 [I] ++++++
2020/04/23 15:09:10 [I] ++++++
2020/04/23 15:09:12 [I] ++++++
2020/04/23 15:09:12 [I] ++++++
2020/04/23 15:09:13 [I] ++++++
2020/04/23 15:09:13 [I] ++++++
2020/04/23 15:09:18 [I] ++++++
2020/04/23 15:09:18 [I] ++++++
2020/04/23 15:09:19 [datasource.go:254 TestDatasource()] [E] dial tcp: i/o timeout
2020/04/23 15:09:23 [I] ++++++
2020/04/23 15:09:23 [I] ++++++
2020/04/23 15:09:24 [I] ++++++
2020/04/23 15:09:24 [I] ++++++
2020/04/23 15:09:25 [datasource.go:254 TestDatasource()] [E] dial tcp 118.178.182.6:33062: i/o timeout
2020/04/23 15:09:40 [I] ++++++
2020/04/23 15:09:40 [I] ++++++
2020/04/23 15:09:46 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=069fe80c869a41a1a4fd5886d40d8ff6:0) result err:dial tcp 127.0.0.1:6379: connectex: No connection could be made because the target machine actively refused it.
2020/04/23 15:09:46 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/23 15:09:46 [I] add 第一次建立连接的时候返回所有数据 
2020/04/23 15:09:46 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/23 15:09:46 [socket.go:99 1()] [E] add rotuineName :069fe80c869a41a1a4fd5886d40d8ff61587625786 ,singledata :{069fe80c869a41a1a4fd5886d40d8ff6 0s %!s(*socketio.Socket=0xc042546770)}
2020/04/23 15:10:04 [I] start save to redis
2020/04/23 15:10:08 [I] start save to redis
2020/04/23 15:10:10 [I] ++++++
2020/04/23 15:10:10 [I] ++++++
2020/04/23 15:10:40 [I] ++++++
2020/04/23 15:10:40 [I] ++++++
2020/04/23 15:10:45 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f660f1019da44b1e9d2baf843f4bc118:0) result err:dial tcp 127.0.0.1:6379: connectex: No connection could be made because the target machine actively refused it.
2020/04/23 15:10:45 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/23 15:10:45 [I] add 第一次建立连接的时候返回所有数据 
2020/04/23 15:10:45 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/23 15:10:46 [socket.go:99 1()] [E] add rotuineName :f660f1019da44b1e9d2baf843f4bc1181587625846 ,singledata :{f660f1019da44b1e9d2baf843f4bc118 30m %!s(*socketio.Socket=0xc042546770)}
2020/04/23 15:10:46 [I] socket disconnect :disconnect
2020/04/23 15:10:48 [I] 停止 key:069fe80c869a41a1a4fd5886d40d8ff6 , 线程id:069fe80c869a41a1a4fd5886d40d8ff61587625786
2020/04/23 15:11:10 [I] ++++++
2020/04/23 15:11:10 [I] ++++++
2020/04/23 15:11:40 [I] ++++++
2020/04/23 15:11:40 [I] ++++++
2020/04/23 15:12:11 [I] ++++++
2020/04/23 15:12:11 [I] ++++++
2020/04/23 15:12:41 [I] ++++++
2020/04/23 15:12:41 [I] ++++++
2020/04/23 15:13:11 [I] ++++++
2020/04/23 15:13:11 [I] ++++++
2020/04/23 15:13:40 [I] ++++++
2020/04/23 15:13:40 [I] ++++++
2020/04/23 15:14:11 [I] ++++++
2020/04/23 15:14:11 [I] ++++++
2020/04/23 15:14:41 [I] ++++++
2020/04/23 15:14:41 [I] ++++++
2020/04/23 15:15:11 [I] ++++++
2020/04/23 15:15:11 [I] ++++++
2020/04/23 15:15:41 [I] ++++++
2020/04/23 15:15:41 [I] ++++++
2020/04/23 15:16:11 [I] ++++++
2020/04/23 15:16:11 [I] ++++++
2020/04/23 15:16:41 [I] ++++++
2020/04/23 15:16:41 [I] ++++++
2020/04/23 15:16:46 [I] start save to redis
2020/04/23 15:17:11 [I] ++++++
2020/04/23 15:17:11 [I] ++++++
2020/04/23 15:17:12 [I] start save to redis
2020/04/23 15:17:41 [I] ++++++
2020/04/23 15:17:41 [I] ++++++
2020/04/23 15:18:11 [I] ++++++
2020/04/23 15:18:11 [I] ++++++
2020/04/23 15:18:41 [I] ++++++
2020/04/23 15:18:41 [I] ++++++
2020/04/23 15:18:50 [I] start save to redis
2020/04/23 15:18:51 [I] start save to redis
2020/04/23 15:18:51 [I] start save to redis
2020/04/23 15:18:52 [I] start save to redis
2020/04/23 15:18:52 [I] start save to redis
2020/04/23 15:18:52 [I] start save to redis
2020/04/23 15:18:53 [I] start save to redis
2020/04/23 15:18:54 [I] start save to redis
2020/04/23 15:18:54 [I] start save to redis
2020/04/23 15:18:54 [I] start save to redis
2020/04/23 15:18:54 [I] start save to redis
2020/04/23 15:18:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*) as total_count,count(satisfaction = 0 or null) as count_satisfacted , format((count(satisfaction = 0 or null)/count(*)),2) as percent,
DATE_FORMAT(a.record_time,'%Y-%m') as time
from show_consulting a GROUP BY month(a.record_time)
2020/04/23 15:18:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,select name,code,level,daily_integral_week 
from show_integral 
ORDER BY daily_integral_week DESC limit 10
2020/04/23 15:18:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/23 15:19:11 [I] ++++++
2020/04/23 15:19:11 [I] ++++++
2020/04/23 15:19:12 [I] start save to redis
2020/04/23 15:19:12 [I] start save to redis
2020/04/23 15:19:12 [I] start save to redis
2020/04/23 15:19:12 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT SUM(train_count) AS value ,identity 
FROM (SELECT (SELECT COUNT(id) from train_plan_student_attend WHERE student_id = a.id GROUP BY student_id) AS train_count,a.* FROM train_student a) tmp_count
GROUP BY identity
2020/04/23 15:19:22 [I] start save to redis
2020/04/23 15:19:30 [I] start save to redis
2020/04/23 15:19:41 [I] ++++++
2020/04/23 15:19:41 [I] ++++++
2020/04/23 15:20:11 [I] ++++++
2020/04/23 15:20:11 [I] ++++++
2020/04/23 15:20:41 [I] ++++++
2020/04/23 15:20:41 [I] ++++++
2020/04/23 15:21:11 [I] ++++++
2020/04/23 15:21:11 [I] ++++++
2020/04/23 15:21:41 [I] ++++++
2020/04/23 15:21:41 [I] ++++++
2020/04/23 15:22:11 [I] ++++++
2020/04/23 15:22:11 [I] ++++++
2020/04/23 15:22:41 [I] ++++++
2020/04/23 15:22:41 [I] ++++++
2020/04/23 15:23:11 [I] ++++++
2020/04/23 15:23:11 [I] ++++++
2020/04/23 15:23:41 [I] ++++++
2020/04/23 15:23:41 [I] ++++++
2020/04/23 15:24:11 [I] ++++++
2020/04/23 15:24:11 [I] ++++++
2020/04/23 15:24:41 [I] ++++++
2020/04/23 15:24:41 [I] ++++++
2020/04/23 15:24:48 [I] start save to redis
2020/04/23 15:24:55 [I] start save to redis
2020/04/23 15:25:11 [I] ++++++
2020/04/23 15:25:11 [I] ++++++
2020/04/23 15:25:41 [I] ++++++
2020/04/23 15:25:41 [I] ++++++
2020/04/23 15:26:11 [I] ++++++
2020/04/23 15:26:11 [I] ++++++
2020/04/23 15:26:41 [I] ++++++
2020/04/23 15:26:41 [I] ++++++
2020/04/23 15:27:11 [I] ++++++
2020/04/23 15:27:11 [I] ++++++
2020/04/23 15:27:41 [I] ++++++
2020/04/23 15:27:41 [I] ++++++
2020/04/23 15:28:11 [I] ++++++
2020/04/23 15:28:11 [I] ++++++
2020/04/23 15:28:19 [I] start save to redis
2020/04/23 15:28:41 [I] ++++++
2020/04/23 15:28:41 [I] ++++++
2020/04/23 15:29:11 [I] ++++++
2020/04/23 15:29:11 [I] ++++++
2020/04/23 15:29:41 [I] ++++++
2020/04/23 15:29:41 [I] ++++++
2020/04/23 15:30:11 [I] ++++++
2020/04/23 15:30:11 [I] ++++++
2020/04/23 15:30:41 [I] ++++++
2020/04/23 15:30:41 [I] ++++++
2020/04/23 15:31:11 [I] ++++++
2020/04/23 15:31:11 [I] ++++++
2020/04/23 15:31:41 [I] ++++++
2020/04/23 15:31:41 [I] ++++++
2020/04/23 15:32:02 [I] start save to redis
2020/04/23 15:32:11 [I] ++++++
2020/04/23 15:32:11 [I] ++++++
2020/04/23 15:32:41 [I] ++++++
2020/04/23 15:32:41 [I] ++++++
2020/04/23 15:33:11 [I] ++++++
2020/04/23 15:33:11 [I] ++++++
2020/04/23 15:33:41 [I] ++++++
2020/04/23 15:33:41 [I] ++++++
2020/04/23 15:34:11 [I] ++++++
2020/04/23 15:34:11 [I] ++++++
2020/04/23 15:34:41 [I] ++++++
2020/04/23 15:34:41 [I] ++++++
2020/04/23 15:35:11 [I] ++++++
2020/04/23 15:35:11 [I] ++++++
2020/04/23 15:35:41 [I] ++++++
2020/04/23 15:35:41 [I] ++++++
2020/04/27 16:53:14 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/04/27 16:53:14 [I] ---MySQLHost-47.97.7.53----MySQLPassword-hjA4932Fgtb---UyunUrl-----ShowUrl- ---StoreUlr------
2020/04/27 16:53:14 [I] Starting Show
2020/04/27 16:53:14 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/04/27 16:53:14 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/04/27 16:53:14 [I] ---mysql---host-47.97.7.53:3306------name-dashborad_sx----user-dashborad_sx----paw-hjA4932Fgtb----
2020/04/27 16:53:14 [I] Database: mysql
2020/04/27 16:53:14 [I] ---mysql---host-47.97.7.53:3306------name-dashborad_sx----user-dashborad_sx----paw-hjA4932Fgtb----
2020/04/27 16:53:14 [I] Database: mysql
2020/04/27 16:53:19 [createRedis.go:34 Create()] [E] dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:53:19 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/04/27 16:53:19 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/04/27 16:53:19 [I] Listen: http://0.0.0.0:7700
2020/04/27 16:53:36 [I] ++++++
2020/04/27 16:53:36 [I] ++++++
2020/04/27 16:53:36 [I] ++++++
2020/04/27 16:53:36 [I] ++++++
2020/04/27 16:53:43 [I] ++++++
2020/04/27 16:53:43 [I] connect
2020/04/27 16:53:43 [I] ++++++
2020/04/27 16:53:43 [I] ++++++
2020/04/27 16:53:43 [I] ++++++
2020/04/27 16:53:43 [I] ++++++
2020/04/27 16:53:43 [I] ++++++
2020/04/27 16:53:43 [I] ++++++
2020/04/27 16:53:43 [I] ++++++
2020/04/27 16:53:43 [I] ++++++
2020/04/27 16:53:44 [I] ++++++
2020/04/27 16:53:44 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:53:44 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:53:44 [I] ++++++
2020/04/27 16:53:44 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:53:44 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:53:44 [I] ++++++
2020/04/27 16:53:44 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:53:44 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:53:44 [I] ++++++
2020/04/27 16:53:44 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:53:44 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:53:44 [I] ++++++
2020/04/27 16:53:44 [I] ++++++
2020/04/27 16:53:44 [I] ++++++
2020/04/27 16:53:49 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:53:49 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:53:49 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:53:49 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:53:49 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1587977629 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc042548d80)}
2020/04/27 16:53:54 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:53:54 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:53:54 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:53:54 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:53:54 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61587977634 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc042548d80)}
2020/04/27 16:53:59 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:53:59 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:53:59 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:53:59 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:53:59 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41587977639 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc042548d80)}
2020/04/27 16:54:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:54:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:54:04 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:54:04 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:54:04 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751587977644 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc042548d80)}
2020/04/27 16:54:04 [I] socket disconnect :disconnect
2020/04/27 16:54:04 [I] socket disconnect :disconnect
2020/04/27 16:54:05 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1587977629
2020/04/27 16:54:14 [I] ++++++
2020/04/27 16:54:14 [I] ++++++
2020/04/27 16:54:14 [I] ++++++
2020/04/27 16:54:14 [I] connect
2020/04/27 16:54:14 [I] ++++++
2020/04/27 16:54:14 [I] ++++++
2020/04/27 16:54:14 [I] ++++++
2020/04/27 16:54:14 [I] ++++++
2020/04/27 16:54:14 [I] ++++++
2020/04/27 16:54:14 [I] ++++++
2020/04/27 16:54:15 [I] ++++++
2020/04/27 16:54:15 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:54:15 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:54:15 [I] ++++++
2020/04/27 16:54:15 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:54:15 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:54:15 [I] ++++++
2020/04/27 16:54:15 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:54:15 [I] ++++++
2020/04/27 16:54:15 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:54:15 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:54:15 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:54:20 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:54:20 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:54:20 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:54:20 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:54:20 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1587977660 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc04236e5d0)}
2020/04/27 16:54:25 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:54:25 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:54:25 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:54:25 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:54:25 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41587977665 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc04236e5d0)}
2020/04/27 16:54:25 [I] ++++++
2020/04/27 16:54:25 [I] ++++++
2020/04/27 16:54:25 [I] ++++++
2020/04/27 16:54:27 [I] ++++++
2020/04/27 16:54:27 [I] ++++++
2020/04/27 16:54:30 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:54:30 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:54:30 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:54:30 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:54:30 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751587977670 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc04236e5d0)}
2020/04/27 16:54:35 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:54:35 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:54:35 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:54:35 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:54:35 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61587977675 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc04236e5d0)}
2020/04/27 16:54:35 [I] socket disconnect :disconnect
2020/04/27 16:54:35 [I] socket disconnect :disconnect
2020/04/27 16:55:00 [I] ++++++
2020/04/27 16:55:00 [I] connect
2020/04/27 16:55:00 [I] ++++++
2020/04/27 16:55:00 [I] ++++++
2020/04/27 16:55:00 [I] ++++++
2020/04/27 16:55:00 [I] ++++++
2020/04/27 16:55:00 [I] ++++++
2020/04/27 16:55:00 [I] ++++++
2020/04/27 16:55:00 [I] ++++++
2020/04/27 16:55:00 [I] ++++++
2020/04/27 16:55:01 [I] ++++++
2020/04/27 16:55:01 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:55:01 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:55:01 [I] ++++++
2020/04/27 16:55:01 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:55:01 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:55:06 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=6fd02410beea4c149e7442a7487a1b3a:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:55:06 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:55:06 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:55:06 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:55:06 [socket.go:99 1()] [E] add rotuineName :6fd02410beea4c149e7442a7487a1b3a1587977706 ,singledata :{6fd02410beea4c149e7442a7487a1b3a 15m %!s(*socketio.Socket=0xc042250db0)}
2020/04/27 16:55:09 [I] ++++++
2020/04/27 16:55:09 [I] ++++++
2020/04/27 16:55:09 [I] ++++++
2020/04/27 16:55:11 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=129f3a5530f04a20a90a601691e43cb9:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:55:11 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:55:11 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:55:11 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:55:11 [socket.go:99 1()] [E] add rotuineName :129f3a5530f04a20a90a601691e43cb91587977711 ,singledata :{129f3a5530f04a20a90a601691e43cb9 15m %!s(*socketio.Socket=0xc042250db0)}
2020/04/27 16:55:11 [I] socket disconnect :disconnect
2020/04/27 16:55:11 [I] socket disconnect :disconnect
2020/04/27 16:55:18 [I] ++++++
2020/04/27 16:55:18 [I] ++++++
2020/04/27 16:55:18 [I] ++++++
2020/04/27 16:55:18 [I] connect
2020/04/27 16:55:18 [I] ++++++
2020/04/27 16:55:18 [I] ++++++
2020/04/27 16:55:18 [I] ++++++
2020/04/27 16:55:18 [I] ++++++
2020/04/27 16:55:18 [I] ++++++
2020/04/27 16:55:18 [I] ++++++
2020/04/27 16:55:19 [I] ++++++
2020/04/27 16:55:19 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:55:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:55:19 [I] ++++++
2020/04/27 16:55:19 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:55:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:55:19 [I] ++++++
2020/04/27 16:55:19 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:55:19 [I] ++++++
2020/04/27 16:55:19 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:55:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:55:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:55:24 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=8b38e0a0646c434db076aa7d877e067a:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:55:24 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:55:24 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:55:24 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:55:24 [socket.go:99 1()] [E] add rotuineName :8b38e0a0646c434db076aa7d877e067a1587977724 ,singledata :{8b38e0a0646c434db076aa7d877e067a 0s %!s(*socketio.Socket=0xc0425a3dd0)}
2020/04/27 16:55:29 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=3773a085af4743d6a45e09940ce2ff94:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:55:29 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:55:29 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:55:29 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:55:29 [socket.go:99 1()] [E] add rotuineName :3773a085af4743d6a45e09940ce2ff941587977729 ,singledata :{3773a085af4743d6a45e09940ce2ff94 5s %!s(*socketio.Socket=0xc0425a3dd0)}
2020/04/27 16:55:29 [I] ++++++
2020/04/27 16:55:29 [I] ++++++
2020/04/27 16:55:29 [I] ++++++
2020/04/27 16:55:34 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea87c133077f4d20b8d7edd6cbc2ff0c:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:55:34 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:55:34 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:55:34 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:55:34 [socket.go:99 1()] [E] add rotuineName :ea87c133077f4d20b8d7edd6cbc2ff0c1587977734 ,singledata :{ea87c133077f4d20b8d7edd6cbc2ff0c 2s %!s(*socketio.Socket=0xc0425a3dd0)}
2020/04/27 16:55:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=3773a085af4743d6a45e09940ce2ff94:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:55:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:55:39 [I] --getSingleData----
2020/04/27 16:55:44 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=b5dbf8a039c14d7db476ee7809f185fb:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:55:44 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:55:44 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:55:44 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:55:44 [socket.go:99 1()] [E] add rotuineName :b5dbf8a039c14d7db476ee7809f185fb1587977744 ,singledata :{b5dbf8a039c14d7db476ee7809f185fb 30m %!s(*socketio.Socket=0xc0425a3dd0)}
2020/04/27 16:55:44 [I] socket disconnect :disconnect
2020/04/27 16:55:44 [I] socket disconnect :disconnect
2020/04/27 16:55:46 [I] 停止 key:8b38e0a0646c434db076aa7d877e067a , 线程id:8b38e0a0646c434db076aa7d877e067a1587977724
2020/04/27 16:55:49 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea87c133077f4d20b8d7edd6cbc2ff0c:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:55:49 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:55:49 [I] --getSingleData----
2020/04/27 16:55:54 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=3773a085af4743d6a45e09940ce2ff94:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:55:54 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:55:54 [I] --getSingleData----
2020/04/27 16:55:54 [I] 停止 key:3773a085af4743d6a45e09940ce2ff94 , 线程id:3773a085af4743d6a45e09940ce2ff941587977729
2020/04/27 16:55:59 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea87c133077f4d20b8d7edd6cbc2ff0c:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:55:59 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:55:59 [I] --getSingleData----
2020/04/27 16:55:59 [I] 停止 key:ea87c133077f4d20b8d7edd6cbc2ff0c , 线程id:ea87c133077f4d20b8d7edd6cbc2ff0c1587977734
2020/04/27 16:56:05 [I] ++++++
2020/04/27 16:56:05 [I] ++++++
2020/04/27 16:56:05 [I] ++++++
2020/04/27 16:56:05 [I] connect
2020/04/27 16:56:05 [I] ++++++
2020/04/27 16:56:05 [I] ++++++
2020/04/27 16:56:05 [I] ++++++
2020/04/27 16:56:05 [I] ++++++
2020/04/27 16:56:05 [I] ++++++
2020/04/27 16:56:05 [I] ++++++
2020/04/27 16:56:05 [I] ++++++
2020/04/27 16:56:05 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:56:06 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:56:06 [I] ++++++
2020/04/27 16:56:06 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:56:06 [I] ++++++
2020/04/27 16:56:06 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:56:06 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:56:06 [I] ++++++
2020/04/27 16:56:06 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 16:56:06 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:56:06 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 16:56:11 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=9bcc55fb65e7471bb45b4d660c2d6ed9:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:56:11 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:56:11 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:56:11 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:56:11 [socket.go:99 1()] [E] add rotuineName :9bcc55fb65e7471bb45b4d660c2d6ed91587977771 ,singledata :{9bcc55fb65e7471bb45b4d660c2d6ed9 30m %!s(*socketio.Socket=0xc042645390)}
2020/04/27 16:56:16 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d0249fe870284e61bc2c53373065cf4c:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:56:16 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:56:16 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:56:16 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:56:16 [socket.go:99 1()] [E] add rotuineName :d0249fe870284e61bc2c53373065cf4c1587977776 ,singledata :{d0249fe870284e61bc2c53373065cf4c 30m %!s(*socketio.Socket=0xc042645390)}
2020/04/27 16:56:18 [I] ++++++
2020/04/27 16:56:18 [I] ++++++
2020/04/27 16:56:18 [I] ++++++
2020/04/27 16:56:21 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=a42c854494ea40cb9fcde64899b4e139:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:56:21 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:56:21 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:56:21 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:56:21 [socket.go:99 1()] [E] add rotuineName :a42c854494ea40cb9fcde64899b4e1391587977781 ,singledata :{a42c854494ea40cb9fcde64899b4e139 30m %!s(*socketio.Socket=0xc042645390)}
2020/04/27 16:56:22 [I] start save to redis
2020/04/27 16:56:22 [I] start save to redis
2020/04/27 16:56:22 [I] start save to redis
2020/04/27 16:56:23 [I] start save to redis
2020/04/27 16:56:23 [I] start save to redis
2020/04/27 16:56:23 [I] start save to redis
2020/04/27 16:56:24 [I] ++++++
2020/04/27 16:56:24 [I] ++++++
2020/04/27 16:56:26 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=9432773efbd24674a6e425adf2e5a364:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 16:56:26 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 16:56:26 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 16:56:26 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 16:56:26 [socket.go:99 1()] [E] add rotuineName :9432773efbd24674a6e425adf2e5a3641587977786 ,singledata :{9432773efbd24674a6e425adf2e5a364 30m %!s(*socketio.Socket=0xc042645390)}
2020/04/27 16:56:26 [I] socket disconnect :disconnect
2020/04/27 16:56:26 [I] socket disconnect :disconnect
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:30 [I] connect
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:30 [I] ++++++
2020/04/27 16:56:58 [I] ++++++
2020/04/27 16:56:58 [I] ++++++
2020/04/27 16:57:18 [I] socket disconnect :disconnect
2020/04/27 16:57:18 [I] socket disconnect :disconnect
2020/04/27 16:57:18 [I] ++++++
2020/04/27 16:57:18 [I] ++++++
2020/04/27 16:57:18 [I] ++++++
2020/04/27 16:57:22 [I] ++++++
2020/04/27 16:57:22 [I] ++++++
2020/04/27 16:57:22 [I] ++++++
2020/04/27 16:57:22 [I] connect
2020/04/27 16:57:22 [I] ++++++
2020/04/27 16:57:22 [I] ++++++
2020/04/27 16:57:22 [I] ++++++
2020/04/27 16:57:22 [I] ++++++
2020/04/27 16:57:22 [I] ++++++
2020/04/27 16:57:22 [I] ++++++
2020/04/27 16:58:23 [I] start save to redis
2020/04/27 16:58:51 [I] ++++++
2020/04/27 16:58:51 [I] ++++++
2020/04/27 16:58:51 [I] ++++++
2020/04/27 16:58:51 [I] ++++++
2020/04/27 16:58:51 [I] ++++++
2020/04/27 16:58:51 [I] ++++++
2020/04/27 16:59:40 [I] ++++++
2020/04/27 16:59:40 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/27 16:59:40 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/27 16:59:40 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/27 16:59:58 [I] ++++++
2020/04/27 16:59:58 [I] ++++++
2020/04/27 16:59:58 [I] ++++++
2020/04/27 16:59:58 [I] ++++++
2020/04/27 16:59:58 [I] ++++++
2020/04/27 16:59:58 [I] ++++++
2020/04/27 16:59:59 [I] ++++++
2020/04/27 16:59:59 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/27 16:59:59 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/27 16:59:59 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/27 17:00:03 [I] ++++++
2020/04/27 17:00:12 [I] ++++++
2020/04/27 17:00:12 [I] ++++++
2020/04/27 17:00:12 [I] ++++++
2020/04/27 17:00:12 [I] ++++++
2020/04/27 17:00:12 [I] ++++++
2020/04/27 17:00:12 [I] ++++++
2020/04/27 17:00:36 [I] ++++++
2020/04/27 17:00:36 [I] ++++++
2020/04/27 17:00:40 [I] socket disconnect :disconnect
2020/04/27 17:00:40 [I] socket disconnect :disconnect
2020/04/27 17:00:40 [I] ++++++
2020/04/27 17:00:40 [I] ++++++
2020/04/27 17:00:40 [I] ++++++
2020/04/27 17:00:43 [I] ++++++
2020/04/27 17:00:43 [I] ++++++
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [I] connect
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 17:00:47 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 17:00:47 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 17:00:47 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 17:00:47 [I] ++++++
2020/04/27 17:00:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 17:00:47 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 17:00:51 [I] ++++++
2020/04/27 17:00:51 [I] ++++++
2020/04/27 17:00:51 [I] ++++++
2020/04/27 17:00:51 [I] ++++++
2020/04/27 17:00:51 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/27 17:00:51 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/27 17:00:51 [I] ++++++
2020/04/27 17:00:51 [I] ++++++
2020/04/27 17:00:51 [I] ++++++
2020/04/27 17:00:51 [I] ++++++
2020/04/27 17:00:51 [I] ++++++
2020/04/27 17:00:51 [I] ++++++
2020/04/27 17:01:11 [I] ++++++
2020/04/27 17:01:11 [I] ++++++
2020/04/27 17:01:14 [I] ++++++
2020/04/27 17:01:14 [I] ++++++
2020/04/27 17:01:14 [I] ++++++
2020/04/27 17:01:26 [I] ++++++
2020/04/27 17:01:26 [I] ++++++
2020/04/27 17:01:26 [I] ++++++
2020/04/27 17:01:26 [I] ++++++
2020/04/27 17:01:26 [I] ++++++
2020/04/27 17:01:26 [I] ++++++
2020/04/27 17:01:26 [I] ++++++
2020/04/27 17:01:26 [I] ++++++
2020/04/27 17:01:26 [I] ++++++
2020/04/27 17:01:26 [I] ++++++
2020/04/27 17:01:30 [I] ++++++
2020/04/27 17:01:30 [I] ++++++
2020/04/27 17:01:30 [I] ++++++
2020/04/27 17:01:45 [I] ++++++
2020/04/27 17:01:45 [I] ++++++
2020/04/27 17:01:45 [I] ++++++
2020/04/27 17:01:45 [I] ++++++
2020/04/27 17:01:45 [I] ++++++
2020/04/27 17:01:45 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 17:01:45 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 17:01:45 [I] ++++++
2020/04/27 17:01:45 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 17:01:45 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 17:01:45 [I] ++++++
2020/04/27 17:01:45 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 17:01:45 [I] ++++++
2020/04/27 17:01:45 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 17:01:45 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 17:01:45 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 17:01:46 [I] ++++++
2020/04/27 17:01:46 [I] ++++++
2020/04/27 17:01:46 [I] ++++++
2020/04/27 17:02:04 [I] start save to redis
2020/04/27 17:04:16 [I] start save to redis
2020/04/27 17:04:16 [I] start save to redis
2020/04/27 17:04:16 [I] start save to redis
2020/04/27 17:04:26 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=b999dff748b848078722f75e15d306b4:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 17:04:26 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 17:04:26 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 17:04:26 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 17:04:26 [socket.go:99 1()] [E] add rotuineName :b999dff748b848078722f75e15d306b41587978266 ,singledata :{b999dff748b848078722f75e15d306b4 30m %!s(*socketio.Socket=0xc042548e80)}
2020/04/27 17:04:27 [I] start save to redis
2020/04/27 17:05:21 [I] start save to redis
2020/04/27 17:05:57 [I] start save to redis
2020/04/27 17:06:16 [I] start save to redis
2020/04/27 17:08:43 [I] start save to redis
2020/04/27 17:09:36 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=30c7f3fb361244fea5be74527e3ae8ac:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 17:09:36 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 17:09:36 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 17:09:36 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 17:09:36 [socket.go:99 1()] [E] add rotuineName :30c7f3fb361244fea5be74527e3ae8ac1587978576 ,singledata :{30c7f3fb361244fea5be74527e3ae8ac 15m %!s(*socketio.Socket=0xc042548e80)}
2020/04/27 17:09:36 [I] socket disconnect :disconnect
2020/04/27 17:10:06 [I] start save to redis
2020/04/27 17:10:10 [I] start save to redis
2020/04/27 17:11:55 [I] ++++++
2020/04/27 17:11:55 [I] ++++++
2020/04/27 17:11:55 [I] ++++++
2020/04/27 17:11:55 [I] ++++++
2020/04/27 17:17:22 [I] ++++++
2020/04/27 17:17:22 [I] ++++++
2020/04/27 17:17:22 [I] ++++++
2020/04/27 17:18:52 [I] start save to redis
2020/04/27 17:18:53 [I] start save to redis
2020/04/27 17:18:53 [I] start save to redis
2020/04/27 17:18:54 [I] start save to redis
2020/04/27 17:18:54 [I] start save to redis
2020/04/27 17:18:54 [I] start save to redis
2020/04/27 17:18:55 [I] start save to redis
2020/04/27 17:18:56 [I] start save to redis
2020/04/27 17:18:56 [I] start save to redis
2020/04/27 17:18:56 [I] start save to redis
2020/04/27 17:18:56 [I] start save to redis
2020/04/27 17:19:32 [I] start save to redis
2020/04/27 17:20:21 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=6fd02410beea4c149e7442a7487a1b3a:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 17:20:21 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 17:20:21 [I] --getSingleData----
2020/04/27 17:20:21 [I] 停止 key:6fd02410beea4c149e7442a7487a1b3a , 线程id:6fd02410beea4c149e7442a7487a1b3a1587977706
2020/04/27 17:20:31 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=129f3a5530f04a20a90a601691e43cb9:0) result err:dial tcp 10.75.23.57:6379: i/o timeout
2020/04/27 17:20:31 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 17:20:31 [I] --getSingleData----
2020/04/27 17:20:31 [I] 停止 key:129f3a5530f04a20a90a601691e43cb9 , 线程id:129f3a5530f04a20a90a601691e43cb91587977711
2020/04/27 17:23:23 [I] ++++++
2020/04/27 17:23:23 [I] ++++++
2020/04/27 17:24:50 [I] start save to redis
2020/04/27 17:24:58 [I] start save to redis
2020/04/27 17:26:07 [I] ++++++
2020/04/27 17:26:07 [I] ++++++
2020/04/27 17:26:07 [I] ++++++
2020/04/27 17:26:07 [I] ++++++
2020/04/27 17:26:16 [I] ++++++
2020/04/27 17:26:16 [I] ++++++
2020/04/27 17:26:16 [I] ++++++
2020/04/27 17:26:16 [I] ++++++
2020/04/27 17:49:41 [I] ++++++
2020/04/27 17:49:41 [I] ++++++
2020/04/27 17:49:41 [I] ++++++
2020/04/27 17:49:41 [I] ++++++
2020/04/27 17:50:22 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/04/27 17:50:22 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/04/27 17:50:22 [I] Starting Show
2020/04/27 17:50:22 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/04/27 17:50:22 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/04/27 17:50:22 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/27 17:50:22 [I] Database: mysql
2020/04/27 17:50:22 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/27 17:50:22 [I] Database: mysql
2020/04/27 17:50:23 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/04/27 17:50:23 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/04/27 17:50:23 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/04/27 17:50:24 [I] Listen: http://0.0.0.0:7700
2020/04/27 17:50:31 [I] ++++++
2020/04/27 17:50:31 [I] ++++++
2020/04/27 17:50:31 [I] ++++++
2020/04/27 17:50:31 [I] ++++++
2020/04/27 17:53:25 [I] start save to redis
2020/04/27 17:53:26 [I] start save to redis
2020/04/27 17:53:26 [I] start save to redis
2020/04/27 17:53:26 [I] start save to redis
2020/04/27 17:53:27 [I] start save to redis
2020/04/27 17:53:27 [I] start save to redis
2020/04/27 17:54:50 [I] start save to redis
2020/04/27 17:54:58 [I] start save to redis
2020/04/27 17:58:23 [I] start save to redis
2020/04/27 18:02:04 [I] start save to redis
2020/04/27 18:04:16 [I] start save to redis
2020/04/27 18:04:16 [I] start save to redis
2020/04/27 18:04:16 [I] start save to redis
2020/04/27 18:04:27 [I] start save to redis
2020/04/27 18:06:38 [I] start save to redis
2020/04/27 18:06:39 [I] start save to redis
2020/04/27 18:08:56 [I] start save to redis
2020/04/27 18:10:10 [I] start save to redis
2020/04/27 18:12:06 [I] start save to redis
2020/04/27 18:16:16 [I] start save to redis
2020/04/27 18:18:53 [I] start save to redis
2020/04/27 18:18:53 [I] start save to redis
2020/04/27 18:18:53 [I] start save to redis
2020/04/27 18:18:54 [I] start save to redis
2020/04/27 18:18:54 [I] start save to redis
2020/04/27 18:18:54 [I] start save to redis
2020/04/27 18:18:55 [I] start save to redis
2020/04/27 18:18:56 [I] start save to redis
2020/04/27 18:18:56 [I] start save to redis
2020/04/27 18:18:56 [I] start save to redis
2020/04/27 18:18:56 [I] start save to redis
2020/04/27 18:19:32 [I] start save to redis
2020/04/27 18:27:13 [I] ++++++
2020/04/27 18:27:13 [I] ++++++
2020/04/27 18:27:13 [I] ++++++
2020/04/27 18:27:13 [I] ++++++
2020/04/27 18:32:21 [I] ++++++
2020/04/27 18:32:21 [I] ++++++
2020/04/27 18:32:21 [I] ++++++
2020/04/27 18:32:21 [I] connect
2020/04/27 18:32:21 [I] ++++++
2020/04/27 18:32:21 [I] ++++++
2020/04/27 18:32:21 [I] ++++++
2020/04/27 18:32:21 [I] ++++++
2020/04/27 18:32:21 [I] ++++++
2020/04/27 18:32:21 [I] ++++++
2020/04/27 18:32:22 [I] ++++++
2020/04/27 18:32:22 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 18:32:22 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 18:32:22 [I] ++++++
2020/04/27 18:32:22 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 18:32:22 [I] ++++++
2020/04/27 18:32:22 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 18:32:22 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 18:32:22 [I] ++++++
2020/04/27 18:32:22 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/27 18:32:22 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 18:32:22 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/27 18:32:22 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:NOAUTH Authentication required.
2020/04/27 18:32:22 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 18:32:22 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 18:32:22 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 18:32:22 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1587983542 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc042606a10)}
2020/04/27 18:32:23 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/04/27 18:32:23 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 18:32:23 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 18:32:23 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 18:32:23 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61587983543 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc042606a10)}
2020/04/27 18:32:23 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/04/27 18:32:23 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 18:32:23 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 18:32:23 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 18:32:23 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751587983543 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc042606a10)}
2020/04/27 18:32:23 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/04/27 18:32:23 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/27 18:32:23 [I] add 第一次建立连接的时候返回所有数据 
2020/04/27 18:32:23 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/27 18:32:23 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41587983543 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc042606a10)}
2020/04/27 18:34:22 [I] socket disconnect :disconnect
2020/04/27 18:34:22 [I] socket disconnect :disconnect
2020/04/27 18:34:22 [I] ++++++
2020/04/27 18:34:22 [I] ++++++
2020/04/27 18:34:22 [I] ++++++
2020/04/27 18:34:22 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1587983542
2020/04/28 11:19:11 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/04/28 11:19:11 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/04/28 11:19:11 [I] Starting Show
2020/04/28 11:19:11 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/04/28 11:19:11 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/04/28 11:19:11 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/28 11:19:11 [I] Database: mysql
2020/04/28 11:19:11 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/28 11:19:11 [I] Database: mysql
2020/04/28 11:19:12 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/04/28 11:19:12 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/04/28 11:19:12 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/04/28 11:19:13 [I] Listen: http://0.0.0.0:7700
2020/04/28 11:20:33 [I] ++++++
2020/04/28 11:20:33 [I] ++++++
2020/04/28 11:20:33 [I] ++++++
2020/04/28 11:20:33 [I] ++++++
2020/04/28 11:30:43 [I] ++++++
2020/04/28 11:30:43 [I] ++++++
2020/04/28 11:30:47 [I] ++++++
2020/04/28 11:30:47 [I] ++++++
2020/04/28 11:31:06 [I] ++++++
2020/04/28 11:31:06 [I] ++++++
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:20 [I] connect
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:20 [I] ++++++
2020/04/28 11:31:22 [I] socket disconnect :disconnect
2020/04/28 11:31:22 [I] socket disconnect :disconnect
2020/04/28 11:31:22 [I] ++++++
2020/04/28 11:31:22 [I] ++++++
2020/04/28 11:31:22 [I] ++++++
2020/04/28 11:31:24 [I] ++++++
2020/04/28 11:31:24 [I] ++++++
2020/04/28 11:31:24 [I] ++++++
2020/04/28 11:31:24 [I] connect
2020/04/28 11:31:24 [I] ++++++
2020/04/28 11:31:24 [I] ++++++
2020/04/28 11:31:24 [I] ++++++
2020/04/28 11:31:24 [I] ++++++
2020/04/28 11:31:24 [I] ++++++
2020/04/28 11:31:24 [I] ++++++
2020/04/28 11:31:29 [I] ++++++
2020/04/28 11:31:29 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 11:31:29 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 11:31:29 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 11:31:40 [I] ++++++
2020/04/28 11:31:40 [I] ++++++
2020/04/28 11:31:40 [I] ++++++
2020/04/28 11:31:40 [I] ++++++
2020/04/28 11:31:40 [I] ++++++
2020/04/28 11:31:40 [I] ++++++
2020/04/28 11:33:33 [I] socket disconnect :disconnect
2020/04/28 11:33:33 [I] socket disconnect :disconnect
2020/04/28 11:33:33 [I] ++++++
2020/04/28 11:33:33 [I] ++++++
2020/04/28 11:33:33 [I] ++++++
2020/04/28 11:33:37 [I] ++++++
2020/04/28 11:33:37 [I] ++++++
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [I] connect
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:33:38 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:33:38 [I] ++++++
2020/04/28 11:33:38 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:33:38 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:33:38 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:33:38 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:33:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:NOAUTH Authentication required.
2020/04/28 11:33:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:33:39 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:33:39 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:33:39 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1588044819 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc042516740)}
2020/04/28 11:33:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/04/28 11:33:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:33:39 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:33:39 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:33:39 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41588044819 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc042516740)}
2020/04/28 11:33:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/04/28 11:33:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:33:39 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:33:39 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:33:39 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751588044819 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc042516740)}
2020/04/28 11:33:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/04/28 11:33:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:33:39 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:33:39 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:33:39 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61588044819 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc042516740)}
2020/04/28 11:33:40 [I] socket disconnect :disconnect
2020/04/28 11:33:40 [I] socket disconnect :disconnect
2020/04/28 11:33:40 [I] ++++++
2020/04/28 11:33:40 [I] ++++++
2020/04/28 11:33:40 [I] ++++++
2020/04/28 11:33:41 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588044819
2020/04/28 11:34:03 [I] ++++++
2020/04/28 11:34:03 [I] connect
2020/04/28 11:34:03 [I] ++++++
2020/04/28 11:34:03 [I] ++++++
2020/04/28 11:34:03 [I] ++++++
2020/04/28 11:34:03 [I] ++++++
2020/04/28 11:34:03 [I] ++++++
2020/04/28 11:34:03 [I] ++++++
2020/04/28 11:34:03 [I] ++++++
2020/04/28 11:34:04 [I] ++++++
2020/04/28 11:34:04 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [I] ++++++
2020/04/28 11:34:04 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [I] ++++++
2020/04/28 11:34:04 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [I] ++++++
2020/04/28 11:34:04 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=069fe80c869a41a1a4fd5886d40d8ff6:0) result err:NOAUTH Authentication required.
2020/04/28 11:34:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:34:04 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [socket.go:99 1()] [E] add rotuineName :069fe80c869a41a1a4fd5886d40d8ff61588044844 ,singledata :{069fe80c869a41a1a4fd5886d40d8ff6 0s %!s(*socketio.Socket=0xc0422d72e0)}
2020/04/28 11:34:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=2e25facad7ee45629e06fa9e526d0147:0) result err:NOAUTH Authentication required.
2020/04/28 11:34:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:34:04 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:34:04 [socket.go:99 1()] [E] add rotuineName :2e25facad7ee45629e06fa9e526d01471588044844 ,singledata :{2e25facad7ee45629e06fa9e526d0147 0s %!s(*socketio.Socket=0xc0422d72e0)}
2020/04/28 11:34:05 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f660f1019da44b1e9d2baf843f4bc118:0) result err:NOAUTH Authentication required.
2020/04/28 11:34:05 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:34:05 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:34:05 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:34:05 [socket.go:99 1()] [E] add rotuineName :f660f1019da44b1e9d2baf843f4bc1181588044845 ,singledata :{f660f1019da44b1e9d2baf843f4bc118 30m %!s(*socketio.Socket=0xc0422d72e0)}
2020/04/28 11:34:05 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d3f25668f3fe487283db443ed6a2786a:0) result err:NOAUTH Authentication required.
2020/04/28 11:34:05 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:34:05 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:34:05 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:34:05 [socket.go:99 1()] [E] add rotuineName :d3f25668f3fe487283db443ed6a2786a1588044845 ,singledata :{d3f25668f3fe487283db443ed6a2786a 30m %!s(*socketio.Socket=0xc0422d72e0)}
2020/04/28 11:34:05 [I] socket disconnect :disconnect
2020/04/28 11:34:05 [I] socket disconnect :disconnect
2020/04/28 11:34:05 [I] ++++++
2020/04/28 11:34:05 [I] ++++++
2020/04/28 11:34:05 [I] ++++++
2020/04/28 11:34:06 [I] 停止 key:069fe80c869a41a1a4fd5886d40d8ff6 , 线程id:069fe80c869a41a1a4fd5886d40d8ff61588044844
2020/04/28 11:34:06 [I] 停止 key:2e25facad7ee45629e06fa9e526d0147 , 线程id:2e25facad7ee45629e06fa9e526d01471588044844
2020/04/28 11:34:16 [I] ++++++
2020/04/28 11:34:16 [I] ++++++
2020/04/28 11:34:16 [I] ++++++
2020/04/28 11:34:16 [I] ++++++
2020/04/28 11:34:16 [I] ++++++
2020/04/28 11:34:16 [I] ++++++
2020/04/28 11:34:16 [I] ++++++
2020/04/28 11:34:16 [I] ++++++
2020/04/28 11:34:16 [I] ++++++
2020/04/28 11:34:16 [I] ++++++
2020/04/28 11:34:23 [I] ++++++
2020/04/28 11:34:23 [I] ++++++
2020/04/28 11:34:23 [I] ++++++
2020/04/28 11:34:28 [I] ++++++
2020/04/28 11:34:28 [I] ++++++
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [I] connect
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:34:36 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:34:36 [I] ++++++
2020/04/28 11:34:36 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 11:34:36 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:NOAUTH Authentication required.
2020/04/28 11:34:36 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:34:36 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:34:36 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:34:36 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:34:36 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:34:36 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 11:34:36 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1588044876 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc04267aa30)}
2020/04/28 11:34:36 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/04/28 11:34:36 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:34:37 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:34:37 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:34:37 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41588044877 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc04267aa30)}
2020/04/28 11:34:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/04/28 11:34:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:34:37 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:34:37 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:34:37 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61588044877 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc04267aa30)}
2020/04/28 11:34:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/04/28 11:34:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 11:34:37 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 11:34:37 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 11:34:37 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751588044877 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc04267aa30)}
2020/04/28 11:34:46 [I] ++++++
2020/04/28 11:34:46 [I] ++++++
2020/04/28 11:34:48 [I] socket disconnect :disconnect
2020/04/28 11:34:48 [I] socket disconnect :disconnect
2020/04/28 11:34:48 [I] ++++++
2020/04/28 11:34:48 [I] ++++++
2020/04/28 11:34:48 [I] ++++++
2020/04/28 11:34:48 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588044876
2020/04/28 12:03:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/04/28 12:03:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 12:03:39 [I] --getSingleData----
2020/04/28 12:03:39 [I] 停止 key:5c066b0f844b445790a57a4847d0eae4 , 线程id:5c066b0f844b445790a57a4847d0eae41588044819
2020/04/28 12:03:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/04/28 12:03:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 12:03:39 [I] --getSingleData----
2020/04/28 12:03:39 [I] 停止 key:f0e94962c83044bbb8b7f2db216c5275 , 线程id:f0e94962c83044bbb8b7f2db216c52751588044819
2020/04/28 12:03:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/04/28 12:03:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 12:03:39 [I] --getSingleData----
2020/04/28 12:03:39 [I] 停止 key:d94209e154de408ab80e6ce54a6968a6 , 线程id:d94209e154de408ab80e6ce54a6968a61588044819
2020/04/28 12:04:05 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f660f1019da44b1e9d2baf843f4bc118:0) result err:NOAUTH Authentication required.
2020/04/28 12:04:05 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 12:04:05 [I] --getSingleData----
2020/04/28 12:04:05 [I] 停止 key:f660f1019da44b1e9d2baf843f4bc118 , 线程id:f660f1019da44b1e9d2baf843f4bc1181588044845
2020/04/28 12:04:05 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d3f25668f3fe487283db443ed6a2786a:0) result err:NOAUTH Authentication required.
2020/04/28 12:04:05 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 12:04:05 [I] --getSingleData----
2020/04/28 12:04:05 [I] 停止 key:d3f25668f3fe487283db443ed6a2786a , 线程id:d3f25668f3fe487283db443ed6a2786a1588044845
2020/04/28 12:04:05 [I] 停止 key:069fe80c869a41a1a4fd5886d40d8ff6 , 线程id:069fe80c869a41a1a4fd5886d40d8ff61588044844
2020/04/28 12:04:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/04/28 12:04:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 12:04:37 [I] --getSingleData----
2020/04/28 12:04:37 [I] 停止 key:5c066b0f844b445790a57a4847d0eae4 , 线程id:5c066b0f844b445790a57a4847d0eae41588044877
2020/04/28 12:04:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/04/28 12:04:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 12:04:37 [I] --getSingleData----
2020/04/28 12:04:37 [I] 停止 key:d94209e154de408ab80e6ce54a6968a6 , 线程id:d94209e154de408ab80e6ce54a6968a61588044877
2020/04/28 12:04:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/04/28 12:04:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 12:04:37 [I] --getSingleData----
2020/04/28 12:04:37 [I] 停止 key:f0e94962c83044bbb8b7f2db216c5275 , 线程id:f0e94962c83044bbb8b7f2db216c52751588044877
2020/04/28 12:31:20 [I] socket keepConnect :keepAlive
2020/04/28 12:31:24 [I] socket keepConnect :keepAlive
2020/04/28 12:33:38 [I] socket keepConnect :keepAlive
2020/04/28 12:34:03 [I] socket keepConnect :keepAlive
2020/04/28 12:34:36 [I] socket keepConnect :keepAlive
2020/04/28 13:21:10 [I] ++++++
2020/04/28 13:21:10 [I] ++++++
2020/04/28 13:21:13 [I] ++++++
2020/04/28 13:21:13 [I] ++++++
2020/04/28 13:21:14 [I] ++++++
2020/04/28 13:21:14 [I] ++++++
2020/04/28 13:21:14 [I] ++++++
2020/04/28 13:21:14 [I] connect
2020/04/28 13:21:14 [I] ++++++
2020/04/28 13:21:14 [I] ++++++
2020/04/28 13:21:14 [I] ++++++
2020/04/28 13:21:14 [I] ++++++
2020/04/28 13:21:14 [I] ++++++
2020/04/28 13:21:14 [I] ++++++
2020/04/28 13:21:27 [I] ++++++
2020/04/28 13:21:27 [I] ++++++
2020/04/28 13:21:27 [I] ++++++
2020/04/28 13:21:27 [I] ++++++
2020/04/28 13:21:27 [I] ++++++
2020/04/28 13:21:27 [I] ++++++
2020/04/28 13:21:31 [I] ++++++
2020/04/28 13:21:31 [I] ++++++
2020/04/28 13:21:31 [I] ++++++
2020/04/28 13:21:31 [I] ++++++
2020/04/28 13:21:31 [I] ++++++
2020/04/28 13:21:31 [I] ++++++
2020/04/28 13:21:34 [I] ++++++
2020/04/28 13:21:34 [I] ++++++
2020/04/28 13:21:34 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:21:35 [I] ++++++
2020/04/28 13:21:35 [I] ++++++
2020/04/28 13:21:35 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:21:39 [I] ++++++
2020/04/28 13:21:39 [I] ++++++
2020/04/28 13:21:39 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:21:39 [I] ++++++
2020/04/28 13:21:39 [I] ++++++
2020/04/28 13:21:39 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:21:41 [I] ++++++
2020/04/28 13:21:41 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:21:41 [I] ++++++
2020/04/28 13:21:41 [I] ++++++
2020/04/28 13:21:41 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:21:41 [I] ++++++
2020/04/28 13:21:41 [I] ++++++
2020/04/28 13:21:41 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:21:41 [I] ++++++
2020/04/28 13:21:41 [I] ++++++
2020/04/28 13:21:41 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:21:41 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:21:41 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=3bc9aa9937d04b798abeceba78344a2a:0) result err:NOAUTH Authentication required.
2020/04/28 13:21:41 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:21:41 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:21:41 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:21:41 [socket.go:99 1()] [E] add rotuineName :3bc9aa9937d04b798abeceba78344a2a1588051301 ,singledata :{3bc9aa9937d04b798abeceba78344a2a 0s %!s(*socketio.Socket=0xc04204c500)}
2020/04/28 13:21:49 [I] ++++++
2020/04/28 13:21:49 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:21:49 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:22:07 [I] ++++++
2020/04/28 13:22:07 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 13:22:07 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 13:22:07 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 13:22:17 [I] ++++++
2020/04/28 13:22:17 [I] ++++++
2020/04/28 13:22:17 [I] ++++++
2020/04/28 13:22:17 [I] ++++++
2020/04/28 13:22:17 [I] ++++++
2020/04/28 13:22:17 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:22:17 [I] ++++++
2020/04/28 13:22:17 [I] ++++++
2020/04/28 13:22:17 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:22:19 [I] ++++++
2020/04/28 13:22:19 [I] ++++++
2020/04/28 13:22:19 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:22:20 [I] ++++++
2020/04/28 13:22:21 [I] ++++++
2020/04/28 13:22:21 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:22:23 [I] ++++++
2020/04/28 13:22:23 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:22:23 [I] ++++++
2020/04/28 13:22:23 [I] ++++++
2020/04/28 13:22:23 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:22:23 [I] ++++++
2020/04/28 13:22:23 [I] ++++++
2020/04/28 13:22:23 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:22:23 [I] ++++++
2020/04/28 13:22:23 [I] ++++++
2020/04/28 13:22:23 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:22:23 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:22:23 [I] ++++++
2020/04/28 13:22:23 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:22:23 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:22:23 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=046bb22db98a405889033c97e11ef0cf:0) result err:NOAUTH Authentication required.
2020/04/28 13:22:23 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:22:23 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:22:23 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:22:23 [socket.go:99 1()] [E] add rotuineName :046bb22db98a405889033c97e11ef0cf1588051343 ,singledata :{046bb22db98a405889033c97e11ef0cf 30m %!s(*socketio.Socket=0xc04204c500)}
2020/04/28 13:22:24 [I] ++++++
2020/04/28 13:22:24 [I] ++++++
2020/04/28 13:22:24 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:22:24 [I] ++++++
2020/04/28 13:22:24 [I] ++++++
2020/04/28 13:22:24 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:22:30 [I] ++++++
2020/04/28 13:22:30 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:22:30 [I] remove rotuineName:046bb22db98a405889033c97e11ef0cf1588051343
2020/04/28 13:22:30 [I] ++++++
2020/04/28 13:22:30 [I] ++++++
2020/04/28 13:22:30 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:22:30 [I] ++++++
2020/04/28 13:22:30 [I] ++++++
2020/04/28 13:22:30 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:22:30 [I] ++++++
2020/04/28 13:22:30 [I] ++++++
2020/04/28 13:22:30 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:22:30 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:22:30 [I] ++++++
2020/04/28 13:22:30 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:22:30 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:22:30 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d3f25668f3fe487283db443ed6a2786a:0) result err:NOAUTH Authentication required.
2020/04/28 13:22:30 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:22:30 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:22:30 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:22:30 [socket.go:99 1()] [E] add rotuineName :d3f25668f3fe487283db443ed6a2786a1588051350 ,singledata :{d3f25668f3fe487283db443ed6a2786a 30m %!s(*socketio.Socket=0xc04204c500)}
2020/04/28 13:22:32 [I] ++++++
2020/04/28 13:22:32 [I] ++++++
2020/04/28 13:22:32 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:22:32 [I] ++++++
2020/04/28 13:22:32 [I] ++++++
2020/04/28 13:22:32 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:22:48 [I] ++++++
2020/04/28 13:22:52 [I] ++++++
2020/04/28 13:22:52 [I] ++++++
2020/04/28 13:22:52 [I] ++++++
2020/04/28 13:22:52 [I] ++++++
2020/04/28 13:22:52 [I] ++++++
2020/04/28 13:22:52 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:22:52 [I] ++++++
2020/04/28 13:22:52 [I] ++++++
2020/04/28 13:22:53 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:23:12 [I] ++++++
2020/04/28 13:23:12 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 13:23:12 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 13:23:12 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [I] ++++++
2020/04/28 13:23:13 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:23:15 [I] remove rotuineName:3bc9aa9937d04b798abeceba78344a2a1588051301
2020/04/28 13:23:15 [I] ++++++
2020/04/28 13:23:15 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:23:16 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:23:16 [I] ++++++
2020/04/28 13:23:16 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:23:17 [I] remove rotuineName:d3f25668f3fe487283db443ed6a2786a1588051350
2020/04/28 13:23:17 [I] ++++++
2020/04/28 13:23:17 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:23:17 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:23:21 [I] ++++++
2020/04/28 13:23:21 [I] ++++++
2020/04/28 13:23:21 [I] ++++++
2020/04/28 13:23:21 [I] ++++++
2020/04/28 13:23:21 [I] ++++++
2020/04/28 13:23:21 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:23:21 [I] ++++++
2020/04/28 13:23:21 [I] ++++++
2020/04/28 13:23:21 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:23:25 [I] ++++++
2020/04/28 13:23:25 [I] ++++++
2020/04/28 13:23:25 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:23:25 [I] ++++++
2020/04/28 13:23:25 [I] ++++++
2020/04/28 13:23:25 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:23:27 [I] ++++++
2020/04/28 13:23:27 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:23:27 [I] ++++++
2020/04/28 13:23:27 [I] ++++++
2020/04/28 13:23:27 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:23:27 [I] ++++++
2020/04/28 13:23:27 [I] ++++++
2020/04/28 13:23:27 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:23:27 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:23:27 [I] ++++++
2020/04/28 13:23:27 [I] ++++++
2020/04/28 13:23:27 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:23:27 [I] ++++++
2020/04/28 13:23:27 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:23:27 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:23:27 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=3bc9aa9937d04b798abeceba78344a2a:0) result err:NOAUTH Authentication required.
2020/04/28 13:23:27 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:23:27 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:23:27 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:23:27 [socket.go:99 1()] [E] add rotuineName :3bc9aa9937d04b798abeceba78344a2a1588051407 ,singledata :{3bc9aa9937d04b798abeceba78344a2a 0s %!s(*socketio.Socket=0xc04204c500)}
2020/04/28 13:23:28 [I] ++++++
2020/04/28 13:23:28 [I] ++++++
2020/04/28 13:23:28 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:23:28 [I] ++++++
2020/04/28 13:23:28 [I] ++++++
2020/04/28 13:23:28 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:23:36 [I] ++++++
2020/04/28 13:23:36 [I] ++++++
2020/04/28 13:23:36 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:23:36 [I] ++++++
2020/04/28 13:23:36 [I] ++++++
2020/04/28 13:23:36 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:23:43 [I] ++++++
2020/04/28 13:23:43 [I] ++++++
2020/04/28 13:23:43 [I] ++++++
2020/04/28 13:23:43 [I] ++++++
2020/04/28 13:23:43 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:23:43 [I] ++++++
2020/04/28 13:23:43 [I] ++++++
2020/04/28 13:23:43 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [I] ++++++
2020/04/28 13:23:46 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:23:57 [I] ++++++
2020/04/28 13:23:57 [I] ++++++
2020/04/28 13:23:57 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 13:23:57 [I] ++++++
2020/04/28 13:23:57 [I] ++++++
2020/04/28 13:23:57 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 13:24:03 [I] remove rotuineName:3bc9aa9937d04b798abeceba78344a2a1588051407
2020/04/28 13:24:03 [I] ++++++
2020/04/28 13:24:03 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:24:03 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:24:18 [I] ++++++
2020/04/28 13:24:18 [I] ++++++
2020/04/28 13:24:18 [I] ++++++
2020/04/28 13:24:18 [I] ++++++
2020/04/28 13:24:18 [I] ++++++
2020/04/28 13:24:18 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:24:18 [I] ++++++
2020/04/28 13:24:18 [I] ++++++
2020/04/28 13:24:18 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:24:41 [I] ++++++
2020/04/28 13:24:41 [I] ++++++
2020/04/28 13:24:51 [I] ++++++
2020/04/28 13:24:51 [I] ++++++
2020/04/28 13:24:51 [I] ++++++
2020/04/28 13:24:51 [I] ++++++
2020/04/28 13:24:51 [I] ++++++
2020/04/28 13:24:51 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:24:51 [I] ++++++
2020/04/28 13:24:51 [I] ++++++
2020/04/28 13:24:51 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:25:15 [I] ++++++
2020/04/28 13:25:15 [I] ++++++
2020/04/28 13:25:15 [I] ++++++
2020/04/28 13:25:15 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:25:15 [I] ++++++
2020/04/28 13:25:15 [I] ++++++
2020/04/28 13:25:15 [I] ++++++
2020/04/28 13:25:15 [I] ++++++
2020/04/28 13:25:15 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:25:18 [I] ++++++
2020/04/28 13:25:18 [I] ++++++
2020/04/28 13:25:18 [I] ++++++
2020/04/28 13:25:18 [I] ++++++
2020/04/28 13:25:18 [I] ++++++
2020/04/28 13:25:18 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:25:18 [I] ++++++
2020/04/28 13:25:18 [I] ++++++
2020/04/28 13:25:18 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:25:19 [I] ++++++
2020/04/28 13:25:19 [I] ++++++
2020/04/28 13:25:19 [I] ++++++
2020/04/28 13:25:19 [I] ++++++
2020/04/28 13:25:19 [I] ++++++
2020/04/28 13:25:19 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:25:19 [I] ++++++
2020/04/28 13:25:19 [I] ++++++
2020/04/28 13:25:19 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:25:29 [I] ++++++
2020/04/28 13:25:29 [I] ++++++
2020/04/28 13:25:29 [I] ++++++
2020/04/28 13:25:29 [I] ++++++
2020/04/28 13:25:29 [I] ++++++
2020/04/28 13:25:29 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:25:29 [I] ++++++
2020/04/28 13:25:29 [I] ++++++
2020/04/28 13:25:29 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:25:31 [I] ++++++
2020/04/28 13:25:31 [I] ++++++
2020/04/28 13:25:31 [I] ++++++
2020/04/28 13:25:31 [I] ++++++
2020/04/28 13:25:31 [I] ++++++
2020/04/28 13:25:31 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:25:31 [I] ++++++
2020/04/28 13:25:31 [I] ++++++
2020/04/28 13:25:31 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:25:38 [I] ++++++
2020/04/28 13:25:39 [I] ++++++
2020/04/28 13:25:39 [I] ++++++
2020/04/28 13:25:39 [I] ++++++
2020/04/28 13:25:39 [I] ++++++
2020/04/28 13:25:39 [I] ++++++
2020/04/28 13:25:39 [I] ++++++
2020/04/28 13:25:39 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:25:39 [I] ++++++
2020/04/28 13:25:39 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:26:14 [I] ++++++
2020/04/28 13:26:14 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 13:26:14 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 13:26:14 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 13:26:20 [I] ++++++
2020/04/28 13:26:20 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 13:26:20 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 13:26:20 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 13:26:25 [I] ++++++
2020/04/28 13:26:25 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 13:26:25 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 13:26:25 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 13:26:30 [I] ++++++
2020/04/28 13:26:30 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 13:26:30 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 13:26:30 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 13:26:32 [I] ++++++
2020/04/28 13:26:32 [I] ++++++
2020/04/28 13:26:32 [I] ++++++
2020/04/28 13:26:32 [I] ++++++
2020/04/28 13:26:32 [I] ++++++
2020/04/28 13:26:32 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:26:32 [I] ++++++
2020/04/28 13:26:32 [I] ++++++
2020/04/28 13:26:32 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:31:20 [I] socket keepConnect :keepAlive
2020/04/28 13:31:24 [I] socket keepConnect :keepAlive
2020/04/28 13:33:38 [I] socket keepConnect :keepAlive
2020/04/28 13:34:01 [I] ++++++
2020/04/28 13:34:01 [I] ++++++
2020/04/28 13:34:03 [I] socket keepConnect :keepAlive
2020/04/28 13:34:21 [I] ++++++
2020/04/28 13:34:21 [I] ++++++
2020/04/28 13:34:21 [I] ++++++
2020/04/28 13:34:21 [I] ++++++
2020/04/28 13:34:21 [I] ++++++
2020/04/28 13:34:21 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:34:21 [I] ++++++
2020/04/28 13:34:21 [I] ++++++
2020/04/28 13:34:21 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:34:36 [I] socket keepConnect :keepAlive
2020/04/28 13:34:40 [I] ++++++
2020/04/28 13:34:40 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 13:34:40 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 13:34:40 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 13:34:47 [I] ++++++
2020/04/28 13:34:47 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 13:34:47 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 13:34:47 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 13:34:49 [I] ++++++
2020/04/28 13:34:49 [I] ++++++
2020/04/28 13:34:49 [I] ++++++
2020/04/28 13:34:49 [I] ++++++
2020/04/28 13:34:49 [I] ++++++
2020/04/28 13:34:49 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:34:49 [I] ++++++
2020/04/28 13:34:49 [I] ++++++
2020/04/28 13:34:49 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 13:35:44 [I] socket disconnect :disconnect
2020/04/28 13:35:44 [I] socket disconnect :disconnect
2020/04/28 13:35:44 [I] 停止 key:3bc9aa9937d04b798abeceba78344a2a , 线程id:3bc9aa9937d04b798abeceba78344a2a1588051407
2020/04/28 13:35:44 [I] ++++++
2020/04/28 13:35:44 [I] ++++++
2020/04/28 13:35:44 [I] ++++++
2020/04/28 13:35:46 [I] ++++++
2020/04/28 13:35:46 [I] ++++++
2020/04/28 13:35:46 [I] ++++++
2020/04/28 13:35:46 [I] connect
2020/04/28 13:35:46 [I] ++++++
2020/04/28 13:35:46 [I] ++++++
2020/04/28 13:35:46 [I] ++++++
2020/04/28 13:35:46 [I] ++++++
2020/04/28 13:35:46 [I] ++++++
2020/04/28 13:35:46 [I] ++++++
2020/04/28 13:35:47 [I] ++++++
2020/04/28 13:35:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [I] ++++++
2020/04/28 13:35:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [I] ++++++
2020/04/28 13:35:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [I] ++++++
2020/04/28 13:35:47 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=069fe80c869a41a1a4fd5886d40d8ff6:0) result err:NOAUTH Authentication required.
2020/04/28 13:35:47 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:35:47 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [socket.go:99 1()] [E] add rotuineName :069fe80c869a41a1a4fd5886d40d8ff61588052147 ,singledata :{069fe80c869a41a1a4fd5886d40d8ff6 0s %!s(*socketio.Socket=0xc042679b90)}
2020/04/28 13:35:47 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=2e25facad7ee45629e06fa9e526d0147:0) result err:NOAUTH Authentication required.
2020/04/28 13:35:47 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:35:47 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [socket.go:99 1()] [E] add rotuineName :2e25facad7ee45629e06fa9e526d01471588052147 ,singledata :{2e25facad7ee45629e06fa9e526d0147 0s %!s(*socketio.Socket=0xc042679b90)}
2020/04/28 13:35:47 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d3f25668f3fe487283db443ed6a2786a:0) result err:NOAUTH Authentication required.
2020/04/28 13:35:47 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:35:47 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:35:47 [socket.go:99 1()] [E] add rotuineName :d3f25668f3fe487283db443ed6a2786a1588052147 ,singledata :{d3f25668f3fe487283db443ed6a2786a 30m %!s(*socketio.Socket=0xc042679b90)}
2020/04/28 13:35:48 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f660f1019da44b1e9d2baf843f4bc118:0) result err:NOAUTH Authentication required.
2020/04/28 13:35:48 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:35:48 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:35:48 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:35:48 [socket.go:99 1()] [E] add rotuineName :f660f1019da44b1e9d2baf843f4bc1181588052148 ,singledata :{f660f1019da44b1e9d2baf843f4bc118 30m %!s(*socketio.Socket=0xc042679b90)}
2020/04/28 13:35:51 [I] socket disconnect :disconnect
2020/04/28 13:35:51 [I] socket disconnect :disconnect
2020/04/28 13:35:52 [I] ++++++
2020/04/28 13:35:52 [I] ++++++
2020/04/28 13:35:52 [I] ++++++
2020/04/28 13:35:53 [I] 停止 key:2e25facad7ee45629e06fa9e526d0147 , 线程id:2e25facad7ee45629e06fa9e526d01471588052147
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [I] connect
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:35:54 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:35:54 [I] ++++++
2020/04/28 13:35:54 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:35:54 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:35:54 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:35:54 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:35:54 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=8b38e0a0646c434db076aa7d877e067a:0) result err:NOAUTH Authentication required.
2020/04/28 13:35:54 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:35:55 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:35:55 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:35:55 [socket.go:99 1()] [E] add rotuineName :8b38e0a0646c434db076aa7d877e067a1588052155 ,singledata :{8b38e0a0646c434db076aa7d877e067a 0s %!s(*socketio.Socket=0xc04267b550)}
2020/04/28 13:35:55 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=b5dbf8a039c14d7db476ee7809f185fb:0) result err:NOAUTH Authentication required.
2020/04/28 13:35:55 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:35:55 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:35:55 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:35:55 [socket.go:99 1()] [E] add rotuineName :b5dbf8a039c14d7db476ee7809f185fb1588052155 ,singledata :{b5dbf8a039c14d7db476ee7809f185fb 30m %!s(*socketio.Socket=0xc04267b550)}
2020/04/28 13:35:55 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=3773a085af4743d6a45e09940ce2ff94:0) result err:NOAUTH Authentication required.
2020/04/28 13:35:55 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:35:55 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:35:55 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:35:55 [socket.go:99 1()] [E] add rotuineName :3773a085af4743d6a45e09940ce2ff941588052155 ,singledata :{3773a085af4743d6a45e09940ce2ff94 5s %!s(*socketio.Socket=0xc04267b550)}
2020/04/28 13:35:55 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea87c133077f4d20b8d7edd6cbc2ff0c:0) result err:NOAUTH Authentication required.
2020/04/28 13:35:55 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:35:55 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:35:55 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:35:55 [socket.go:99 1()] [E] add rotuineName :ea87c133077f4d20b8d7edd6cbc2ff0c1588052155 ,singledata :{ea87c133077f4d20b8d7edd6cbc2ff0c 2s %!s(*socketio.Socket=0xc04267b550)}
2020/04/28 13:35:56 [I] socket disconnect :disconnect
2020/04/28 13:35:56 [I] socket disconnect :disconnect
2020/04/28 13:35:56 [I] ++++++
2020/04/28 13:35:56 [I] ++++++
2020/04/28 13:35:56 [I] ++++++
2020/04/28 13:35:57 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea87c133077f4d20b8d7edd6cbc2ff0c:0) result err:NOAUTH Authentication required.
2020/04/28 13:35:57 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:35:57 [I] --getSingleData----
2020/04/28 13:35:59 [I] ++++++
2020/04/28 13:35:59 [I] ++++++
2020/04/28 13:35:59 [I] ++++++
2020/04/28 13:35:59 [I] connect
2020/04/28 13:35:59 [I] ++++++
2020/04/28 13:35:59 [I] ++++++
2020/04/28 13:35:59 [I] ++++++
2020/04/28 13:35:59 [I] ++++++
2020/04/28 13:35:59 [I] ++++++
2020/04/28 13:35:59 [I] ++++++
2020/04/28 13:35:59 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea87c133077f4d20b8d7edd6cbc2ff0c:0) result err:NOAUTH Authentication required.
2020/04/28 13:35:59 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:36:00 [I] --getSingleData----
2020/04/28 13:36:00 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=3773a085af4743d6a45e09940ce2ff94:0) result err:NOAUTH Authentication required.
2020/04/28 13:36:00 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:36:00 [I] --getSingleData----
2020/04/28 13:36:00 [I] 停止 key:3773a085af4743d6a45e09940ce2ff94 , 线程id:3773a085af4743d6a45e09940ce2ff941588052155
2020/04/28 13:36:02 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea87c133077f4d20b8d7edd6cbc2ff0c:0) result err:NOAUTH Authentication required.
2020/04/28 13:36:02 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:36:02 [I] --getSingleData----
2020/04/28 13:36:02 [I] 停止 key:ea87c133077f4d20b8d7edd6cbc2ff0c , 线程id:ea87c133077f4d20b8d7edd6cbc2ff0c1588052155
2020/04/28 13:36:03 [I] 停止 key:8b38e0a0646c434db076aa7d877e067a , 线程id:8b38e0a0646c434db076aa7d877e067a1588052155
2020/04/28 13:47:35 [I] socket disconnect :disconnect
2020/04/28 13:47:35 [I] socket disconnect :disconnect
2020/04/28 13:47:35 [I] ++++++
2020/04/28 13:47:35 [I] ++++++
2020/04/28 13:47:35 [I] ++++++
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [I] connect
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:47:36 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:47:36 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:47:36 [I] ++++++
2020/04/28 13:47:36 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 13:47:36 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:47:36 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:NOAUTH Authentication required.
2020/04/28 13:47:36 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:47:36 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 13:47:36 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:47:36 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:47:37 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1588052857 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc042348f60)}
2020/04/28 13:47:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/04/28 13:47:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:47:37 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:47:37 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:47:37 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61588052857 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc042348f60)}
2020/04/28 13:47:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/04/28 13:47:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:47:37 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:47:37 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:47:37 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751588052857 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc042348f60)}
2020/04/28 13:47:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/04/28 13:47:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:47:37 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 13:47:37 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 13:47:37 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41588052857 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc042348f60)}
2020/04/28 13:47:41 [I] socket disconnect :disconnect
2020/04/28 13:47:41 [I] socket disconnect :disconnect
2020/04/28 13:47:41 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588052857
2020/04/28 13:47:41 [I] ++++++
2020/04/28 13:47:41 [I] ++++++
2020/04/28 13:47:41 [I] ++++++
2020/04/28 13:52:23 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=046bb22db98a405889033c97e11ef0cf:0) result err:NOAUTH Authentication required.
2020/04/28 13:52:23 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:52:23 [I] --getSingleData----
2020/04/28 13:52:30 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d3f25668f3fe487283db443ed6a2786a:0) result err:NOAUTH Authentication required.
2020/04/28 13:52:30 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 13:52:30 [I] --getSingleData----
2020/04/28 13:54:23 [I] ++++++
2020/04/28 13:58:11 [I] ++++++
2020/04/28 14:05:47 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d3f25668f3fe487283db443ed6a2786a:0) result err:NOAUTH Authentication required.
2020/04/28 14:05:47 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 14:05:48 [I] --getSingleData----
2020/04/28 14:05:48 [I] 停止 key:d3f25668f3fe487283db443ed6a2786a , 线程id:d3f25668f3fe487283db443ed6a2786a1588052147
2020/04/28 14:05:48 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f660f1019da44b1e9d2baf843f4bc118:0) result err:NOAUTH Authentication required.
2020/04/28 14:05:48 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 14:05:48 [I] --getSingleData----
2020/04/28 14:05:48 [I] 停止 key:f660f1019da44b1e9d2baf843f4bc118 , 线程id:f660f1019da44b1e9d2baf843f4bc1181588052148
2020/04/28 14:05:48 [I] 停止 key:069fe80c869a41a1a4fd5886d40d8ff6 , 线程id:069fe80c869a41a1a4fd5886d40d8ff61588052147
2020/04/28 14:05:55 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=b5dbf8a039c14d7db476ee7809f185fb:0) result err:NOAUTH Authentication required.
2020/04/28 14:05:55 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 14:05:55 [I] --getSingleData----
2020/04/28 14:05:55 [I] 停止 key:b5dbf8a039c14d7db476ee7809f185fb , 线程id:b5dbf8a039c14d7db476ee7809f185fb1588052155
2020/04/28 14:05:55 [I] 停止 key:3773a085af4743d6a45e09940ce2ff94 , 线程id:3773a085af4743d6a45e09940ce2ff941588052155
2020/04/28 14:05:55 [I] 停止 key:ea87c133077f4d20b8d7edd6cbc2ff0c , 线程id:ea87c133077f4d20b8d7edd6cbc2ff0c1588052155
2020/04/28 14:05:55 [I] 停止 key:8b38e0a0646c434db076aa7d877e067a , 线程id:8b38e0a0646c434db076aa7d877e067a1588052155
2020/04/28 14:17:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/04/28 14:17:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 14:17:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/04/28 14:17:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 14:17:37 [I] --getSingleData----
2020/04/28 14:17:37 [I] 停止 key:d94209e154de408ab80e6ce54a6968a6 , 线程id:d94209e154de408ab80e6ce54a6968a61588052857
2020/04/28 14:17:37 [I] --getSingleData----
2020/04/28 14:17:37 [I] 停止 key:f0e94962c83044bbb8b7f2db216c5275 , 线程id:f0e94962c83044bbb8b7f2db216c52751588052857
2020/04/28 14:17:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/04/28 14:17:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 14:17:37 [I] --getSingleData----
2020/04/28 14:17:37 [I] 停止 key:5c066b0f844b445790a57a4847d0eae4 , 线程id:5c066b0f844b445790a57a4847d0eae41588052857
2020/04/28 14:17:37 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588052857
2020/04/28 14:21:14 [I] socket keepConnect :keepAlive
2020/04/28 14:31:20 [I] socket keepConnect :keepAlive
2020/04/28 14:31:24 [I] socket keepConnect :keepAlive
2020/04/28 14:33:38 [I] socket keepConnect :keepAlive
2020/04/28 14:34:03 [I] socket keepConnect :keepAlive
2020/04/28 14:34:36 [I] socket keepConnect :keepAlive
2020/04/28 14:35:07 [I] ++++++
2020/04/28 14:35:46 [I] socket keepConnect :keepAlive
2020/04/28 14:35:54 [I] socket keepConnect :keepAlive
2020/04/28 14:35:59 [I] socket keepConnect :keepAlive
2020/04/28 14:39:00 [I] ++++++
2020/04/28 14:47:36 [I] socket keepConnect :keepAlive
2020/04/28 15:15:22 [I] ++++++
2020/04/28 15:19:05 [I] ++++++
2020/04/28 15:19:57 [I] ++++++
2020/04/28 15:19:57 [I] ++++++
2020/04/28 15:19:57 [I] ++++++
2020/04/28 15:19:57 [I] connect
2020/04/28 15:19:57 [I] ++++++
2020/04/28 15:19:57 [I] ++++++
2020/04/28 15:19:57 [I] ++++++
2020/04/28 15:19:57 [I] ++++++
2020/04/28 15:19:57 [I] ++++++
2020/04/28 15:19:57 [I] ++++++
2020/04/28 15:20:17 [I] ++++++
2020/04/28 15:20:17 [I] ++++++
2020/04/28 15:20:23 [I] ++++++
2020/04/28 15:20:23 [I] ++++++
2020/04/28 15:20:23 [I] ++++++
2020/04/28 15:20:23 [I] ++++++
2020/04/28 15:20:23 [I] ++++++
2020/04/28 15:20:23 [I] ++++++
2020/04/28 15:20:29 [I] ++++++
2020/04/28 15:20:29 [I] ++++++
2020/04/28 15:20:29 [I] ++++++
2020/04/28 15:20:29 [I] ++++++
2020/04/28 15:20:29 [I] ++++++
2020/04/28 15:20:29 [I] ++++++
2020/04/28 15:21:14 [I] socket keepConnect :keepAlive
2020/04/28 15:31:20 [I] socket keepConnect :keepAlive
2020/04/28 15:31:24 [I] socket keepConnect :keepAlive
2020/04/28 15:33:38 [I] socket keepConnect :keepAlive
2020/04/28 15:34:03 [I] socket keepConnect :keepAlive
2020/04/28 15:34:36 [I] socket keepConnect :keepAlive
2020/04/28 15:35:46 [I] socket keepConnect :keepAlive
2020/04/28 15:35:54 [I] socket keepConnect :keepAlive
2020/04/28 15:35:59 [I] socket keepConnect :keepAlive
2020/04/28 15:47:36 [I] socket keepConnect :keepAlive
2020/04/28 16:04:03 [I] ++++++
2020/04/28 16:09:05 [I] ++++++
2020/04/28 16:19:57 [I] socket keepConnect :keepAlive
2020/04/28 16:21:14 [I] socket keepConnect :keepAlive
2020/04/28 16:31:20 [I] socket keepConnect :keepAlive
2020/04/28 16:31:24 [I] socket keepConnect :keepAlive
2020/04/28 16:33:38 [I] socket keepConnect :keepAlive
2020/04/28 16:34:03 [I] socket keepConnect :keepAlive
2020/04/28 16:34:36 [I] socket keepConnect :keepAlive
2020/04/28 16:35:46 [I] socket keepConnect :keepAlive
2020/04/28 16:35:54 [I] socket keepConnect :keepAlive
2020/04/28 16:35:59 [I] socket keepConnect :keepAlive
2020/04/28 16:45:22 [I] ++++++
2020/04/28 16:45:22 [I] ++++++
2020/04/28 16:45:22 [I] ++++++
2020/04/28 16:45:22 [I] ++++++
2020/04/28 16:45:22 [I] ++++++
2020/04/28 16:45:22 [I] ++++++
2020/04/28 16:47:36 [I] socket keepConnect :keepAlive
2020/04/28 16:49:00 [I] ++++++
2020/04/28 16:49:00 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 16:49:00 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 16:49:00 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 16:49:02 [I] ++++++
2020/04/28 16:49:02 [I] ++++++
2020/04/28 16:49:02 [I] ++++++
2020/04/28 16:49:02 [I] ++++++
2020/04/28 16:49:02 [I] ++++++
2020/04/28 16:49:02 [I] ++++++
2020/04/28 16:49:03 [I] ++++++
2020/04/28 16:49:03 [I] ++++++
2020/04/28 16:49:03 [I] ++++++
2020/04/28 16:49:03 [I] ++++++
2020/04/28 16:49:03 [I] ++++++
2020/04/28 16:49:03 [I] ++++++
2020/04/28 16:49:04 [I] ++++++
2020/04/28 16:49:04 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/28 16:49:04 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/28 16:49:04 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/28 16:49:06 [I] ++++++
2020/04/28 16:49:06 [I] ++++++
2020/04/28 16:49:06 [I] ++++++
2020/04/28 16:49:06 [I] ++++++
2020/04/28 16:49:06 [I] ++++++
2020/04/28 16:49:06 [I] ++++++
2020/04/28 16:53:12 [I] ++++++
2020/04/28 16:58:23 [I] ++++++
2020/04/28 17:19:57 [I] socket keepConnect :keepAlive
2020/04/28 17:21:14 [I] socket keepConnect :keepAlive
2020/04/28 17:31:20 [I] socket keepConnect :keepAlive
2020/04/28 17:31:24 [I] socket keepConnect :keepAlive
2020/04/28 17:33:38 [I] socket keepConnect :keepAlive
2020/04/28 17:34:03 [I] socket keepConnect :keepAlive
2020/04/28 17:34:36 [I] socket keepConnect :keepAlive
2020/04/28 17:35:46 [I] socket keepConnect :keepAlive
2020/04/28 17:35:54 [I] socket keepConnect :keepAlive
2020/04/28 17:35:59 [I] socket keepConnect :keepAlive
2020/04/28 17:44:03 [I] ++++++
2020/04/28 17:46:53 [I] ++++++
2020/04/28 17:47:36 [I] socket keepConnect :keepAlive
2020/04/28 18:07:12 [I] ++++++
2020/04/28 18:07:12 [I] ++++++
2020/04/28 18:07:20 [I] ++++++
2020/04/28 18:07:21 [I] ++++++
2020/04/28 18:07:21 [I] ++++++
2020/04/28 18:07:21 [I] ++++++
2020/04/28 18:07:21 [I] ++++++
2020/04/28 18:07:21 [I] ++++++
2020/04/28 18:07:21 [I] ++++++
2020/04/28 18:07:23 [I] ++++++
2020/04/28 18:07:23 [I] ++++++
2020/04/28 18:07:23 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 18:07:24 [I] ++++++
2020/04/28 18:07:24 [I] ++++++
2020/04/28 18:07:24 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 18:07:26 [I] ++++++
2020/04/28 18:07:26 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 18:07:26 [I] ++++++
2020/04/28 18:07:26 [I] ++++++
2020/04/28 18:07:26 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 18:07:26 [I] ++++++
2020/04/28 18:07:26 [I] ++++++
2020/04/28 18:07:26 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 18:07:26 [I] ++++++
2020/04/28 18:07:26 [I] ++++++
2020/04/28 18:07:26 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 18:07:26 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 18:07:26 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=01004cdb5f2d49f1ba59de0cfce61bbf:0) result err:NOAUTH Authentication required.
2020/04/28 18:07:26 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 18:07:26 [I] add 第一次建立连接的时候返回所有数据 
2020/04/28 18:07:26 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/28 18:07:27 [socket.go:99 1()] [E] add rotuineName :01004cdb5f2d49f1ba59de0cfce61bbf1588068447 ,singledata :{01004cdb5f2d49f1ba59de0cfce61bbf 2s %!s(*socketio.Socket=0xc0425dc280)}
2020/04/28 18:07:28 [I] ++++++
2020/04/28 18:07:28 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 18:07:28 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 18:07:29 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=01004cdb5f2d49f1ba59de0cfce61bbf:0) result err:NOAUTH Authentication required.
2020/04/28 18:07:29 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 18:07:29 [I] --getSingleData----
2020/04/28 18:07:31 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=01004cdb5f2d49f1ba59de0cfce61bbf:0) result err:NOAUTH Authentication required.
2020/04/28 18:07:31 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 18:07:31 [I] --getSingleData----
2020/04/28 18:07:33 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=01004cdb5f2d49f1ba59de0cfce61bbf:0) result err:NOAUTH Authentication required.
2020/04/28 18:07:33 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 18:07:33 [I] --getSingleData----
2020/04/28 18:07:34 [I] ++++++
2020/04/28 18:07:34 [I] ++++++
2020/04/28 18:07:34 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 18:07:34 [I] ++++++
2020/04/28 18:07:34 [I] ++++++
2020/04/28 18:07:34 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 18:07:35 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=01004cdb5f2d49f1ba59de0cfce61bbf:0) result err:NOAUTH Authentication required.
2020/04/28 18:07:35 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 18:07:35 [I] --getSingleData----
2020/04/28 18:07:35 [I] ++++++
2020/04/28 18:07:35 [I] ++++++
2020/04/28 18:07:35 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/04/28 18:07:35 [I] ++++++
2020/04/28 18:07:35 [I] ++++++
2020/04/28 18:07:35 [I] ++++++
2020/04/28 18:07:35 [I] ++++++
2020/04/28 18:07:35 [I] ++++++
2020/04/28 18:07:35 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 18:07:35 [I] ++++++
2020/04/28 18:07:35 [I] ++++++
2020/04/28 18:07:35 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/28 18:07:36 [I] ++++++
2020/04/28 18:07:36 [I] ++++++
2020/04/28 18:07:36 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/04/28 18:07:37 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=01004cdb5f2d49f1ba59de0cfce61bbf:0) result err:NOAUTH Authentication required.
2020/04/28 18:07:37 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 18:07:37 [I] --getSingleData----
2020/04/28 18:07:38 [I] remove rotuineName:01004cdb5f2d49f1ba59de0cfce61bbf1588068447
2020/04/28 18:07:38 [I] ++++++
2020/04/28 18:07:38 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/28 18:07:38 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/04/28 18:07:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=01004cdb5f2d49f1ba59de0cfce61bbf:0) result err:NOAUTH Authentication required.
2020/04/28 18:07:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/28 18:07:39 [I] --getSingleData----
2020/04/28 18:09:53 [I] ++++++
2020/04/28 18:09:53 [I] ++++++
2020/04/28 18:09:58 [I] socket disconnect :disconnect
2020/04/28 18:09:58 [I] socket disconnect :disconnect
2020/04/28 18:09:58 [I] 停止 key:01004cdb5f2d49f1ba59de0cfce61bbf , 线程id:01004cdb5f2d49f1ba59de0cfce61bbf1588068447
2020/04/28 18:09:58 [I] 停止 key:01004cdb5f2d49f1ba59de0cfce61bbf , 线程id:01004cdb5f2d49f1ba59de0cfce61bbf1588068447
2020/04/28 18:09:58 [I] ++++++
2020/04/28 18:09:58 [I] ++++++
2020/04/28 18:09:58 [I] ++++++
2020/04/28 18:10:00 [I] ++++++
2020/04/28 18:10:00 [I] ++++++
2020/04/28 18:11:24 [I] ++++++
2020/04/28 18:11:24 [I] ++++++
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:11:29 [I] connect
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:11:29 [I] ++++++
2020/04/28 18:19:57 [I] socket keepConnect :keepAlive
2020/04/28 18:21:14 [I] socket keepConnect :keepAlive
2020/04/28 18:26:58 [I] ++++++
2020/04/28 18:31:20 [I] socket keepConnect :keepAlive
2020/04/28 18:31:24 [I] socket keepConnect :keepAlive
2020/04/28 18:31:51 [I] ++++++
2020/04/28 18:33:38 [I] socket keepConnect :keepAlive
2020/04/28 18:34:03 [I] socket keepConnect :keepAlive
2020/04/28 18:34:36 [I] socket keepConnect :keepAlive
2020/04/28 18:35:46 [I] socket keepConnect :keepAlive
2020/04/28 18:35:54 [I] socket keepConnect :keepAlive
2020/04/28 18:35:59 [I] socket keepConnect :keepAlive
2020/04/28 18:40:38 [I] socket disconnect :disconnect
2020/04/29 09:30:06 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/04/29 09:30:06 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/04/29 09:30:06 [I] Starting Show
2020/04/29 09:30:06 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/04/29 09:30:06 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/04/29 09:30:06 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/29 09:30:06 [I] Database: mysql
2020/04/29 09:30:06 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/29 09:30:06 [I] Database: mysql
2020/04/29 09:30:07 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/04/29 09:30:07 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/04/29 09:30:07 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/04/29 09:30:09 [I] Listen: http://0.0.0.0:7700
2020/04/29 09:31:24 [I] ++++++
2020/04/29 09:31:24 [I] ++++++
2020/04/29 09:31:24 [I] ++++++
2020/04/29 09:31:24 [I] ++++++
2020/04/29 09:31:29 [I] ++++++
2020/04/29 09:31:29 [I] connect
2020/04/29 09:31:29 [I] ++++++
2020/04/29 09:31:29 [I] ++++++
2020/04/29 09:31:29 [I] ++++++
2020/04/29 09:31:29 [I] ++++++
2020/04/29 09:31:29 [I] ++++++
2020/04/29 09:31:29 [I] ++++++
2020/04/29 09:31:29 [I] ++++++
2020/04/29 10:31:29 [I] socket keepConnect :keepAlive
2020/04/29 10:56:28 [I] socket disconnect :disconnect
2020/04/29 10:56:28 [I] socket disconnect :disconnect
2020/04/29 10:56:28 [I] ++++++
2020/04/29 10:56:28 [I] ++++++
2020/04/29 10:56:28 [I] ++++++
2020/04/29 10:56:32 [I] ++++++
2020/04/29 10:56:32 [I] ++++++
2020/04/29 10:56:32 [I] ++++++
2020/04/29 10:56:32 [I] connect
2020/04/29 10:56:32 [I] ++++++
2020/04/29 10:56:32 [I] ++++++
2020/04/29 10:56:32 [I] ++++++
2020/04/29 10:56:32 [I] ++++++
2020/04/29 10:56:32 [I] ++++++
2020/04/29 10:56:32 [I] ++++++
2020/04/29 10:56:38 [I] socket disconnect :disconnect
2020/04/29 10:56:38 [I] socket disconnect :disconnect
2020/04/29 10:56:38 [I] ++++++
2020/04/29 10:56:38 [I] ++++++
2020/04/29 10:56:38 [I] ++++++
2020/04/29 10:56:40 [I] ++++++
2020/04/29 10:56:40 [I] ++++++
2020/04/29 10:56:40 [I] ++++++
2020/04/29 10:56:40 [I] connect
2020/04/29 10:56:40 [I] ++++++
2020/04/29 10:56:40 [I] ++++++
2020/04/29 10:56:40 [I] ++++++
2020/04/29 10:56:40 [I] ++++++
2020/04/29 10:56:40 [I] ++++++
2020/04/29 10:56:40 [I] ++++++
2020/04/29 11:31:29 [I] socket keepConnect :keepAlive
2020/04/29 11:56:32 [I] socket keepConnect :keepAlive
2020/04/29 11:56:40 [I] socket keepConnect :keepAlive
2020/04/29 12:31:29 [I] socket keepConnect :keepAlive
2020/04/29 12:56:32 [I] socket keepConnect :keepAlive
2020/04/29 12:56:40 [I] socket keepConnect :keepAlive
2020/04/29 13:31:29 [I] socket keepConnect :keepAlive
2020/04/29 13:52:33 [I] socket disconnect :disconnect
2020/04/29 13:52:35 [I] ++++++
2020/04/29 13:52:35 [I] ++++++
2020/04/29 13:52:35 [I] ++++++
2020/04/29 13:52:35 [I] ++++++
2020/04/29 13:52:35 [I] connect
2020/04/29 13:52:35 [I] ++++++
2020/04/29 13:52:35 [I] ++++++
2020/04/29 13:52:35 [I] ++++++
2020/04/29 13:52:35 [I] ++++++
2020/04/29 13:52:35 [I] ++++++
2020/04/29 13:52:46 [I] socket disconnect :disconnect
2020/04/29 13:52:47 [I] ++++++
2020/04/29 13:52:47 [I] ++++++
2020/04/29 13:52:47 [I] ++++++
2020/04/29 13:52:47 [I] ++++++
2020/04/29 13:52:47 [I] connect
2020/04/29 13:52:47 [I] ++++++
2020/04/29 13:52:47 [I] ++++++
2020/04/29 13:52:47 [I] ++++++
2020/04/29 13:52:47 [I] ++++++
2020/04/29 13:52:47 [I] ++++++
2020/04/29 13:52:48 [I] ++++++
2020/04/29 13:53:14 [I] socket disconnect :disconnect
2020/04/29 13:53:15 [I] ++++++
2020/04/29 13:53:15 [I] ++++++
2020/04/29 13:53:15 [I] ++++++
2020/04/29 13:53:15 [I] ++++++
2020/04/29 13:53:15 [I] connect
2020/04/29 13:53:15 [I] ++++++
2020/04/29 13:53:15 [I] ++++++
2020/04/29 13:53:15 [I] ++++++
2020/04/29 13:53:15 [I] ++++++
2020/04/29 13:53:15 [I] ++++++
2020/04/29 13:53:15 [I] ++++++
2020/04/29 13:53:17 [I] socket disconnect :disconnect
2020/04/29 13:53:17 [I] socket disconnect :disconnect
2020/04/29 13:53:17 [I] ++++++
2020/04/29 13:53:17 [I] ++++++
2020/04/29 13:53:17 [I] ++++++
2020/04/29 13:53:20 [I] ++++++
2020/04/29 13:53:20 [I] connect
2020/04/29 13:53:20 [I] ++++++
2020/04/29 13:53:20 [I] ++++++
2020/04/29 13:53:20 [I] ++++++
2020/04/29 13:53:20 [I] ++++++
2020/04/29 13:53:20 [I] ++++++
2020/04/29 13:53:20 [I] ++++++
2020/04/29 13:53:20 [I] ++++++
2020/04/29 13:53:20 [I] ++++++
2020/04/29 13:53:23 [I] ++++++
2020/04/29 13:53:23 [I] ++++++
2020/04/29 13:54:59 [I] socket disconnect :disconnect
2020/04/29 13:54:59 [I] ++++++
2020/04/29 13:54:59 [I] ++++++
2020/04/29 13:54:59 [I] ++++++
2020/04/29 13:54:59 [I] ++++++
2020/04/29 13:54:59 [I] connect
2020/04/29 13:54:59 [I] ++++++
2020/04/29 13:54:59 [I] ++++++
2020/04/29 13:55:00 [I] ++++++
2020/04/29 13:55:00 [I] ++++++
2020/04/29 13:55:00 [I] ++++++
2020/04/29 13:55:00 [I] ++++++
2020/04/29 13:56:01 [I] socket disconnect :disconnect
2020/04/29 13:56:02 [I] ++++++
2020/04/29 13:56:02 [I] ++++++
2020/04/29 13:56:02 [I] ++++++
2020/04/29 13:56:02 [I] ++++++
2020/04/29 13:56:02 [I] connect
2020/04/29 13:56:02 [I] ++++++
2020/04/29 13:56:02 [I] ++++++
2020/04/29 13:56:02 [I] ++++++
2020/04/29 13:56:02 [I] ++++++
2020/04/29 13:56:02 [I] ++++++
2020/04/29 13:56:02 [I] ++++++
2020/04/29 13:56:20 [I] socket disconnect :disconnect
2020/04/29 13:56:21 [I] ++++++
2020/04/29 13:56:21 [I] ++++++
2020/04/29 13:56:21 [I] ++++++
2020/04/29 13:56:21 [I] ++++++
2020/04/29 13:56:21 [I] connect
2020/04/29 13:56:21 [I] ++++++
2020/04/29 13:56:21 [I] ++++++
2020/04/29 13:56:21 [I] ++++++
2020/04/29 13:56:21 [I] ++++++
2020/04/29 13:56:21 [I] ++++++
2020/04/29 13:56:21 [I] ++++++
2020/04/29 13:56:32 [I] socket keepConnect :keepAlive
2020/04/29 13:56:40 [I] socket keepConnect :keepAlive
2020/04/29 13:57:46 [I] ++++++
2020/04/29 13:57:46 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/29 13:57:46 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/29 13:57:46 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/29 13:58:12 [I] ++++++
2020/04/29 13:58:12 [I] ++++++
2020/04/29 13:58:12 [I] ++++++
2020/04/29 13:58:12 [I] ++++++
2020/04/29 13:58:12 [I] ++++++
2020/04/29 13:58:12 [I] ++++++
2020/04/29 13:58:12 [I] ++++++
2020/04/29 13:58:12 [I] ++++++
2020/04/29 13:58:13 [I] ++++++
2020/04/29 13:58:13 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/29 13:58:13 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/29 13:58:13 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/29 13:58:16 [I] ++++++
2020/04/29 13:58:16 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/29 13:58:16 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/29 13:58:16 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/29 13:58:45 [I] ++++++
2020/04/29 13:58:45 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/29 13:58:45 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/29 13:58:45 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/29 13:58:49 [I] ++++++
2020/04/29 13:58:49 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/29 13:58:49 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/29 13:58:49 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/29 13:59:11 [I] ++++++
2020/04/29 13:59:11 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/04/29 13:59:11 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/04/29 13:59:11 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/04/29 14:00:10 [I] ++++++
2020/04/29 14:00:10 [I] ++++++
2020/04/29 14:00:26 [I] ++++++
2020/04/29 14:00:26 [I] ++++++
2020/04/29 14:00:27 [I] ++++++
2020/04/29 14:00:27 [I] ++++++
2020/04/29 14:00:28 [I] ++++++
2020/04/29 14:00:28 [I] ++++++
2020/04/29 14:00:33 [I] socket disconnect :disconnect
2020/04/29 14:00:33 [I] socket disconnect :disconnect
2020/04/29 14:00:33 [I] ++++++
2020/04/29 14:00:33 [I] ++++++
2020/04/29 14:00:33 [I] ++++++
2020/04/29 14:00:35 [I] ++++++
2020/04/29 14:00:35 [I] ++++++
2020/04/29 14:00:35 [I] ++++++
2020/04/29 14:00:35 [I] connect
2020/04/29 14:00:35 [I] ++++++
2020/04/29 14:00:35 [I] ++++++
2020/04/29 14:00:35 [I] ++++++
2020/04/29 14:00:35 [I] ++++++
2020/04/29 14:00:35 [I] ++++++
2020/04/29 14:00:35 [I] ++++++
2020/04/29 14:00:43 [I] ++++++
2020/04/29 14:00:43 [I] ++++++
2020/04/29 14:00:46 [I] ++++++
2020/04/29 14:00:51 [I] ++++++
2020/04/29 14:00:51 [I] ++++++
2020/04/29 14:00:51 [I] ++++++
2020/04/29 14:00:51 [I] ++++++
2020/04/29 14:00:51 [I] ++++++
2020/04/29 14:00:51 [I] ++++++
2020/04/29 14:31:29 [I] socket keepConnect :keepAlive
2020/04/29 14:45:12 [I] ++++++
2020/04/29 14:52:35 [I] socket keepConnect :keepAlive
2020/04/29 14:52:47 [I] socket keepConnect :keepAlive
2020/04/29 14:53:15 [I] socket keepConnect :keepAlive
2020/04/29 14:53:20 [I] socket keepConnect :keepAlive
2020/04/29 14:54:59 [I] socket keepConnect :keepAlive
2020/04/29 14:56:02 [I] socket keepConnect :keepAlive
2020/04/29 14:56:21 [I] socket keepConnect :keepAlive
2020/04/29 14:56:32 [I] socket keepConnect :keepAlive
2020/04/29 14:56:40 [I] socket keepConnect :keepAlive
2020/04/29 15:00:35 [I] socket keepConnect :keepAlive
2020/04/29 15:31:29 [I] socket keepConnect :keepAlive
2020/04/29 15:41:17 [I] ++++++
2020/04/29 15:52:35 [I] socket keepConnect :keepAlive
2020/04/29 15:52:47 [I] socket keepConnect :keepAlive
2020/04/29 15:53:15 [I] socket keepConnect :keepAlive
2020/04/29 15:53:20 [I] socket keepConnect :keepAlive
2020/04/29 15:54:59 [I] socket keepConnect :keepAlive
2020/04/29 15:56:02 [I] socket keepConnect :keepAlive
2020/04/29 15:56:21 [I] socket keepConnect :keepAlive
2020/04/29 15:56:32 [I] socket keepConnect :keepAlive
2020/04/29 15:56:40 [I] socket keepConnect :keepAlive
2020/04/29 16:00:35 [I] socket keepConnect :keepAlive
2020/04/29 16:31:29 [I] socket keepConnect :keepAlive
2020/04/29 16:37:27 [I] ++++++
2020/04/29 16:52:35 [I] socket keepConnect :keepAlive
2020/04/29 16:52:47 [I] socket keepConnect :keepAlive
2020/04/29 16:53:15 [I] socket keepConnect :keepAlive
2020/04/29 16:53:20 [I] socket keepConnect :keepAlive
2020/04/29 16:54:59 [I] socket keepConnect :keepAlive
2020/04/29 16:56:02 [I] socket keepConnect :keepAlive
2020/04/29 16:56:21 [I] socket keepConnect :keepAlive
2020/04/29 16:56:32 [I] socket keepConnect :keepAlive
2020/04/29 16:56:40 [I] socket keepConnect :keepAlive
2020/04/29 17:00:35 [I] socket keepConnect :keepAlive
2020/04/29 17:31:29 [I] socket keepConnect :keepAlive
2020/04/29 17:33:36 [I] ++++++
2020/04/29 17:52:35 [I] socket keepConnect :keepAlive
2020/04/29 17:52:47 [I] socket keepConnect :keepAlive
2020/04/29 17:53:15 [I] socket keepConnect :keepAlive
2020/04/29 17:53:20 [I] socket keepConnect :keepAlive
2020/04/29 17:54:59 [I] socket keepConnect :keepAlive
2020/04/29 17:56:02 [I] socket keepConnect :keepAlive
2020/04/29 17:56:21 [I] socket keepConnect :keepAlive
2020/04/29 17:56:32 [I] socket keepConnect :keepAlive
2020/04/29 17:56:40 [I] socket keepConnect :keepAlive
2020/04/29 18:00:35 [I] socket keepConnect :keepAlive
2020/04/29 18:29:11 [I] ++++++
2020/04/29 18:31:29 [I] socket keepConnect :keepAlive
2020/04/29 18:42:48 [I] socket disconnect :disconnect
2020/04/30 10:28:36 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/04/30 10:28:36 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/04/30 10:28:36 [I] Starting Show
2020/04/30 10:28:36 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/04/30 10:28:36 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/04/30 10:28:36 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/30 10:28:36 [I] Database: mysql
2020/04/30 10:28:36 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/30 10:28:36 [I] Database: mysql
2020/04/30 10:28:37 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/04/30 10:28:37 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/04/30 10:28:37 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/04/30 10:28:40 [I] Listen: http://0.0.0.0:7700
2020/04/30 10:30:26 [I] ++++++
2020/04/30 10:30:26 [I] ++++++
2020/04/30 10:30:26 [I] ++++++
2020/04/30 10:30:26 [I] ++++++
2020/04/30 10:30:28 [I] ++++++
2020/04/30 10:30:28 [I] connect
2020/04/30 10:30:28 [I] ++++++
2020/04/30 10:30:28 [I] ++++++
2020/04/30 10:30:28 [I] ++++++
2020/04/30 10:30:28 [I] ++++++
2020/04/30 10:30:28 [I] ++++++
2020/04/30 10:30:28 [I] ++++++
2020/04/30 10:30:28 [I] ++++++
2020/04/30 10:30:28 [I] ++++++
2020/04/30 10:32:02 [I] socket disconnect :disconnect
2020/04/30 10:32:03 [I] ++++++
2020/04/30 10:32:03 [I] ++++++
2020/04/30 10:32:03 [I] ++++++
2020/04/30 10:32:03 [I] ++++++
2020/04/30 10:32:03 [I] ++++++
2020/04/30 10:32:03 [I] ++++++
2020/04/30 10:32:03 [I] connect
2020/04/30 10:32:03 [I] ++++++
2020/04/30 10:32:03 [I] ++++++
2020/04/30 10:32:03 [I] ++++++
2020/04/30 10:32:03 [I] ++++++
2020/04/30 10:36:06 [I] ++++++
2020/04/30 10:36:06 [I] ++++++
2020/04/30 10:36:06 [I] ++++++
2020/04/30 10:36:06 [I] ++++++
2020/04/30 10:36:06 [I] ++++++
2020/04/30 10:36:06 [I] ++++++
2020/04/30 10:37:24 [I] ++++++
2020/04/30 10:37:24 [I] ++++++
2020/04/30 10:37:24 [I] ++++++
2020/04/30 10:37:24 [I] ++++++
2020/04/30 10:37:24 [I] ++++++
2020/04/30 10:37:24 [I] ++++++
2020/04/30 10:38:03 [I] socket disconnect :disconnect
2020/04/30 10:38:03 [I] ++++++
2020/04/30 10:38:03 [I] ++++++
2020/04/30 10:38:03 [I] ++++++
2020/04/30 10:38:03 [I] ++++++
2020/04/30 10:38:03 [I] connect
2020/04/30 10:38:03 [I] ++++++
2020/04/30 10:38:03 [I] ++++++
2020/04/30 10:38:03 [I] ++++++
2020/04/30 10:38:03 [I] ++++++
2020/04/30 10:38:03 [I] ++++++
2020/04/30 10:38:03 [I] ++++++
2020/04/30 10:38:40 [I] socket disconnect :disconnect
2020/04/30 10:38:40 [I] ++++++
2020/04/30 10:38:40 [I] ++++++
2020/04/30 10:38:40 [I] ++++++
2020/04/30 10:38:40 [I] ++++++
2020/04/30 10:38:40 [I] connect
2020/04/30 10:38:40 [I] ++++++
2020/04/30 10:38:40 [I] ++++++
2020/04/30 10:38:40 [I] ++++++
2020/04/30 10:38:41 [I] ++++++
2020/04/30 10:38:41 [I] ++++++
2020/04/30 10:38:41 [I] ++++++
2020/04/30 10:39:08 [I] ++++++
2020/04/30 10:39:08 [I] ++++++
2020/04/30 10:39:08 [I] ++++++
2020/04/30 10:39:13 [I] socket disconnect :disconnect
2020/04/30 10:39:39 [I] ++++++
2020/04/30 10:39:39 [I] ++++++
2020/04/30 10:39:39 [I] ++++++
2020/04/30 10:46:56 [I] ++++++
2020/04/30 10:46:56 [I] ++++++
2020/04/30 10:46:56 [I] ++++++
2020/04/30 10:46:56 [I] connect
2020/04/30 10:46:56 [I] ++++++
2020/04/30 10:46:56 [I] ++++++
2020/04/30 10:46:56 [I] ++++++
2020/04/30 10:46:56 [I] ++++++
2020/04/30 10:46:56 [I] ++++++
2020/04/30 10:47:12 [I] socket disconnect :disconnect
2020/04/30 10:47:13 [I] ++++++
2020/04/30 10:47:13 [I] ++++++
2020/04/30 10:47:13 [I] ++++++
2020/04/30 10:47:13 [I] connect
2020/04/30 10:47:13 [I] ++++++
2020/04/30 10:47:13 [I] ++++++
2020/04/30 10:47:13 [I] ++++++
2020/04/30 10:47:13 [I] ++++++
2020/04/30 10:47:13 [I] ++++++
2020/04/30 10:47:15 [I] socket disconnect :disconnect
2020/04/30 10:47:15 [I] socket disconnect :disconnect
2020/04/30 10:47:15 [I] ++++++
2020/04/30 10:47:15 [I] ++++++
2020/04/30 10:47:15 [I] ++++++
2020/04/30 10:47:16 [I] ++++++
2020/04/30 10:47:16 [I] ++++++
2020/04/30 10:47:16 [I] ++++++
2020/04/30 10:47:16 [I] connect
2020/04/30 10:47:16 [I] ++++++
2020/04/30 10:47:16 [I] ++++++
2020/04/30 10:47:16 [I] ++++++
2020/04/30 10:47:16 [I] ++++++
2020/04/30 10:47:16 [I] ++++++
2020/04/30 10:47:17 [I] ++++++
2020/04/30 10:47:17 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [I] ++++++
2020/04/30 10:47:17 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [I] ++++++
2020/04/30 10:47:17 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [I] ++++++
2020/04/30 10:47:17 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:NOAUTH Authentication required.
2020/04/30 10:47:17 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [I] add 第一次建立连接的时候返回所有数据 
2020/04/30 10:47:17 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1588214837 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc042475e60)}
2020/04/30 10:47:17 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/04/30 10:47:17 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [I] add 第一次建立连接的时候返回所有数据 
2020/04/30 10:47:17 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61588214837 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc042475e60)}
2020/04/30 10:47:17 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/04/30 10:47:17 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [I] add 第一次建立连接的时候返回所有数据 
2020/04/30 10:47:17 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41588214837 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc042475e60)}
2020/04/30 10:47:17 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/04/30 10:47:17 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [I] add 第一次建立连接的时候返回所有数据 
2020/04/30 10:47:17 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/04/30 10:47:17 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751588214837 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc042475e60)}
2020/04/30 10:47:19 [I] socket disconnect :disconnect
2020/04/30 10:47:19 [I] socket disconnect :disconnect
2020/04/30 10:47:19 [I] ++++++
2020/04/30 10:47:19 [I] ++++++
2020/04/30 10:47:19 [I] ++++++
2020/04/30 10:47:19 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588214837
2020/04/30 10:47:22 [I] ++++++
2020/04/30 10:47:22 [I] ++++++
2020/04/30 10:47:22 [I] ++++++
2020/04/30 10:47:24 [I] ++++++
2020/04/30 10:47:24 [I] ++++++
2020/04/30 10:47:24 [I] ++++++
2020/04/30 10:47:24 [I] connect
2020/04/30 10:47:24 [I] ++++++
2020/04/30 10:47:24 [I] ++++++
2020/04/30 10:47:24 [I] ++++++
2020/04/30 10:47:24 [I] ++++++
2020/04/30 10:47:24 [I] ++++++
2020/04/30 10:47:31 [I] socket disconnect :disconnect
2020/04/30 10:48:08 [I] ++++++
2020/04/30 10:48:08 [I] ++++++
2020/04/30 10:48:08 [I] ++++++
2020/04/30 10:48:08 [I] ++++++
2020/04/30 10:48:24 [I] ++++++
2020/04/30 10:48:24 [I] ++++++
2020/04/30 10:48:24 [I] ++++++
2020/04/30 10:48:26 [I] ++++++
2020/04/30 10:48:26 [I] ++++++
2020/04/30 10:48:26 [I] ++++++
2020/04/30 10:48:26 [I] connect
2020/04/30 10:48:26 [I] ++++++
2020/04/30 10:48:26 [I] ++++++
2020/04/30 10:48:26 [I] ++++++
2020/04/30 10:48:26 [I] ++++++
2020/04/30 10:48:26 [I] ++++++
2020/04/30 10:48:33 [I] socket disconnect :disconnect
2020/04/30 10:48:33 [I] socket disconnect :disconnect
2020/04/30 10:48:33 [I] ++++++
2020/04/30 10:48:33 [I] ++++++
2020/04/30 10:48:33 [I] ++++++
2020/04/30 10:48:42 [I] ++++++
2020/04/30 10:48:42 [I] ++++++
2020/04/30 10:48:42 [I] ++++++
2020/04/30 10:49:15 [I] ++++++
2020/04/30 10:49:15 [I] ++++++
2020/04/30 10:49:15 [I] ++++++
2020/04/30 10:49:15 [I] connect
2020/04/30 10:49:15 [I] ++++++
2020/04/30 10:49:15 [I] ++++++
2020/04/30 10:49:15 [I] ++++++
2020/04/30 10:49:15 [I] ++++++
2020/04/30 10:49:18 [I] socket disconnect :disconnect
2020/04/30 10:49:18 [I] socket disconnect :disconnect
2020/04/30 10:49:18 [I] ++++++
2020/04/30 10:49:18 [I] ++++++
2020/04/30 10:49:18 [I] ++++++
2020/04/30 10:49:30 [I] ++++++
2020/04/30 10:49:30 [I] ++++++
2020/04/30 10:49:30 [I] ++++++
2020/04/30 10:49:30 [I] connect
2020/04/30 10:49:30 [I] ++++++
2020/04/30 10:49:30 [I] ++++++
2020/04/30 10:49:30 [I] ++++++
2020/04/30 10:49:30 [I] ++++++
2020/04/30 10:49:30 [I] ++++++
2020/04/30 10:49:35 [I] socket disconnect :disconnect
2020/04/30 10:49:36 [I] ++++++
2020/04/30 10:49:36 [I] ++++++
2020/04/30 10:49:36 [I] ++++++
2020/04/30 10:49:36 [I] connect
2020/04/30 10:49:36 [I] ++++++
2020/04/30 10:49:36 [I] ++++++
2020/04/30 10:49:36 [I] ++++++
2020/04/30 10:49:36 [I] ++++++
2020/04/30 10:49:36 [I] ++++++
2020/04/30 10:54:14 [I] socket disconnect :disconnect
2020/04/30 10:54:15 [I] ++++++
2020/04/30 10:54:15 [I] ++++++
2020/04/30 10:54:15 [I] ++++++
2020/04/30 10:54:15 [I] connect
2020/04/30 10:54:15 [I] ++++++
2020/04/30 10:54:15 [I] ++++++
2020/04/30 10:54:15 [I] ++++++
2020/04/30 10:54:15 [I] ++++++
2020/04/30 10:54:15 [I] ++++++
2020/04/30 10:54:34 [I] ++++++
2020/04/30 10:54:34 [I] ++++++
2020/04/30 10:54:34 [I] ++++++
2020/04/30 10:54:34 [I] connect
2020/04/30 10:54:34 [I] ++++++
2020/04/30 10:54:34 [I] ++++++
2020/04/30 10:54:34 [I] ++++++
2020/04/30 10:54:34 [I] ++++++
2020/04/30 10:54:34 [I] ++++++
2020/04/30 10:54:34 [I] ++++++
2020/04/30 10:54:41 [I] ++++++
2020/04/30 10:54:41 [I] ++++++
2020/04/30 10:54:43 [I] socket disconnect :disconnect
2020/04/30 10:54:43 [I] socket disconnect :disconnect
2020/04/30 10:54:43 [I] ++++++
2020/04/30 10:54:43 [I] ++++++
2020/04/30 10:54:43 [I] ++++++
2020/04/30 10:54:45 [I] ++++++
2020/04/30 10:54:45 [I] ++++++
2020/04/30 10:54:45 [I] ++++++
2020/04/30 10:54:45 [I] ++++++
2020/04/30 10:54:53 [I] socket disconnect :disconnect
2020/04/30 10:54:54 [I] ++++++
2020/04/30 10:54:54 [I] ++++++
2020/04/30 10:54:54 [I] ++++++
2020/04/30 10:54:54 [I] connect
2020/04/30 10:54:54 [I] ++++++
2020/04/30 10:54:54 [I] ++++++
2020/04/30 10:54:54 [I] ++++++
2020/04/30 10:54:54 [I] ++++++
2020/04/30 10:54:54 [I] ++++++
2020/04/30 10:54:55 [I] socket disconnect :disconnect
2020/04/30 10:54:55 [I] socket disconnect :disconnect
2020/04/30 10:54:55 [I] ++++++
2020/04/30 10:54:55 [I] ++++++
2020/04/30 10:54:55 [I] ++++++
2020/04/30 10:54:57 [I] ++++++
2020/04/30 10:54:57 [I] ++++++
2020/04/30 10:54:57 [I] ++++++
2020/04/30 10:55:11 [I] ++++++
2020/04/30 10:55:11 [I] ++++++
2020/04/30 10:55:11 [I] ++++++
2020/04/30 10:55:11 [I] connect
2020/04/30 10:55:11 [I] ++++++
2020/04/30 10:55:11 [I] ++++++
2020/04/30 10:55:11 [I] ++++++
2020/04/30 10:55:11 [I] ++++++
2020/04/30 10:55:11 [I] ++++++
2020/04/30 10:55:20 [I] ++++++
2020/04/30 10:55:20 [I] ++++++
2020/04/30 10:55:20 [I] ++++++
2020/04/30 10:55:20 [I] connect
2020/04/30 10:55:20 [I] ++++++
2020/04/30 10:55:20 [I] ++++++
2020/04/30 10:55:20 [I] ++++++
2020/04/30 10:55:21 [I] ++++++
2020/04/30 10:55:21 [I] ++++++
2020/04/30 10:55:21 [I] ++++++
2020/04/30 10:55:21 [I] socket disconnect :disconnect
2020/04/30 10:55:22 [I] ++++++
2020/04/30 10:55:22 [I] ++++++
2020/04/30 10:55:22 [I] ++++++
2020/04/30 10:55:22 [I] ++++++
2020/04/30 10:55:22 [I] connect
2020/04/30 10:55:22 [I] ++++++
2020/04/30 10:55:22 [I] ++++++
2020/04/30 10:55:22 [I] ++++++
2020/04/30 10:55:22 [I] ++++++
2020/04/30 10:55:22 [I] ++++++
2020/04/30 10:55:22 [I] ++++++
2020/04/30 10:55:23 [I] socket disconnect :disconnect
2020/04/30 10:55:23 [I] socket disconnect :disconnect
2020/04/30 10:55:23 [I] ++++++
2020/04/30 10:55:23 [I] ++++++
2020/04/30 10:55:23 [I] ++++++
2020/04/30 10:55:27 [I] ++++++
2020/04/30 10:55:27 [I] ++++++
2020/04/30 10:55:27 [I] ++++++
2020/04/30 10:55:27 [I] connect
2020/04/30 10:55:27 [I] ++++++
2020/04/30 10:55:27 [I] ++++++
2020/04/30 10:55:27 [I] ++++++
2020/04/30 10:55:27 [I] ++++++
2020/04/30 10:55:27 [I] ++++++
2020/04/30 10:55:27 [I] ++++++
2020/04/30 10:55:33 [I] socket disconnect :disconnect
2020/04/30 10:55:33 [I] socket disconnect :disconnect
2020/04/30 10:55:33 [I] ++++++
2020/04/30 10:55:33 [I] ++++++
2020/04/30 10:55:33 [I] ++++++
2020/04/30 10:55:38 [I] ++++++
2020/04/30 10:55:38 [I] ++++++
2020/04/30 10:55:38 [I] ++++++
2020/04/30 10:55:38 [I] connect
2020/04/30 10:55:38 [I] ++++++
2020/04/30 10:55:38 [I] ++++++
2020/04/30 10:55:38 [I] ++++++
2020/04/30 10:55:38 [I] ++++++
2020/04/30 10:55:38 [I] ++++++
2020/04/30 10:55:38 [I] ++++++
2020/04/30 10:56:04 [I] socket disconnect :disconnect
2020/04/30 10:56:04 [I] ++++++
2020/04/30 10:56:04 [I] ++++++
2020/04/30 10:56:04 [I] ++++++
2020/04/30 10:56:04 [I] connect
2020/04/30 10:56:04 [I] ++++++
2020/04/30 10:56:04 [I] ++++++
2020/04/30 10:56:05 [I] ++++++
2020/04/30 10:56:05 [I] ++++++
2020/04/30 10:56:05 [I] ++++++
2020/04/30 10:57:28 [I] socket disconnect :disconnect
2020/04/30 10:57:29 [I] ++++++
2020/04/30 10:57:29 [I] ++++++
2020/04/30 10:57:29 [I] ++++++
2020/04/30 10:57:29 [I] connect
2020/04/30 10:57:29 [I] ++++++
2020/04/30 10:57:29 [I] ++++++
2020/04/30 10:57:29 [I] ++++++
2020/04/30 10:57:29 [I] ++++++
2020/04/30 10:57:29 [I] ++++++
2020/04/30 10:58:19 [I] socket disconnect :disconnect
2020/04/30 10:58:20 [I] ++++++
2020/04/30 10:58:20 [I] ++++++
2020/04/30 10:58:20 [I] ++++++
2020/04/30 10:58:20 [I] connect
2020/04/30 10:58:20 [I] ++++++
2020/04/30 10:58:20 [I] ++++++
2020/04/30 10:58:20 [I] ++++++
2020/04/30 10:58:20 [I] ++++++
2020/04/30 10:58:20 [I] ++++++
2020/04/30 10:58:21 [I] socket disconnect :disconnect
2020/04/30 10:58:21 [I] socket disconnect :disconnect
2020/04/30 10:58:21 [I] ++++++
2020/04/30 10:58:21 [I] ++++++
2020/04/30 10:58:21 [I] ++++++
2020/04/30 10:58:22 [I] ++++++
2020/04/30 10:58:22 [I] ++++++
2020/04/30 10:58:22 [I] ++++++
2020/04/30 10:58:22 [I] connect
2020/04/30 10:58:22 [I] ++++++
2020/04/30 10:58:22 [I] ++++++
2020/04/30 10:58:22 [I] ++++++
2020/04/30 10:58:22 [I] ++++++
2020/04/30 10:58:22 [I] ++++++
2020/04/30 10:58:23 [I] socket disconnect :disconnect
2020/04/30 10:58:23 [I] socket disconnect :disconnect
2020/04/30 10:58:23 [I] ++++++
2020/04/30 10:58:23 [I] ++++++
2020/04/30 10:58:23 [I] ++++++
2020/04/30 10:58:24 [I] ++++++
2020/04/30 10:58:24 [I] ++++++
2020/04/30 10:58:24 [I] ++++++
2020/04/30 10:58:47 [I] ++++++
2020/04/30 10:58:47 [I] ++++++
2020/04/30 10:58:47 [I] ++++++
2020/04/30 11:01:28 [I] ++++++
2020/04/30 11:01:28 [I] ++++++
2020/04/30 11:01:28 [I] ++++++
2020/04/30 11:01:30 [I] ++++++
2020/04/30 11:01:30 [I] ++++++
2020/04/30 11:01:30 [I] ++++++
2020/04/30 11:01:30 [I] connect
2020/04/30 11:01:30 [I] ++++++
2020/04/30 11:01:30 [I] ++++++
2020/04/30 11:01:30 [I] ++++++
2020/04/30 11:01:30 [I] ++++++
2020/04/30 11:01:30 [I] ++++++
2020/04/30 11:02:57 [I] socket disconnect :disconnect
2020/04/30 11:02:58 [I] ++++++
2020/04/30 11:02:58 [I] ++++++
2020/04/30 11:02:58 [I] ++++++
2020/04/30 11:02:58 [I] connect
2020/04/30 11:02:58 [I] ++++++
2020/04/30 11:02:58 [I] ++++++
2020/04/30 11:02:58 [I] ++++++
2020/04/30 11:02:58 [I] ++++++
2020/04/30 11:02:58 [I] ++++++
2020/04/30 11:06:40 [I] socket disconnect :disconnect
2020/04/30 11:14:55 [I] Received signal interrupt. shutting down
2020/04/30 11:15:02 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/04/30 11:15:02 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/04/30 11:15:02 [I] Starting Show
2020/04/30 11:15:02 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/04/30 11:15:02 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/04/30 11:15:02 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/30 11:15:02 [I] Database: mysql
2020/04/30 11:15:02 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/30 11:15:02 [I] Database: mysql
2020/04/30 11:15:02 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/04/30 11:15:02 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/04/30 11:15:02 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/04/30 11:15:04 [I] Listen: http://0.0.0.0:7700
2020/04/30 11:18:17 [I] ++++++
2020/04/30 11:18:17 [I] ++++++
2020/04/30 11:18:17 [I] ++++++
2020/04/30 11:18:17 [I] ++++++
2020/04/30 11:18:19 [I] ++++++
2020/04/30 11:18:19 [I] ++++++
2020/04/30 11:18:19 [I] ++++++
2020/04/30 11:18:19 [I] connect
2020/04/30 11:18:19 [I] ++++++
2020/04/30 11:18:19 [I] ++++++
2020/04/30 11:18:19 [I] ++++++
2020/04/30 11:18:19 [I] ++++++
2020/04/30 11:18:19 [I] ++++++
2020/04/30 11:18:19 [I] ++++++
2020/04/30 11:18:34 [I] socket disconnect :disconnect
2020/04/30 11:18:35 [I] ++++++
2020/04/30 11:18:35 [I] ++++++
2020/04/30 11:18:35 [I] ++++++
2020/04/30 11:18:35 [I] ++++++
2020/04/30 11:18:35 [I] connect
2020/04/30 11:18:35 [I] ++++++
2020/04/30 11:18:35 [I] ++++++
2020/04/30 11:18:35 [I] ++++++
2020/04/30 11:18:35 [I] ++++++
2020/04/30 11:18:35 [I] ++++++
2020/04/30 11:18:35 [I] ++++++
2020/04/30 11:18:38 [I] socket disconnect :disconnect
2020/04/30 11:18:39 [I] ++++++
2020/04/30 11:18:39 [I] ++++++
2020/04/30 11:18:39 [I] ++++++
2020/04/30 11:18:39 [I] ++++++
2020/04/30 11:18:39 [I] connect
2020/04/30 11:18:39 [I] ++++++
2020/04/30 11:18:39 [I] ++++++
2020/04/30 11:18:39 [I] ++++++
2020/04/30 11:18:39 [I] ++++++
2020/04/30 11:18:39 [I] ++++++
2020/04/30 11:18:39 [I] ++++++
2020/04/30 11:18:50 [I] socket disconnect :disconnect
2020/04/30 11:18:50 [I] ++++++
2020/04/30 11:18:50 [I] ++++++
2020/04/30 11:18:50 [I] ++++++
2020/04/30 11:18:50 [I] ++++++
2020/04/30 11:18:50 [I] connect
2020/04/30 11:18:50 [I] ++++++
2020/04/30 11:18:50 [I] ++++++
2020/04/30 11:18:50 [I] ++++++
2020/04/30 11:18:50 [I] ++++++
2020/04/30 11:18:51 [I] ++++++
2020/04/30 11:18:51 [I] ++++++
2020/04/30 11:19:53 [I] socket disconnect :disconnect
2020/04/30 11:19:54 [I] ++++++
2020/04/30 11:19:54 [I] ++++++
2020/04/30 11:19:54 [I] ++++++
2020/04/30 11:19:54 [I] ++++++
2020/04/30 11:19:57 [I] ++++++
2020/04/30 11:19:57 [I] ++++++
2020/04/30 11:19:57 [I] ++++++
2020/04/30 11:19:57 [I] ++++++
2020/04/30 11:22:33 [I] ++++++
2020/04/30 11:22:33 [I] ++++++
2020/04/30 11:22:33 [I] ++++++
2020/04/30 11:22:33 [I] connect
2020/04/30 11:22:33 [I] ++++++
2020/04/30 11:22:33 [I] ++++++
2020/04/30 11:22:33 [I] ++++++
2020/04/30 11:22:33 [I] ++++++
2020/04/30 11:22:33 [I] ++++++
2020/04/30 11:22:58 [I] ++++++
2020/04/30 11:22:58 [I] ++++++
2020/04/30 11:22:58 [I] ++++++
2020/04/30 11:23:23 [I] ++++++
2020/04/30 11:23:23 [I] ++++++
2020/04/30 11:23:23 [I] ++++++
2020/04/30 11:23:48 [I] ++++++
2020/04/30 11:23:48 [I] ++++++
2020/04/30 11:23:48 [I] ++++++
2020/04/30 11:24:02 [I] ++++++
2020/04/30 11:24:02 [I] ++++++
2020/04/30 11:24:02 [I] ++++++
2020/04/30 11:24:02 [I] ++++++
2020/04/30 11:24:02 [I] connect
2020/04/30 11:24:02 [I] ++++++
2020/04/30 11:24:02 [I] ++++++
2020/04/30 11:24:02 [I] ++++++
2020/04/30 11:24:02 [I] ++++++
2020/04/30 11:24:02 [I] ++++++
2020/04/30 11:24:02 [I] ++++++
2020/04/30 11:24:04 [I] socket disconnect :disconnect
2020/04/30 11:24:04 [I] socket disconnect :disconnect
2020/04/30 11:24:04 [I] ++++++
2020/04/30 11:24:04 [I] ++++++
2020/04/30 11:24:04 [I] ++++++
2020/04/30 11:24:25 [I] ++++++
2020/04/30 11:24:25 [I] ++++++
2020/04/30 11:24:25 [I] ++++++
2020/04/30 11:24:25 [I] ++++++
2020/04/30 11:24:41 [I] ++++++
2020/04/30 11:24:41 [I] ++++++
2020/04/30 11:24:41 [I] ++++++
2020/04/30 11:24:45 [I] ++++++
2020/04/30 11:24:45 [I] ++++++
2020/04/30 11:24:45 [I] ++++++
2020/04/30 11:24:45 [I] connect
2020/04/30 11:24:45 [I] ++++++
2020/04/30 11:24:45 [I] ++++++
2020/04/30 11:24:45 [I] ++++++
2020/04/30 11:24:45 [I] ++++++
2020/04/30 11:24:45 [I] ++++++
2020/04/30 11:24:48 [I] socket disconnect :disconnect
2020/04/30 11:25:03 [I] socket disconnect :disconnect
2020/04/30 11:25:25 [I] ++++++
2020/04/30 11:25:25 [I] ++++++
2020/04/30 11:25:25 [I] ++++++
2020/04/30 11:25:25 [I] ++++++
2020/04/30 11:25:26 [I] ++++++
2020/04/30 11:25:26 [I] ++++++
2020/04/30 11:25:26 [I] ++++++
2020/04/30 11:25:26 [I] connect
2020/04/30 11:25:26 [I] ++++++
2020/04/30 11:25:26 [I] ++++++
2020/04/30 11:25:26 [I] ++++++
2020/04/30 11:25:27 [I] ++++++
2020/04/30 11:25:27 [I] ++++++
2020/04/30 11:25:27 [I] ++++++
2020/04/30 11:28:39 [I] start save to redis
2020/04/30 11:28:40 [I] socket disconnect :disconnect
2020/04/30 11:28:41 [I] start save to redis
2020/04/30 11:28:41 [I] start save to redis
2020/04/30 11:28:41 [I] start save to redis
2020/04/30 11:28:42 [I] start save to redis
2020/04/30 11:28:42 [I] start save to redis
2020/04/30 11:28:42 [I] start save to redis
2020/04/30 11:28:42 [I] start save to redis
2020/04/30 11:28:42 [I] start save to redis
2020/04/30 11:28:43 [I] start save to redis
2020/04/30 11:28:44 [I] start save to redis
2020/04/30 11:28:44 [I] start save to redis
2020/04/30 11:28:44 [I] start save to redis
2020/04/30 11:28:45 [I] start save to redis
2020/04/30 11:28:45 [I] start save to redis
2020/04/30 11:28:45 [I] start save to redis
2020/04/30 11:28:46 [I] start save to redis
2020/04/30 11:28:46 [I] start save to redis
2020/04/30 11:28:46 [I] start save to redis
2020/04/30 11:28:46 [I] start save to redis
2020/04/30 11:28:47 [I] start save to redis
2020/04/30 11:28:47 [I] start save to redis
2020/04/30 11:28:48 [I] start save to redis
2020/04/30 11:28:48 [I] start save to redis
2020/04/30 11:28:50 [I] start save to redis
2020/04/30 11:28:54 [I] start save to redis
2020/04/30 11:29:26 [I] ++++++
2020/04/30 11:29:26 [I] ++++++
2020/04/30 11:29:26 [I] ++++++
2020/04/30 11:29:26 [I] ++++++
2020/04/30 11:29:28 [I] ++++++
2020/04/30 11:29:28 [I] ++++++
2020/04/30 11:29:28 [I] ++++++
2020/04/30 11:29:28 [I] connect
2020/04/30 11:29:28 [I] ++++++
2020/04/30 11:29:28 [I] ++++++
2020/04/30 11:29:28 [I] ++++++
2020/04/30 11:29:28 [I] ++++++
2020/04/30 11:29:28 [I] ++++++
2020/04/30 11:29:28 [I] ++++++
2020/04/30 11:30:01 [I] ++++++
2020/04/30 11:30:02 [I] ++++++
2020/04/30 11:30:02 [I] ++++++
2020/04/30 11:30:02 [I] ++++++
2020/04/30 11:30:15 [I] socket disconnect :disconnect
2020/04/30 12:18:19 [I] socket keepConnect :keepAlive
2020/04/30 12:18:35 [I] socket keepConnect :keepAlive
2020/04/30 12:18:39 [I] socket keepConnect :keepAlive
2020/04/30 12:18:50 [I] socket keepConnect :keepAlive
2020/04/30 12:22:33 [I] socket keepConnect :keepAlive
2020/04/30 12:24:02 [I] socket keepConnect :keepAlive
2020/04/30 12:24:45 [I] socket keepConnect :keepAlive
2020/04/30 12:25:26 [I] socket keepConnect :keepAlive
2020/04/30 12:29:28 [I] socket keepConnect :keepAlive
2020/04/30 13:18:19 [I] socket keepConnect :keepAlive
2020/04/30 13:18:35 [I] socket keepConnect :keepAlive
2020/04/30 13:18:39 [I] socket keepConnect :keepAlive
2020/04/30 13:18:50 [I] socket keepConnect :keepAlive
2020/04/30 13:22:33 [I] socket keepConnect :keepAlive
2020/04/30 13:24:02 [I] socket keepConnect :keepAlive
2020/04/30 13:24:45 [I] socket keepConnect :keepAlive
2020/04/30 13:25:26 [I] socket keepConnect :keepAlive
2020/04/30 13:29:28 [I] socket keepConnect :keepAlive
2020/04/30 14:18:19 [I] socket keepConnect :keepAlive
2020/04/30 14:18:35 [I] socket keepConnect :keepAlive
2020/04/30 14:18:39 [I] socket keepConnect :keepAlive
2020/04/30 14:18:50 [I] socket keepConnect :keepAlive
2020/04/30 14:22:33 [I] socket keepConnect :keepAlive
2020/04/30 14:24:02 [I] socket keepConnect :keepAlive
2020/04/30 14:24:45 [I] socket keepConnect :keepAlive
2020/04/30 14:25:26 [I] socket keepConnect :keepAlive
2020/04/30 14:29:28 [I] socket keepConnect :keepAlive
2020/04/30 15:18:19 [I] socket keepConnect :keepAlive
2020/04/30 15:18:35 [I] socket keepConnect :keepAlive
2020/04/30 15:18:39 [I] socket keepConnect :keepAlive
2020/04/30 15:18:50 [I] socket keepConnect :keepAlive
2020/04/30 15:22:33 [I] socket keepConnect :keepAlive
2020/04/30 15:24:02 [I] socket keepConnect :keepAlive
2020/04/30 15:24:45 [I] socket keepConnect :keepAlive
2020/04/30 15:25:26 [I] socket keepConnect :keepAlive
2020/04/30 15:29:28 [I] socket keepConnect :keepAlive
2020/04/30 15:54:42 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:54:42 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:54:43 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/30 15:54:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:54:44 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:54:45 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/30 15:54:45 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/30 15:54:46 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:54:46 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:54:48 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:54:48 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:54:48 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/30 15:54:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/30 15:54:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:54:50 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:54:52 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:54:52 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:54:53 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/30 15:54:54 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:54:55 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:54:55 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/30 15:54:55 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/04/30 15:54:56 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:54:57 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:54:58 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:54:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/30 15:54:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:55:00 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/04/30 15:55:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:55:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:55:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/30 15:55:03 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/30 15:55:03 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 15:55:03 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/04/30 15:55:04 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/04/30 15:55:04 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/04/30 15:55:05 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/04/30 15:55:05 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,profile FROM train_teacher
2020/04/30 16:18:19 [I] socket keepConnect :keepAlive
2020/04/30 16:18:35 [I] socket keepConnect :keepAlive
2020/04/30 16:18:39 [I] socket keepConnect :keepAlive
2020/04/30 16:18:50 [I] socket keepConnect :keepAlive
2020/04/30 16:22:33 [I] socket keepConnect :keepAlive
2020/04/30 16:24:02 [I] socket keepConnect :keepAlive
2020/04/30 16:24:45 [I] socket keepConnect :keepAlive
2020/04/30 16:25:26 [I] socket keepConnect :keepAlive
2020/04/30 16:29:28 [I] socket keepConnect :keepAlive
2020/04/30 17:18:19 [I] socket keepConnect :keepAlive
2020/04/30 17:18:35 [I] socket keepConnect :keepAlive
2020/04/30 17:18:39 [I] socket keepConnect :keepAlive
2020/04/30 17:18:50 [I] socket keepConnect :keepAlive
2020/04/30 17:22:33 [I] socket keepConnect :keepAlive
2020/04/30 17:24:02 [I] socket keepConnect :keepAlive
2020/04/30 17:24:45 [I] socket keepConnect :keepAlive
2020/04/30 17:25:26 [I] socket keepConnect :keepAlive
2020/04/30 17:29:28 [I] socket keepConnect :keepAlive
2020/04/30 17:36:35 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/04/30 17:36:35 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/04/30 17:36:35 [I] Starting Show
2020/04/30 17:36:35 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/04/30 17:36:35 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/04/30 17:36:35 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/30 17:36:35 [I] Database: mysql
2020/04/30 17:36:35 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/04/30 17:36:35 [I] Database: mysql
2020/04/30 17:36:35 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/04/30 17:36:35 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/04/30 17:36:35 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/04/30 17:36:37 [I] Listen: http://0.0.0.0:7700
2020/04/30 17:36:37 [web.go:95 StartServer()] [E] Fail to start server: listen tcp 0.0.0.0:7700: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.
2020/04/30 18:18:19 [I] socket keepConnect :keepAlive
2020/04/30 18:18:35 [I] socket keepConnect :keepAlive
2020/04/30 18:18:39 [I] socket keepConnect :keepAlive
2020/04/30 18:18:50 [I] socket keepConnect :keepAlive
2020/04/30 18:22:33 [I] socket keepConnect :keepAlive
2020/04/30 18:24:02 [I] socket keepConnect :keepAlive
2020/04/30 18:24:45 [I] socket keepConnect :keepAlive
2020/04/30 18:25:26 [I] socket keepConnect :keepAlive
2020/04/30 18:29:28 [I] socket keepConnect :keepAlive
2020/05/06 09:16:30 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/05/06 09:16:30 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/05/06 09:16:30 [I] Starting Show
2020/05/06 09:16:30 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/05/06 09:16:30 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/05/06 09:16:30 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/05/06 09:16:30 [I] Database: mysql
2020/05/06 09:16:30 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/05/06 09:16:30 [I] Database: mysql
2020/05/06 09:16:30 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/05/06 09:16:30 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/05/06 09:16:30 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/05/06 09:16:33 [I] Listen: http://0.0.0.0:7700
2020/05/06 09:25:56 [I] ++++++
2020/05/06 09:25:56 [I] ++++++
2020/05/06 09:25:56 [I] ++++++
2020/05/06 09:26:03 [I] ++++++
2020/05/06 09:26:03 [I] ++++++
2020/05/06 09:26:03 [I] ++++++
2020/05/06 09:26:03 [I] connect
2020/05/06 09:26:03 [I] ++++++
2020/05/06 09:26:03 [I] ++++++
2020/05/06 09:26:03 [I] ++++++
2020/05/06 09:26:03 [I] ++++++
2020/05/06 09:26:03 [I] ++++++
2020/05/06 09:26:04 [I] ++++++
2020/05/06 09:26:04 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [I] ++++++
2020/05/06 09:26:04 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [I] ++++++
2020/05/06 09:26:04 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [I] ++++++
2020/05/06 09:26:04 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=9bcc55fb65e7471bb45b4d660c2d6ed9:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:04 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [socket.go:99 1()] [E] add rotuineName :9bcc55fb65e7471bb45b4d660c2d6ed91588728364 ,singledata :{9bcc55fb65e7471bb45b4d660c2d6ed9 30m %!s(*socketio.Socket=0xc04216e320)}
2020/05/06 09:26:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d0249fe870284e61bc2c53373065cf4c:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:04 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [socket.go:99 1()] [E] add rotuineName :d0249fe870284e61bc2c53373065cf4c1588728364 ,singledata :{d0249fe870284e61bc2c53373065cf4c 30m %!s(*socketio.Socket=0xc04216e320)}
2020/05/06 09:26:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=9432773efbd24674a6e425adf2e5a364:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:04 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [socket.go:99 1()] [E] add rotuineName :9432773efbd24674a6e425adf2e5a3641588728364 ,singledata :{9432773efbd24674a6e425adf2e5a364 30m %!s(*socketio.Socket=0xc04216e320)}
2020/05/06 09:26:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=a42c854494ea40cb9fcde64899b4e139:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:04 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:04 [socket.go:99 1()] [E] add rotuineName :a42c854494ea40cb9fcde64899b4e1391588728364 ,singledata :{a42c854494ea40cb9fcde64899b4e139 30m %!s(*socketio.Socket=0xc04216e320)}
2020/05/06 09:26:07 [I] socket disconnect :disconnect
2020/05/06 09:26:07 [I] socket disconnect :disconnect
2020/05/06 09:26:07 [I] ++++++
2020/05/06 09:26:07 [I] ++++++
2020/05/06 09:26:07 [I] ++++++
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [I] connect
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:08 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:08 [I] ++++++
2020/05/06 09:26:08 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:08 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:08 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:08 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:09 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=069fe80c869a41a1a4fd5886d40d8ff6:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:09 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:09 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:09 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:09 [socket.go:99 1()] [E] add rotuineName :069fe80c869a41a1a4fd5886d40d8ff61588728369 ,singledata :{069fe80c869a41a1a4fd5886d40d8ff6 0s %!s(*socketio.Socket=0xc0423f6830)}
2020/05/06 09:26:09 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=2e25facad7ee45629e06fa9e526d0147:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:09 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:09 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:09 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:09 [socket.go:99 1()] [E] add rotuineName :2e25facad7ee45629e06fa9e526d01471588728369 ,singledata :{2e25facad7ee45629e06fa9e526d0147 0s %!s(*socketio.Socket=0xc0423f6830)}
2020/05/06 09:26:09 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d3f25668f3fe487283db443ed6a2786a:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:09 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:09 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:09 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:09 [socket.go:99 1()] [E] add rotuineName :d3f25668f3fe487283db443ed6a2786a1588728369 ,singledata :{d3f25668f3fe487283db443ed6a2786a 30m %!s(*socketio.Socket=0xc0423f6830)}
2020/05/06 09:26:09 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f660f1019da44b1e9d2baf843f4bc118:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:09 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:09 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:09 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:09 [socket.go:99 1()] [E] add rotuineName :f660f1019da44b1e9d2baf843f4bc1181588728369 ,singledata :{f660f1019da44b1e9d2baf843f4bc118 30m %!s(*socketio.Socket=0xc0423f6830)}
2020/05/06 09:26:17 [I] socket disconnect :disconnect
2020/05/06 09:26:17 [I] socket disconnect :disconnect
2020/05/06 09:26:18 [I] ++++++
2020/05/06 09:26:18 [I] ++++++
2020/05/06 09:26:18 [I] ++++++
2020/05/06 09:26:18 [I] ++++++
2020/05/06 09:26:18 [I] ++++++
2020/05/06 09:26:18 [I] ++++++
2020/05/06 09:26:18 [I] connect
2020/05/06 09:26:18 [I] ++++++
2020/05/06 09:26:18 [I] ++++++
2020/05/06 09:26:18 [I] ++++++
2020/05/06 09:26:18 [I] ++++++
2020/05/06 09:26:19 [I] 停止 key:069fe80c869a41a1a4fd5886d40d8ff6 , 线程id:069fe80c869a41a1a4fd5886d40d8ff61588728369
2020/05/06 09:26:19 [I] 停止 key:2e25facad7ee45629e06fa9e526d0147 , 线程id:2e25facad7ee45629e06fa9e526d01471588728369
2020/05/06 09:26:19 [I] ++++++
2020/05/06 09:26:19 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [I] ++++++
2020/05/06 09:26:19 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [I] ++++++
2020/05/06 09:26:19 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [I] ++++++
2020/05/06 09:26:19 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:19 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1588728379 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc042304f40)}
2020/05/06 09:26:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:19 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41588728379 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc042304f40)}
2020/05/06 09:26:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:19 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:19 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751588728379 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc042304f40)}
2020/05/06 09:26:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/05/06 09:26:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:26:20 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 09:26:20 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 09:26:20 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61588728380 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc042304f40)}
2020/05/06 09:26:25 [I] socket disconnect :disconnect
2020/05/06 09:26:25 [I] socket disconnect :disconnect
2020/05/06 09:26:25 [I] ++++++
2020/05/06 09:26:25 [I] ++++++
2020/05/06 09:26:25 [I] ++++++
2020/05/06 09:26:25 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588728379
2020/05/06 09:27:05 [I] ++++++
2020/05/06 09:27:05 [I] ++++++
2020/05/06 09:27:05 [I] ++++++
2020/05/06 09:27:38 [I] ++++++
2020/05/06 09:27:38 [I] ++++++
2020/05/06 09:27:38 [I] ++++++
2020/05/06 09:27:38 [I] ++++++
2020/05/06 09:27:45 [I] ++++++
2020/05/06 09:27:45 [I] ++++++
2020/05/06 09:27:45 [I] ++++++
2020/05/06 09:27:45 [I] ++++++
2020/05/06 09:28:00 [I] ++++++
2020/05/06 09:28:00 [I] ++++++
2020/05/06 09:28:00 [I] ++++++
2020/05/06 09:29:31 [I] ++++++
2020/05/06 09:29:31 [I] ++++++
2020/05/06 09:29:31 [I] ++++++
2020/05/06 09:30:13 [I] ++++++
2020/05/06 09:30:13 [I] ++++++
2020/05/06 09:30:13 [I] ++++++
2020/05/06 09:30:47 [I] ++++++
2020/05/06 09:30:48 [I] ++++++
2020/05/06 09:30:48 [I] ++++++
2020/05/06 09:30:48 [I] ++++++
2020/05/06 09:36:03 [I] ++++++
2020/05/06 09:36:03 [I] ++++++
2020/05/06 09:36:03 [I] ++++++
2020/05/06 09:36:59 [I] ++++++
2020/05/06 09:36:59 [I] ++++++
2020/05/06 09:36:59 [I] ++++++
2020/05/06 09:37:23 [I] ++++++
2020/05/06 09:37:23 [I] ++++++
2020/05/06 09:37:23 [I] ++++++
2020/05/06 09:37:50 [I] ++++++
2020/05/06 09:37:50 [I] ++++++
2020/05/06 09:37:50 [I] ++++++
2020/05/06 09:37:50 [I] ++++++
2020/05/06 09:38:02 [I] ++++++
2020/05/06 09:38:02 [I] ++++++
2020/05/06 09:38:02 [I] ++++++
2020/05/06 09:38:02 [I] ++++++
2020/05/06 09:38:12 [I] ++++++
2020/05/06 09:38:12 [I] ++++++
2020/05/06 09:38:12 [I] ++++++
2020/05/06 09:38:44 [I] ++++++
2020/05/06 09:38:44 [I] ++++++
2020/05/06 09:38:44 [I] ++++++
2020/05/06 09:39:37 [I] ++++++
2020/05/06 09:39:37 [I] ++++++
2020/05/06 09:39:37 [I] ++++++
2020/05/06 09:40:17 [I] ++++++
2020/05/06 09:40:17 [I] ++++++
2020/05/06 09:40:17 [I] ++++++
2020/05/06 09:40:21 [I] ++++++
2020/05/06 09:40:21 [I] ++++++
2020/05/06 09:40:21 [I] ++++++
2020/05/06 09:41:36 [I] ++++++
2020/05/06 09:41:36 [I] ++++++
2020/05/06 09:41:36 [I] ++++++
2020/05/06 09:46:46 [I] ++++++
2020/05/06 09:46:46 [I] ++++++
2020/05/06 09:46:46 [I] ++++++
2020/05/06 09:46:46 [I] ++++++
2020/05/06 09:46:47 [I] ++++++
2020/05/06 09:46:47 [I] ++++++
2020/05/06 09:46:47 [I] ++++++
2020/05/06 09:46:47 [I] ++++++
2020/05/06 09:48:09 [I] ++++++
2020/05/06 09:48:09 [I] ++++++
2020/05/06 09:48:09 [I] ++++++
2020/05/06 09:48:09 [I] ++++++
2020/05/06 09:48:14 [I] ++++++
2020/05/06 09:48:14 [I] ++++++
2020/05/06 09:48:14 [I] ++++++
2020/05/06 09:48:14 [I] connect
2020/05/06 09:48:14 [I] ++++++
2020/05/06 09:48:14 [I] ++++++
2020/05/06 09:48:14 [I] ++++++
2020/05/06 09:48:14 [I] ++++++
2020/05/06 09:48:14 [I] ++++++
2020/05/06 09:48:14 [I] ++++++
2020/05/06 09:48:16 [I] socket disconnect :disconnect
2020/05/06 09:48:16 [I] socket disconnect :disconnect
2020/05/06 09:48:16 [I] ++++++
2020/05/06 09:48:16 [I] ++++++
2020/05/06 09:48:16 [I] ++++++
2020/05/06 09:48:18 [I] ++++++
2020/05/06 09:48:18 [I] ++++++
2020/05/06 09:48:18 [I] ++++++
2020/05/06 09:48:18 [I] ++++++
2020/05/06 09:53:26 [I] ++++++
2020/05/06 09:53:26 [I] ++++++
2020/05/06 09:53:26 [I] ++++++
2020/05/06 09:53:26 [I] ++++++
2020/05/06 09:53:27 [I] ++++++
2020/05/06 09:53:27 [I] ++++++
2020/05/06 09:53:27 [I] ++++++
2020/05/06 09:53:27 [I] connect
2020/05/06 09:53:27 [I] ++++++
2020/05/06 09:53:27 [I] ++++++
2020/05/06 09:53:27 [I] ++++++
2020/05/06 09:53:27 [I] ++++++
2020/05/06 09:53:27 [I] ++++++
2020/05/06 09:53:36 [I] ++++++
2020/05/06 09:53:36 [I] ++++++
2020/05/06 09:53:40 [I] socket disconnect :disconnect
2020/05/06 09:53:40 [I] socket disconnect :disconnect
2020/05/06 09:53:40 [I] ++++++
2020/05/06 09:53:40 [I] ++++++
2020/05/06 09:53:40 [I] ++++++
2020/05/06 09:53:45 [I] ++++++
2020/05/06 09:53:45 [I] ++++++
2020/05/06 09:53:45 [I] ++++++
2020/05/06 09:53:45 [I] connect
2020/05/06 09:53:45 [I] ++++++
2020/05/06 09:53:45 [I] ++++++
2020/05/06 09:53:45 [I] ++++++
2020/05/06 09:53:45 [I] ++++++
2020/05/06 09:53:45 [I] ++++++
2020/05/06 09:53:45 [I] ++++++
2020/05/06 09:56:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=9bcc55fb65e7471bb45b4d660c2d6ed9:0) result err:NOAUTH Authentication required.
2020/05/06 09:56:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:56:04 [I] --getSingleData----
2020/05/06 09:56:04 [I] 停止 key:9bcc55fb65e7471bb45b4d660c2d6ed9 , 线程id:9bcc55fb65e7471bb45b4d660c2d6ed91588728364
2020/05/06 09:56:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d0249fe870284e61bc2c53373065cf4c:0) result err:NOAUTH Authentication required.
2020/05/06 09:56:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:56:04 [I] --getSingleData----
2020/05/06 09:56:04 [I] 停止 key:d0249fe870284e61bc2c53373065cf4c , 线程id:d0249fe870284e61bc2c53373065cf4c1588728364
2020/05/06 09:56:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=9432773efbd24674a6e425adf2e5a364:0) result err:NOAUTH Authentication required.
2020/05/06 09:56:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:56:04 [I] --getSingleData----
2020/05/06 09:56:04 [I] 停止 key:9432773efbd24674a6e425adf2e5a364 , 线程id:9432773efbd24674a6e425adf2e5a3641588728364
2020/05/06 09:56:05 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=a42c854494ea40cb9fcde64899b4e139:0) result err:NOAUTH Authentication required.
2020/05/06 09:56:05 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:56:05 [I] --getSingleData----
2020/05/06 09:56:05 [I] 停止 key:a42c854494ea40cb9fcde64899b4e139 , 线程id:a42c854494ea40cb9fcde64899b4e1391588728364
2020/05/06 09:56:05 [I] 停止 key:9bcc55fb65e7471bb45b4d660c2d6ed9 , 线程id:9bcc55fb65e7471bb45b4d660c2d6ed91588728364
2020/05/06 09:56:09 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d3f25668f3fe487283db443ed6a2786a:0) result err:NOAUTH Authentication required.
2020/05/06 09:56:09 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:56:09 [I] --getSingleData----
2020/05/06 09:56:09 [I] 停止 key:d3f25668f3fe487283db443ed6a2786a , 线程id:d3f25668f3fe487283db443ed6a2786a1588728369
2020/05/06 09:56:09 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f660f1019da44b1e9d2baf843f4bc118:0) result err:NOAUTH Authentication required.
2020/05/06 09:56:09 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:56:09 [I] --getSingleData----
2020/05/06 09:56:09 [I] 停止 key:f660f1019da44b1e9d2baf843f4bc118 , 线程id:f660f1019da44b1e9d2baf843f4bc1181588728369
2020/05/06 09:56:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/06 09:56:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:56:19 [I] --getSingleData----
2020/05/06 09:56:19 [I] 停止 key:5c066b0f844b445790a57a4847d0eae4 , 线程id:5c066b0f844b445790a57a4847d0eae41588728379
2020/05/06 09:56:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/06 09:56:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:56:20 [I] --getSingleData----
2020/05/06 09:56:20 [I] 停止 key:f0e94962c83044bbb8b7f2db216c5275 , 线程id:f0e94962c83044bbb8b7f2db216c52751588728379
2020/05/06 09:56:20 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/05/06 09:56:20 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 09:56:20 [I] --getSingleData----
2020/05/06 09:56:20 [I] 停止 key:d94209e154de408ab80e6ce54a6968a6 , 线程id:d94209e154de408ab80e6ce54a6968a61588728380
2020/05/06 09:56:20 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588728379
2020/05/06 10:15:42 [I] socket disconnect :disconnect
2020/05/06 10:15:43 [I] ++++++
2020/05/06 10:15:43 [I] ++++++
2020/05/06 10:15:43 [I] connect
2020/05/06 10:15:43 [I] ++++++
2020/05/06 10:15:43 [I] ++++++
2020/05/06 10:15:43 [I] ++++++
2020/05/06 10:15:43 [I] ++++++
2020/05/06 10:15:44 [I] ++++++
2020/05/06 10:15:44 [I] ++++++
2020/05/06 10:15:44 [I] ++++++
2020/05/06 10:15:44 [I] ++++++
2020/05/06 10:16:38 [I] socket disconnect :disconnect
2020/05/06 10:16:39 [I] ++++++
2020/05/06 10:16:39 [I] ++++++
2020/05/06 10:16:39 [I] ++++++
2020/05/06 10:16:39 [I] connect
2020/05/06 10:16:39 [I] ++++++
2020/05/06 10:16:39 [I] ++++++
2020/05/06 10:16:39 [I] ++++++
2020/05/06 10:16:39 [I] ++++++
2020/05/06 10:16:39 [I] ++++++
2020/05/06 10:16:39 [I] ++++++
2020/05/06 10:16:39 [I] ++++++
2020/05/06 10:17:14 [I] socket disconnect :disconnect
2020/05/06 10:17:14 [I] ++++++
2020/05/06 10:17:14 [I] ++++++
2020/05/06 10:17:14 [I] ++++++
2020/05/06 10:17:14 [I] ++++++
2020/05/06 10:17:14 [I] connect
2020/05/06 10:17:14 [I] ++++++
2020/05/06 10:17:14 [I] ++++++
2020/05/06 10:17:15 [I] ++++++
2020/05/06 10:17:15 [I] ++++++
2020/05/06 10:17:15 [I] ++++++
2020/05/06 10:17:15 [I] ++++++
2020/05/06 10:26:03 [I] socket keepConnect :keepAlive
2020/05/06 10:26:08 [I] socket keepConnect :keepAlive
2020/05/06 10:26:18 [I] socket keepConnect :keepAlive
2020/05/06 10:40:30 [I] ++++++
2020/05/06 10:40:34 [I] ++++++
2020/05/06 10:40:34 [I] ++++++
2020/05/06 10:40:34 [I] ++++++
2020/05/06 10:40:34 [I] ++++++
2020/05/06 10:40:35 [I] ++++++
2020/05/06 10:40:35 [I] ++++++
2020/05/06 10:40:36 [I] ++++++
2020/05/06 10:40:36 [I] ++++++
2020/05/06 10:40:36 [I] ++++++
2020/05/06 10:40:36 [I] ++++++
2020/05/06 10:40:36 [I] ++++++
2020/05/06 10:40:36 [I] ++++++
2020/05/06 10:40:37 [I] ++++++
2020/05/06 10:40:37 [I] ++++++
2020/05/06 10:40:37 [I] ++++++
2020/05/06 10:40:37 [I] ++++++
2020/05/06 10:40:37 [I] ++++++
2020/05/06 10:40:37 [I] ++++++
2020/05/06 10:44:48 [I] socket disconnect :disconnect
2020/05/06 10:44:49 [I] ++++++
2020/05/06 10:44:49 [I] ++++++
2020/05/06 10:44:49 [I] ++++++
2020/05/06 10:44:49 [I] ++++++
2020/05/06 10:44:49 [I] connect
2020/05/06 10:44:49 [I] ++++++
2020/05/06 10:44:49 [I] ++++++
2020/05/06 10:44:49 [I] ++++++
2020/05/06 10:44:49 [I] ++++++
2020/05/06 10:44:49 [I] ++++++
2020/05/06 10:44:49 [I] ++++++
2020/05/06 10:45:09 [I] socket disconnect :disconnect
2020/05/06 10:45:10 [I] ++++++
2020/05/06 10:45:10 [I] ++++++
2020/05/06 10:45:10 [I] ++++++
2020/05/06 10:45:10 [I] ++++++
2020/05/06 10:45:10 [I] connect
2020/05/06 10:45:10 [I] ++++++
2020/05/06 10:45:10 [I] ++++++
2020/05/06 10:45:10 [I] ++++++
2020/05/06 10:45:10 [I] ++++++
2020/05/06 10:45:10 [I] ++++++
2020/05/06 10:45:10 [I] ++++++
2020/05/06 10:45:21 [I] socket disconnect :disconnect
2020/05/06 10:45:22 [I] ++++++
2020/05/06 10:45:22 [I] ++++++
2020/05/06 10:45:22 [I] ++++++
2020/05/06 10:45:22 [I] ++++++
2020/05/06 10:45:22 [I] connect
2020/05/06 10:45:22 [I] ++++++
2020/05/06 10:45:22 [I] ++++++
2020/05/06 10:45:22 [I] ++++++
2020/05/06 10:45:22 [I] ++++++
2020/05/06 10:45:22 [I] ++++++
2020/05/06 10:45:23 [I] ++++++
2020/05/06 10:45:27 [I] socket disconnect :disconnect
2020/05/06 10:45:28 [I] ++++++
2020/05/06 10:45:28 [I] ++++++
2020/05/06 10:45:28 [I] ++++++
2020/05/06 10:45:28 [I] ++++++
2020/05/06 10:45:28 [I] connect
2020/05/06 10:45:28 [I] ++++++
2020/05/06 10:45:28 [I] ++++++
2020/05/06 10:45:28 [I] ++++++
2020/05/06 10:45:28 [I] ++++++
2020/05/06 10:45:28 [I] ++++++
2020/05/06 10:45:28 [I] ++++++
2020/05/06 10:45:34 [I] socket disconnect :disconnect
2020/05/06 10:45:35 [I] ++++++
2020/05/06 10:45:35 [I] ++++++
2020/05/06 10:45:35 [I] ++++++
2020/05/06 10:45:35 [I] ++++++
2020/05/06 10:45:35 [I] connect
2020/05/06 10:45:35 [I] ++++++
2020/05/06 10:45:35 [I] ++++++
2020/05/06 10:45:35 [I] ++++++
2020/05/06 10:45:35 [I] ++++++
2020/05/06 10:45:35 [I] ++++++
2020/05/06 10:45:35 [I] ++++++
2020/05/06 10:46:15 [I] socket disconnect :disconnect
2020/05/06 10:46:16 [I] ++++++
2020/05/06 10:46:16 [I] ++++++
2020/05/06 10:46:16 [I] ++++++
2020/05/06 10:46:16 [I] ++++++
2020/05/06 10:46:16 [I] connect
2020/05/06 10:46:16 [I] ++++++
2020/05/06 10:46:16 [I] ++++++
2020/05/06 10:46:16 [I] ++++++
2020/05/06 10:46:16 [I] ++++++
2020/05/06 10:46:16 [I] ++++++
2020/05/06 10:46:16 [I] ++++++
2020/05/06 10:46:23 [I] socket disconnect :disconnect
2020/05/06 10:46:23 [I] ++++++
2020/05/06 10:46:23 [I] ++++++
2020/05/06 10:46:23 [I] ++++++
2020/05/06 10:46:23 [I] ++++++
2020/05/06 10:46:23 [I] connect
2020/05/06 10:46:23 [I] ++++++
2020/05/06 10:46:23 [I] ++++++
2020/05/06 10:46:24 [I] ++++++
2020/05/06 10:46:24 [I] ++++++
2020/05/06 10:46:24 [I] ++++++
2020/05/06 10:46:24 [I] ++++++
2020/05/06 10:47:55 [I] socket disconnect :disconnect
2020/05/06 10:47:56 [I] ++++++
2020/05/06 10:47:56 [I] ++++++
2020/05/06 10:47:56 [I] ++++++
2020/05/06 10:47:56 [I] ++++++
2020/05/06 10:47:56 [I] connect
2020/05/06 10:47:56 [I] ++++++
2020/05/06 10:47:56 [I] ++++++
2020/05/06 10:47:56 [I] ++++++
2020/05/06 10:47:56 [I] ++++++
2020/05/06 10:47:56 [I] ++++++
2020/05/06 10:47:56 [I] ++++++
2020/05/06 10:48:14 [I] socket keepConnect :keepAlive
2020/05/06 10:48:18 [I] socket disconnect :disconnect
2020/05/06 10:48:19 [I] ++++++
2020/05/06 10:48:19 [I] ++++++
2020/05/06 10:48:19 [I] ++++++
2020/05/06 10:48:19 [I] ++++++
2020/05/06 10:48:19 [I] connect
2020/05/06 10:48:19 [I] ++++++
2020/05/06 10:48:19 [I] ++++++
2020/05/06 10:48:19 [I] ++++++
2020/05/06 10:48:19 [I] ++++++
2020/05/06 10:48:19 [I] ++++++
2020/05/06 10:48:19 [I] ++++++
2020/05/06 10:48:41 [I] socket disconnect :disconnect
2020/05/06 10:48:44 [I] ++++++
2020/05/06 10:48:44 [I] ++++++
2020/05/06 10:48:44 [I] connect
2020/05/06 10:48:44 [I] ++++++
2020/05/06 10:48:44 [I] ++++++
2020/05/06 10:48:44 [I] ++++++
2020/05/06 10:48:44 [I] ++++++
2020/05/06 10:48:44 [I] ++++++
2020/05/06 10:48:44 [I] ++++++
2020/05/06 10:48:44 [I] ++++++
2020/05/06 10:48:44 [I] ++++++
2020/05/06 10:49:24 [I] socket disconnect :disconnect
2020/05/06 10:49:24 [I] ++++++
2020/05/06 10:49:24 [I] ++++++
2020/05/06 10:49:24 [I] ++++++
2020/05/06 10:49:24 [I] ++++++
2020/05/06 10:49:24 [I] connect
2020/05/06 10:49:24 [I] ++++++
2020/05/06 10:49:24 [I] ++++++
2020/05/06 10:49:25 [I] ++++++
2020/05/06 10:49:25 [I] ++++++
2020/05/06 10:49:25 [I] ++++++
2020/05/06 10:49:25 [I] ++++++
2020/05/06 10:53:27 [I] socket keepConnect :keepAlive
2020/05/06 10:53:45 [I] socket keepConnect :keepAlive
2020/05/06 10:55:24 [I] socket disconnect :disconnect
2020/05/06 10:55:24 [I] ++++++
2020/05/06 10:55:24 [I] ++++++
2020/05/06 10:55:24 [I] ++++++
2020/05/06 10:55:24 [I] ++++++
2020/05/06 10:55:24 [I] connect
2020/05/06 10:55:24 [I] ++++++
2020/05/06 10:55:24 [I] ++++++
2020/05/06 10:55:25 [I] ++++++
2020/05/06 10:55:25 [I] ++++++
2020/05/06 10:55:25 [I] ++++++
2020/05/06 10:55:25 [I] ++++++
2020/05/06 11:15:43 [I] socket keepConnect :keepAlive
2020/05/06 11:16:39 [I] socket keepConnect :keepAlive
2020/05/06 11:17:14 [I] socket keepConnect :keepAlive
2020/05/06 11:26:03 [I] socket keepConnect :keepAlive
2020/05/06 11:26:08 [I] socket keepConnect :keepAlive
2020/05/06 11:26:18 [I] socket keepConnect :keepAlive
2020/05/06 11:33:22 [I] socket disconnect :disconnect
2020/05/06 11:33:23 [I] ++++++
2020/05/06 11:33:23 [I] ++++++
2020/05/06 11:33:23 [I] ++++++
2020/05/06 11:33:23 [I] ++++++
2020/05/06 11:33:23 [I] connect
2020/05/06 11:33:23 [I] ++++++
2020/05/06 11:33:23 [I] ++++++
2020/05/06 11:33:23 [I] ++++++
2020/05/06 11:33:23 [I] ++++++
2020/05/06 11:33:23 [I] ++++++
2020/05/06 11:33:23 [I] ++++++
2020/05/06 11:33:52 [I] socket disconnect :disconnect
2020/05/06 11:33:53 [I] ++++++
2020/05/06 11:33:53 [I] ++++++
2020/05/06 11:33:53 [I] ++++++
2020/05/06 11:33:53 [I] ++++++
2020/05/06 11:33:53 [I] connect
2020/05/06 11:33:53 [I] ++++++
2020/05/06 11:33:53 [I] ++++++
2020/05/06 11:33:53 [I] ++++++
2020/05/06 11:33:53 [I] ++++++
2020/05/06 11:33:53 [I] ++++++
2020/05/06 11:33:53 [I] ++++++
2020/05/06 11:34:03 [I] socket disconnect :disconnect
2020/05/06 11:34:04 [I] ++++++
2020/05/06 11:34:04 [I] ++++++
2020/05/06 11:34:04 [I] ++++++
2020/05/06 11:34:04 [I] ++++++
2020/05/06 11:34:04 [I] connect
2020/05/06 11:34:04 [I] ++++++
2020/05/06 11:34:04 [I] ++++++
2020/05/06 11:34:04 [I] ++++++
2020/05/06 11:34:04 [I] ++++++
2020/05/06 11:34:04 [I] ++++++
2020/05/06 11:34:04 [I] ++++++
2020/05/06 11:34:16 [I] socket disconnect :disconnect
2020/05/06 11:34:31 [I] ++++++
2020/05/06 11:34:31 [I] ++++++
2020/05/06 11:34:31 [I] ++++++
2020/05/06 11:34:31 [I] ++++++
2020/05/06 11:34:31 [I] connect
2020/05/06 11:34:31 [I] ++++++
2020/05/06 11:34:31 [I] ++++++
2020/05/06 11:34:31 [I] ++++++
2020/05/06 11:34:31 [I] ++++++
2020/05/06 11:34:31 [I] ++++++
2020/05/06 11:34:32 [I] ++++++
2020/05/06 11:34:48 [I] socket disconnect :disconnect
2020/05/06 11:34:49 [I] ++++++
2020/05/06 11:34:49 [I] ++++++
2020/05/06 11:34:49 [I] ++++++
2020/05/06 11:34:49 [I] ++++++
2020/05/06 11:34:49 [I] connect
2020/05/06 11:34:49 [I] ++++++
2020/05/06 11:34:49 [I] ++++++
2020/05/06 11:34:49 [I] ++++++
2020/05/06 11:34:49 [I] ++++++
2020/05/06 11:34:49 [I] ++++++
2020/05/06 11:34:49 [I] ++++++
2020/05/06 11:36:16 [I] socket disconnect :disconnect
2020/05/06 11:36:18 [I] ++++++
2020/05/06 11:36:18 [I] ++++++
2020/05/06 11:36:18 [I] ++++++
2020/05/06 11:36:18 [I] ++++++
2020/05/06 11:36:18 [I] connect
2020/05/06 11:36:18 [I] ++++++
2020/05/06 11:36:18 [I] ++++++
2020/05/06 11:36:18 [I] ++++++
2020/05/06 11:36:18 [I] ++++++
2020/05/06 11:36:18 [I] ++++++
2020/05/06 11:36:19 [I] ++++++
2020/05/06 11:44:49 [I] socket keepConnect :keepAlive
2020/05/06 11:45:10 [I] socket keepConnect :keepAlive
2020/05/06 11:45:22 [I] socket keepConnect :keepAlive
2020/05/06 11:45:28 [I] socket keepConnect :keepAlive
2020/05/06 11:45:35 [I] socket keepConnect :keepAlive
2020/05/06 11:46:16 [I] socket keepConnect :keepAlive
2020/05/06 11:46:23 [I] socket keepConnect :keepAlive
2020/05/06 11:47:56 [I] socket keepConnect :keepAlive
2020/05/06 11:48:14 [I] socket keepConnect :keepAlive
2020/05/06 11:48:19 [I] socket keepConnect :keepAlive
2020/05/06 11:48:44 [I] socket keepConnect :keepAlive
2020/05/06 11:49:24 [I] socket keepConnect :keepAlive
2020/05/06 11:53:27 [I] socket keepConnect :keepAlive
2020/05/06 11:53:45 [I] socket keepConnect :keepAlive
2020/05/06 11:55:24 [I] socket keepConnect :keepAlive
2020/05/06 12:15:43 [I] socket keepConnect :keepAlive
2020/05/06 12:16:39 [I] socket keepConnect :keepAlive
2020/05/06 12:17:14 [I] socket keepConnect :keepAlive
2020/05/06 12:26:03 [I] socket keepConnect :keepAlive
2020/05/06 12:26:08 [I] socket keepConnect :keepAlive
2020/05/06 12:26:18 [I] socket keepConnect :keepAlive
2020/05/06 12:33:23 [I] socket keepConnect :keepAlive
2020/05/06 12:33:53 [I] socket keepConnect :keepAlive
2020/05/06 12:34:04 [I] socket keepConnect :keepAlive
2020/05/06 12:34:31 [I] socket keepConnect :keepAlive
2020/05/06 12:34:49 [I] socket keepConnect :keepAlive
2020/05/06 12:36:18 [I] socket keepConnect :keepAlive
2020/05/06 12:44:49 [I] socket keepConnect :keepAlive
2020/05/06 12:45:10 [I] socket keepConnect :keepAlive
2020/05/06 12:45:22 [I] socket keepConnect :keepAlive
2020/05/06 12:45:28 [I] socket keepConnect :keepAlive
2020/05/06 12:45:35 [I] socket keepConnect :keepAlive
2020/05/06 12:46:16 [I] socket keepConnect :keepAlive
2020/05/06 12:46:23 [I] socket keepConnect :keepAlive
2020/05/06 12:47:56 [I] socket keepConnect :keepAlive
2020/05/06 12:48:14 [I] socket keepConnect :keepAlive
2020/05/06 12:48:19 [I] socket keepConnect :keepAlive
2020/05/06 12:48:44 [I] socket keepConnect :keepAlive
2020/05/06 12:49:24 [I] socket keepConnect :keepAlive
2020/05/06 12:53:27 [I] socket keepConnect :keepAlive
2020/05/06 12:53:45 [I] socket keepConnect :keepAlive
2020/05/06 12:55:24 [I] socket keepConnect :keepAlive
2020/05/06 13:15:43 [I] socket keepConnect :keepAlive
2020/05/06 13:16:39 [I] socket keepConnect :keepAlive
2020/05/06 13:17:14 [I] socket keepConnect :keepAlive
2020/05/06 13:23:37 [I] socket disconnect :disconnect
2020/05/06 13:23:38 [I] ++++++
2020/05/06 13:23:38 [I] ++++++
2020/05/06 13:23:38 [I] ++++++
2020/05/06 13:23:38 [I] ++++++
2020/05/06 13:23:38 [I] connect
2020/05/06 13:23:38 [I] ++++++
2020/05/06 13:23:38 [I] ++++++
2020/05/06 13:23:38 [I] ++++++
2020/05/06 13:23:38 [I] ++++++
2020/05/06 13:23:38 [I] ++++++
2020/05/06 13:23:38 [I] ++++++
2020/05/06 13:26:03 [I] socket keepConnect :keepAlive
2020/05/06 13:26:08 [I] socket keepConnect :keepAlive
2020/05/06 13:26:18 [I] socket keepConnect :keepAlive
2020/05/06 13:33:23 [I] socket keepConnect :keepAlive
2020/05/06 13:33:53 [I] socket keepConnect :keepAlive
2020/05/06 13:34:04 [I] socket keepConnect :keepAlive
2020/05/06 13:34:31 [I] socket keepConnect :keepAlive
2020/05/06 13:34:49 [I] socket keepConnect :keepAlive
2020/05/06 13:36:18 [I] socket keepConnect :keepAlive
2020/05/06 13:44:49 [I] socket keepConnect :keepAlive
2020/05/06 13:45:10 [I] socket keepConnect :keepAlive
2020/05/06 13:45:22 [I] socket keepConnect :keepAlive
2020/05/06 13:45:28 [I] socket keepConnect :keepAlive
2020/05/06 13:45:35 [I] socket keepConnect :keepAlive
2020/05/06 13:46:16 [I] socket keepConnect :keepAlive
2020/05/06 13:46:23 [I] socket keepConnect :keepAlive
2020/05/06 13:47:56 [I] socket keepConnect :keepAlive
2020/05/06 13:48:14 [I] socket keepConnect :keepAlive
2020/05/06 13:48:19 [I] socket keepConnect :keepAlive
2020/05/06 13:48:44 [I] socket keepConnect :keepAlive
2020/05/06 13:49:24 [I] socket keepConnect :keepAlive
2020/05/06 13:53:27 [I] socket keepConnect :keepAlive
2020/05/06 13:53:45 [I] socket keepConnect :keepAlive
2020/05/06 13:55:24 [I] socket keepConnect :keepAlive
2020/05/06 14:14:01 [I] socket disconnect :disconnect
2020/05/06 14:14:02 [I] ++++++
2020/05/06 14:14:02 [I] ++++++
2020/05/06 14:14:02 [I] ++++++
2020/05/06 14:14:02 [I] ++++++
2020/05/06 14:14:02 [I] connect
2020/05/06 14:14:02 [I] ++++++
2020/05/06 14:14:02 [I] ++++++
2020/05/06 14:14:02 [I] ++++++
2020/05/06 14:14:02 [I] ++++++
2020/05/06 14:14:02 [I] ++++++
2020/05/06 14:14:03 [I] ++++++
2020/05/06 14:15:00 [I] socket disconnect :disconnect
2020/05/06 14:15:01 [I] ++++++
2020/05/06 14:15:01 [I] ++++++
2020/05/06 14:15:01 [I] ++++++
2020/05/06 14:15:01 [I] ++++++
2020/05/06 14:15:01 [I] connect
2020/05/06 14:15:01 [I] ++++++
2020/05/06 14:15:01 [I] ++++++
2020/05/06 14:15:02 [I] ++++++
2020/05/06 14:15:02 [I] ++++++
2020/05/06 14:15:02 [I] ++++++
2020/05/06 14:15:02 [I] ++++++
2020/05/06 14:15:43 [I] socket keepConnect :keepAlive
2020/05/06 14:16:39 [I] socket keepConnect :keepAlive
2020/05/06 14:17:13 [I] socket disconnect :disconnect
2020/05/06 14:17:14 [I] ++++++
2020/05/06 14:17:14 [I] ++++++
2020/05/06 14:17:14 [I] ++++++
2020/05/06 14:17:14 [I] ++++++
2020/05/06 14:17:14 [I] connect
2020/05/06 14:17:14 [I] ++++++
2020/05/06 14:17:14 [I] ++++++
2020/05/06 14:17:14 [I] ++++++
2020/05/06 14:17:14 [I] ++++++
2020/05/06 14:17:14 [I] ++++++
2020/05/06 14:17:14 [I] socket keepConnect :keepAlive
2020/05/06 14:17:21 [I] socket disconnect :disconnect
2020/05/06 14:17:22 [I] ++++++
2020/05/06 14:17:22 [I] ++++++
2020/05/06 14:17:22 [I] ++++++
2020/05/06 14:17:22 [I] ++++++
2020/05/06 14:17:22 [I] connect
2020/05/06 14:17:22 [I] ++++++
2020/05/06 14:17:22 [I] ++++++
2020/05/06 14:17:22 [I] ++++++
2020/05/06 14:17:22 [I] ++++++
2020/05/06 14:17:22 [I] ++++++
2020/05/06 14:17:22 [I] ++++++
2020/05/06 14:20:58 [I] socket disconnect :disconnect
2020/05/06 14:20:59 [I] ++++++
2020/05/06 14:20:59 [I] ++++++
2020/05/06 14:20:59 [I] ++++++
2020/05/06 14:20:59 [I] ++++++
2020/05/06 14:20:59 [I] connect
2020/05/06 14:20:59 [I] ++++++
2020/05/06 14:20:59 [I] ++++++
2020/05/06 14:20:59 [I] ++++++
2020/05/06 14:20:59 [I] ++++++
2020/05/06 14:20:59 [I] ++++++
2020/05/06 14:20:59 [I] ++++++
2020/05/06 14:23:38 [I] socket keepConnect :keepAlive
2020/05/06 14:24:03 [I] socket disconnect :disconnect
2020/05/06 14:24:03 [I] socket disconnect :disconnect
2020/05/06 14:24:03 [I] ++++++
2020/05/06 14:24:03 [I] ++++++
2020/05/06 14:24:03 [I] ++++++
2020/05/06 14:24:03 [I] ++++++
2020/05/06 14:24:03 [I] ++++++
2020/05/06 14:24:05 [I] ++++++
2020/05/06 14:24:05 [I] ++++++
2020/05/06 14:24:05 [I] ++++++
2020/05/06 14:24:05 [I] connect
2020/05/06 14:24:05 [I] ++++++
2020/05/06 14:24:05 [I] ++++++
2020/05/06 14:24:05 [I] ++++++
2020/05/06 14:24:06 [I] ++++++
2020/05/06 14:24:06 [I] ++++++
2020/05/06 14:24:06 [I] ++++++
2020/05/06 14:24:06 [I] socket disconnect :disconnect
2020/05/06 14:24:07 [I] ++++++
2020/05/06 14:24:07 [I] ++++++
2020/05/06 14:24:07 [I] ++++++
2020/05/06 14:24:07 [I] ++++++
2020/05/06 14:24:07 [I] connect
2020/05/06 14:24:07 [I] ++++++
2020/05/06 14:24:07 [I] ++++++
2020/05/06 14:24:07 [I] ++++++
2020/05/06 14:24:07 [I] ++++++
2020/05/06 14:24:07 [I] ++++++
2020/05/06 14:24:07 [I] ++++++
2020/05/06 14:24:10 [I] socket disconnect :disconnect
2020/05/06 14:24:11 [I] ++++++
2020/05/06 14:24:11 [I] ++++++
2020/05/06 14:24:11 [I] ++++++
2020/05/06 14:24:11 [I] ++++++
2020/05/06 14:24:11 [I] connect
2020/05/06 14:24:11 [I] ++++++
2020/05/06 14:24:11 [I] ++++++
2020/05/06 14:24:11 [I] ++++++
2020/05/06 14:24:11 [I] ++++++
2020/05/06 14:24:11 [I] ++++++
2020/05/06 14:24:11 [I] ++++++
2020/05/06 14:26:03 [I] socket keepConnect :keepAlive
2020/05/06 14:26:08 [I] socket keepConnect :keepAlive
2020/05/06 14:26:18 [I] socket keepConnect :keepAlive
2020/05/06 14:28:42 [I] socket disconnect :disconnect
2020/05/06 14:28:42 [I] socket disconnect :disconnect
2020/05/06 14:28:42 [I] ++++++
2020/05/06 14:28:42 [I] ++++++
2020/05/06 14:28:42 [I] ++++++
2020/05/06 14:28:42 [I] ++++++
2020/05/06 14:28:42 [I] ++++++
2020/05/06 14:28:46 [I] ++++++
2020/05/06 14:28:46 [I] ++++++
2020/05/06 14:28:46 [I] ++++++
2020/05/06 14:28:46 [I] ++++++
2020/05/06 14:28:46 [I] connect
2020/05/06 14:28:46 [I] ++++++
2020/05/06 14:28:46 [I] ++++++
2020/05/06 14:28:46 [I] ++++++
2020/05/06 14:28:46 [I] ++++++
2020/05/06 14:28:46 [I] ++++++
2020/05/06 14:28:46 [I] ++++++
2020/05/06 14:30:28 [I] socket disconnect :disconnect
2020/05/06 14:30:29 [I] ++++++
2020/05/06 14:30:29 [I] ++++++
2020/05/06 14:30:29 [I] ++++++
2020/05/06 14:30:29 [I] ++++++
2020/05/06 14:30:29 [I] connect
2020/05/06 14:30:29 [I] ++++++
2020/05/06 14:30:29 [I] ++++++
2020/05/06 14:30:29 [I] ++++++
2020/05/06 14:30:29 [I] ++++++
2020/05/06 14:30:29 [I] ++++++
2020/05/06 14:30:29 [I] ++++++
2020/05/06 14:33:23 [I] socket keepConnect :keepAlive
2020/05/06 14:33:53 [I] socket keepConnect :keepAlive
2020/05/06 14:33:58 [I] socket disconnect :disconnect
2020/05/06 14:33:59 [I] ++++++
2020/05/06 14:33:59 [I] ++++++
2020/05/06 14:33:59 [I] ++++++
2020/05/06 14:33:59 [I] ++++++
2020/05/06 14:33:59 [I] connect
2020/05/06 14:33:59 [I] ++++++
2020/05/06 14:33:59 [I] ++++++
2020/05/06 14:33:59 [I] ++++++
2020/05/06 14:33:59 [I] ++++++
2020/05/06 14:33:59 [I] ++++++
2020/05/06 14:33:59 [I] ++++++
2020/05/06 14:34:04 [I] socket keepConnect :keepAlive
2020/05/06 14:34:30 [I] socket disconnect :disconnect
2020/05/06 14:34:31 [I] ++++++
2020/05/06 14:34:31 [I] ++++++
2020/05/06 14:34:31 [I] ++++++
2020/05/06 14:34:31 [I] ++++++
2020/05/06 14:34:31 [I] connect
2020/05/06 14:34:31 [I] ++++++
2020/05/06 14:34:31 [I] ++++++
2020/05/06 14:34:31 [I] socket keepConnect :keepAlive
2020/05/06 14:34:31 [I] ++++++
2020/05/06 14:34:31 [I] ++++++
2020/05/06 14:34:31 [I] ++++++
2020/05/06 14:34:31 [I] ++++++
2020/05/06 14:34:49 [I] socket keepConnect :keepAlive
2020/05/06 14:36:18 [I] socket keepConnect :keepAlive
2020/05/06 14:36:33 [I] socket disconnect :disconnect
2020/05/06 14:36:34 [I] ++++++
2020/05/06 14:36:34 [I] ++++++
2020/05/06 14:36:34 [I] ++++++
2020/05/06 14:36:34 [I] ++++++
2020/05/06 14:36:34 [I] connect
2020/05/06 14:36:34 [I] ++++++
2020/05/06 14:36:34 [I] ++++++
2020/05/06 14:36:34 [I] ++++++
2020/05/06 14:36:34 [I] ++++++
2020/05/06 14:36:34 [I] ++++++
2020/05/06 14:36:34 [I] ++++++
2020/05/06 14:36:37 [I] socket disconnect :disconnect
2020/05/06 14:36:37 [I] ++++++
2020/05/06 14:36:37 [I] ++++++
2020/05/06 14:36:37 [I] ++++++
2020/05/06 14:36:37 [I] ++++++
2020/05/06 14:36:37 [I] connect
2020/05/06 14:36:37 [I] ++++++
2020/05/06 14:36:37 [I] ++++++
2020/05/06 14:36:38 [I] ++++++
2020/05/06 14:36:38 [I] ++++++
2020/05/06 14:36:38 [I] ++++++
2020/05/06 14:36:38 [I] ++++++
2020/05/06 14:44:49 [I] socket keepConnect :keepAlive
2020/05/06 14:45:10 [I] socket keepConnect :keepAlive
2020/05/06 14:45:22 [I] socket keepConnect :keepAlive
2020/05/06 14:45:28 [I] socket keepConnect :keepAlive
2020/05/06 14:45:35 [I] socket keepConnect :keepAlive
2020/05/06 14:46:16 [I] socket keepConnect :keepAlive
2020/05/06 14:46:23 [I] socket keepConnect :keepAlive
2020/05/06 14:47:56 [I] socket keepConnect :keepAlive
2020/05/06 14:48:14 [I] socket keepConnect :keepAlive
2020/05/06 14:48:19 [I] socket keepConnect :keepAlive
2020/05/06 14:48:44 [I] socket keepConnect :keepAlive
2020/05/06 14:48:50 [I] socket disconnect :disconnect
2020/05/06 14:48:50 [I] socket disconnect :disconnect
2020/05/06 14:48:50 [I] ++++++
2020/05/06 14:48:50 [I] ++++++
2020/05/06 14:48:50 [I] ++++++
2020/05/06 14:48:50 [I] ++++++
2020/05/06 14:48:50 [I] ++++++
2020/05/06 14:48:59 [I] ++++++
2020/05/06 14:48:59 [I] ++++++
2020/05/06 14:48:59 [I] ++++++
2020/05/06 14:48:59 [I] connect
2020/05/06 14:48:59 [I] ++++++
2020/05/06 14:48:59 [I] ++++++
2020/05/06 14:48:59 [I] ++++++
2020/05/06 14:49:00 [I] ++++++
2020/05/06 14:49:00 [I] ++++++
2020/05/06 14:49:00 [I] ++++++
2020/05/06 14:49:05 [I] socket disconnect :disconnect
2020/05/06 14:49:06 [I] ++++++
2020/05/06 14:49:06 [I] ++++++
2020/05/06 14:49:06 [I] ++++++
2020/05/06 14:49:06 [I] ++++++
2020/05/06 14:49:06 [I] connect
2020/05/06 14:49:06 [I] ++++++
2020/05/06 14:49:06 [I] ++++++
2020/05/06 14:49:07 [I] ++++++
2020/05/06 14:49:07 [I] ++++++
2020/05/06 14:49:07 [I] ++++++
2020/05/06 14:49:07 [I] ++++++
2020/05/06 14:49:07 [I] connect
2020/05/06 14:49:07 [I] ++++++
2020/05/06 14:49:07 [I] ++++++
2020/05/06 14:49:07 [I] ++++++
2020/05/06 14:49:07 [I] ++++++
2020/05/06 14:49:07 [I] ++++++
2020/05/06 14:49:07 [I] ++++++
2020/05/06 14:49:24 [I] socket keepConnect :keepAlive
2020/05/06 14:50:06 [I] socket disconnect :disconnect
2020/05/06 14:50:33 [I] socket disconnect :disconnect
2020/05/06 14:50:33 [I] socket disconnect :disconnect
2020/05/06 14:50:33 [I] ++++++
2020/05/06 14:50:33 [I] ++++++
2020/05/06 14:50:33 [I] ++++++
2020/05/06 14:50:33 [I] ++++++
2020/05/06 14:50:33 [I] ++++++
2020/05/06 14:50:36 [I] ++++++
2020/05/06 14:50:36 [I] ++++++
2020/05/06 14:50:36 [I] ++++++
2020/05/06 14:50:36 [I] connect
2020/05/06 14:50:36 [I] ++++++
2020/05/06 14:50:36 [I] ++++++
2020/05/06 14:50:36 [I] ++++++
2020/05/06 14:50:36 [I] ++++++
2020/05/06 14:50:36 [I] ++++++
2020/05/06 14:50:36 [I] ++++++
2020/05/06 14:50:37 [I] socket disconnect :disconnect
2020/05/06 14:50:38 [I] ++++++
2020/05/06 14:50:38 [I] ++++++
2020/05/06 14:50:38 [I] ++++++
2020/05/06 14:50:38 [I] ++++++
2020/05/06 14:50:38 [I] connect
2020/05/06 14:50:38 [I] ++++++
2020/05/06 14:50:38 [I] ++++++
2020/05/06 14:50:38 [I] ++++++
2020/05/06 14:50:38 [I] ++++++
2020/05/06 14:50:38 [I] ++++++
2020/05/06 14:50:38 [I] ++++++
2020/05/06 14:51:01 [I] ++++++
2020/05/06 14:51:01 [I] ++++++
2020/05/06 14:51:01 [I] ++++++
2020/05/06 14:51:01 [I] ++++++
2020/05/06 14:51:01 [I] ++++++
2020/05/06 14:51:01 [I] ++++++
2020/05/06 14:51:31 [I] ++++++
2020/05/06 14:51:31 [I] ++++++
2020/05/06 14:51:31 [I] ++++++
2020/05/06 14:51:31 [I] ++++++
2020/05/06 14:51:31 [I] ++++++
2020/05/06 14:51:31 [I] ++++++
2020/05/06 14:53:27 [I] socket keepConnect :keepAlive
2020/05/06 14:53:45 [I] socket keepConnect :keepAlive
2020/05/06 14:54:06 [I] socket disconnect :disconnect
2020/05/06 14:54:07 [I] ++++++
2020/05/06 14:54:07 [I] ++++++
2020/05/06 14:54:07 [I] ++++++
2020/05/06 14:54:07 [I] ++++++
2020/05/06 14:54:07 [I] connect
2020/05/06 14:54:07 [I] ++++++
2020/05/06 14:54:07 [I] ++++++
2020/05/06 14:54:07 [I] ++++++
2020/05/06 14:54:07 [I] ++++++
2020/05/06 14:54:07 [I] ++++++
2020/05/06 14:54:07 [I] ++++++
2020/05/06 14:55:02 [I] socket disconnect :disconnect
2020/05/06 14:55:02 [I] ++++++
2020/05/06 14:55:02 [I] ++++++
2020/05/06 14:55:02 [I] ++++++
2020/05/06 14:55:02 [I] ++++++
2020/05/06 14:55:02 [I] connect
2020/05/06 14:55:02 [I] ++++++
2020/05/06 14:55:02 [I] ++++++
2020/05/06 14:55:03 [I] ++++++
2020/05/06 14:55:03 [I] ++++++
2020/05/06 14:55:03 [I] ++++++
2020/05/06 14:55:03 [I] ++++++
2020/05/06 14:55:18 [I] socket disconnect :disconnect
2020/05/06 14:55:19 [I] ++++++
2020/05/06 14:55:19 [I] ++++++
2020/05/06 14:55:19 [I] ++++++
2020/05/06 14:55:19 [I] ++++++
2020/05/06 14:55:19 [I] connect
2020/05/06 14:55:19 [I] ++++++
2020/05/06 14:55:19 [I] ++++++
2020/05/06 14:55:19 [I] ++++++
2020/05/06 14:55:19 [I] ++++++
2020/05/06 14:55:19 [I] ++++++
2020/05/06 14:55:19 [I] ++++++
2020/05/06 14:55:24 [I] socket keepConnect :keepAlive
2020/05/06 14:57:16 [I] socket disconnect :disconnect
2020/05/06 14:57:16 [I] ++++++
2020/05/06 14:57:16 [I] ++++++
2020/05/06 14:57:16 [I] ++++++
2020/05/06 14:57:16 [I] ++++++
2020/05/06 14:57:16 [I] connect
2020/05/06 14:57:16 [I] ++++++
2020/05/06 14:57:16 [I] ++++++
2020/05/06 14:57:17 [I] ++++++
2020/05/06 14:57:17 [I] ++++++
2020/05/06 14:57:17 [I] ++++++
2020/05/06 14:57:17 [I] ++++++
2020/05/06 14:57:39 [I] socket disconnect :disconnect
2020/05/06 14:57:39 [I] socket disconnect :disconnect
2020/05/06 14:57:39 [I] ++++++
2020/05/06 14:57:39 [I] ++++++
2020/05/06 14:57:39 [I] ++++++
2020/05/06 14:57:39 [I] ++++++
2020/05/06 14:57:39 [I] ++++++
2020/05/06 15:03:30 [I] ++++++
2020/05/06 15:03:30 [I] ++++++
2020/05/06 15:03:32 [I] ++++++
2020/05/06 15:03:32 [I] ++++++
2020/05/06 15:03:44 [I] ++++++
2020/05/06 15:03:44 [I] ++++++
2020/05/06 15:03:44 [I] ++++++
2020/05/06 15:03:44 [I] ++++++
2020/05/06 15:03:44 [I] connect
2020/05/06 15:03:44 [I] ++++++
2020/05/06 15:03:44 [I] ++++++
2020/05/06 15:03:45 [I] ++++++
2020/05/06 15:03:45 [I] ++++++
2020/05/06 15:03:45 [I] ++++++
2020/05/06 15:03:45 [I] ++++++
2020/05/06 15:03:51 [I] socket disconnect :disconnect
2020/05/06 15:03:52 [I] ++++++
2020/05/06 15:03:52 [I] ++++++
2020/05/06 15:03:52 [I] ++++++
2020/05/06 15:03:52 [I] ++++++
2020/05/06 15:03:52 [I] connect
2020/05/06 15:03:52 [I] ++++++
2020/05/06 15:03:52 [I] ++++++
2020/05/06 15:03:52 [I] ++++++
2020/05/06 15:03:52 [I] ++++++
2020/05/06 15:03:52 [I] ++++++
2020/05/06 15:03:53 [I] ++++++
2020/05/06 15:04:21 [I] ++++++
2020/05/06 15:04:21 [I] ++++++
2020/05/06 15:04:23 [I] ++++++
2020/05/06 15:04:23 [I] ++++++
2020/05/06 15:04:25 [I] ++++++
2020/05/06 15:04:25 [I] ++++++
2020/05/06 15:04:27 [I] socket disconnect :disconnect
2020/05/06 15:04:28 [I] ++++++
2020/05/06 15:04:28 [I] ++++++
2020/05/06 15:04:28 [I] ++++++
2020/05/06 15:04:28 [I] ++++++
2020/05/06 15:04:28 [I] connect
2020/05/06 15:04:28 [I] ++++++
2020/05/06 15:04:28 [I] ++++++
2020/05/06 15:04:28 [I] ++++++
2020/05/06 15:04:28 [I] ++++++
2020/05/06 15:04:28 [I] ++++++
2020/05/06 15:04:28 [I] ++++++
2020/05/06 15:04:33 [I] ++++++
2020/05/06 15:04:34 [I] ++++++
2020/05/06 15:04:34 [I] ++++++
2020/05/06 15:04:34 [I] ++++++
2020/05/06 15:04:34 [I] ++++++
2020/05/06 15:04:34 [I] ++++++
2020/05/06 15:04:34 [I] ++++++
2020/05/06 15:06:30 [I] socket disconnect :disconnect
2020/05/06 15:06:30 [I] socket disconnect :disconnect
2020/05/06 15:06:30 [I] ++++++
2020/05/06 15:06:30 [I] ++++++
2020/05/06 15:06:30 [I] ++++++
2020/05/06 15:06:30 [I] ++++++
2020/05/06 15:06:30 [I] ++++++
2020/05/06 15:06:36 [I] ++++++
2020/05/06 15:06:36 [I] ++++++
2020/05/06 15:06:36 [I] ++++++
2020/05/06 15:06:36 [I] ++++++
2020/05/06 15:06:36 [I] connect
2020/05/06 15:06:36 [I] ++++++
2020/05/06 15:06:36 [I] ++++++
2020/05/06 15:06:36 [I] ++++++
2020/05/06 15:06:36 [I] ++++++
2020/05/06 15:06:36 [I] ++++++
2020/05/06 15:06:36 [I] ++++++
2020/05/06 15:06:43 [I] ++++++
2020/05/06 15:06:43 [I] ++++++
2020/05/06 15:06:47 [I] ++++++
2020/05/06 15:06:47 [I] ++++++
2020/05/06 15:06:47 [I] ++++++
2020/05/06 15:06:47 [I] ++++++
2020/05/06 15:06:47 [I] ++++++
2020/05/06 15:06:47 [I] ++++++
2020/05/06 15:06:49 [I] ++++++
2020/05/06 15:06:49 [I] ++++++
2020/05/06 15:06:49 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:06:50 [I] ++++++
2020/05/06 15:06:50 [I] ++++++
2020/05/06 15:06:50 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:06:53 [I] ++++++
2020/05/06 15:06:53 [I] ++++++
2020/05/06 15:06:53 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:06:54 [I] ++++++
2020/05/06 15:06:54 [I] ++++++
2020/05/06 15:06:54 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:06:55 [I] ++++++
2020/05/06 15:06:55 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/06 15:06:55 [I] ++++++
2020/05/06 15:06:55 [I] ++++++
2020/05/06 15:06:55 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:06:55 [I] ++++++
2020/05/06 15:06:55 [I] ++++++
2020/05/06 15:06:55 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:06:55 [I] ++++++
2020/05/06 15:06:55 [I] ++++++
2020/05/06 15:06:55 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:06:55 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/06 15:06:55 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=3bc9aa9937d04b798abeceba78344a2a:0) result err:NOAUTH Authentication required.
2020/05/06 15:06:55 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/06 15:06:55 [I] add 第一次建立连接的时候返回所有数据 
2020/05/06 15:06:55 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/06 15:06:55 [socket.go:99 1()] [E] add rotuineName :3bc9aa9937d04b798abeceba78344a2a1588748815 ,singledata :{3bc9aa9937d04b798abeceba78344a2a 0s %!s(*socketio.Socket=0xc0422dc6a0)}
2020/05/06 15:07:16 [I] ++++++
2020/05/06 15:07:16 [I] ++++++
2020/05/06 15:07:16 [getRedis.go:332 GetNewApiData()] [E] The Error url:%!(EXTRA string=123, *url.Error=Get 123: unsupported protocol scheme "")
2020/05/06 15:07:16 [getRedis.go:333 GetNewApiData()] [E] URL地址错误%!(EXTRA <nil>)
2020/05/06 15:07:23 [I] ++++++
2020/05/06 15:07:23 [I] ++++++
2020/05/06 15:07:23 [getRedis.go:332 GetNewApiData()] [E] The Error url:%!(EXTRA string=123, *url.Error=Get 123: unsupported protocol scheme "")
2020/05/06 15:07:23 [getRedis.go:333 GetNewApiData()] [E] URL地址错误%!(EXTRA <nil>)
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [I] ++++++
2020/05/06 15:07:31 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [I] ++++++
2020/05/06 15:07:32 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:33 [I] ++++++
2020/05/06 15:07:33 [I] ++++++
2020/05/06 15:07:33 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:33 [I] ++++++
2020/05/06 15:07:33 [I] ++++++
2020/05/06 15:07:33 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [I] ++++++
2020/05/06 15:07:34 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:35 [I] ++++++
2020/05/06 15:07:35 [I] ++++++
2020/05/06 15:07:35 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:35 [I] ++++++
2020/05/06 15:07:35 [I] ++++++
2020/05/06 15:07:35 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:36 [I] ++++++
2020/05/06 15:07:36 [I] ++++++
2020/05/06 15:07:36 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:36 [I] ++++++
2020/05/06 15:07:36 [I] ++++++
2020/05/06 15:07:36 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [I] ++++++
2020/05/06 15:07:37 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/06 15:14:02 [I] socket keepConnect :keepAlive
2020/05/06 15:15:01 [I] socket keepConnect :keepAlive
2020/05/06 15:15:43 [I] socket keepConnect :keepAlive
2020/05/06 15:16:39 [I] socket keepConnect :keepAlive
2020/05/06 15:17:14 [I] socket keepConnect :keepAlive
2020/05/06 15:17:14 [I] socket keepConnect :keepAlive
2020/05/06 15:17:22 [I] socket keepConnect :keepAlive
2020/05/06 15:20:59 [I] socket keepConnect :keepAlive
2020/05/06 15:21:52 [I] socket disconnect :disconnect
2020/05/06 15:21:52 [I] socket disconnect :disconnect
2020/05/06 15:21:52 [I] ++++++
2020/05/06 15:21:52 [I] ++++++
2020/05/06 15:21:52 [I] ++++++
2020/05/06 15:21:52 [I] ++++++
2020/05/06 15:21:52 [I] ++++++
2020/05/06 15:21:54 [I] 停止 key:3bc9aa9937d04b798abeceba78344a2a , 线程id:3bc9aa9937d04b798abeceba78344a2a1588748815
2020/05/06 15:22:00 [I] ++++++
2020/05/06 15:22:00 [I] ++++++
2020/05/06 15:22:00 [I] ++++++
2020/05/06 15:22:00 [I] ++++++
2020/05/06 15:22:00 [I] connect
2020/05/06 15:22:00 [I] ++++++
2020/05/06 15:22:00 [I] ++++++
2020/05/06 15:22:00 [I] ++++++
2020/05/06 15:22:00 [I] ++++++
2020/05/06 15:22:00 [I] ++++++
2020/05/06 15:22:00 [I] ++++++
2020/05/06 15:23:38 [I] socket keepConnect :keepAlive
2020/05/06 15:24:05 [I] socket keepConnect :keepAlive
2020/05/06 15:24:07 [I] socket keepConnect :keepAlive
2020/05/06 15:24:11 [I] socket keepConnect :keepAlive
2020/05/06 15:26:03 [I] socket keepConnect :keepAlive
2020/05/06 15:26:08 [I] socket keepConnect :keepAlive
2020/05/06 15:26:18 [I] socket keepConnect :keepAlive
2020/05/06 15:28:46 [I] socket keepConnect :keepAlive
2020/05/06 15:30:29 [I] socket keepConnect :keepAlive
2020/05/06 15:33:23 [I] socket keepConnect :keepAlive
2020/05/06 15:33:53 [I] socket keepConnect :keepAlive
2020/05/06 15:33:59 [I] socket keepConnect :keepAlive
2020/05/06 15:34:04 [I] socket keepConnect :keepAlive
2020/05/06 15:34:31 [I] socket keepConnect :keepAlive
2020/05/06 15:34:31 [I] socket keepConnect :keepAlive
2020/05/06 15:34:49 [I] socket keepConnect :keepAlive
2020/05/06 15:36:18 [I] socket keepConnect :keepAlive
2020/05/06 15:36:34 [I] socket keepConnect :keepAlive
2020/05/06 15:36:37 [I] socket keepConnect :keepAlive
2020/05/06 15:44:49 [I] socket keepConnect :keepAlive
2020/05/06 15:45:10 [I] socket keepConnect :keepAlive
2020/05/06 15:45:22 [I] socket keepConnect :keepAlive
2020/05/06 15:45:28 [I] socket keepConnect :keepAlive
2020/05/06 15:45:35 [I] socket keepConnect :keepAlive
2020/05/06 15:46:16 [I] socket keepConnect :keepAlive
2020/05/06 15:46:23 [I] socket keepConnect :keepAlive
2020/05/06 15:47:56 [I] socket keepConnect :keepAlive
2020/05/06 15:48:14 [I] socket keepConnect :keepAlive
2020/05/06 15:48:19 [I] socket keepConnect :keepAlive
2020/05/06 15:48:44 [I] socket keepConnect :keepAlive
2020/05/06 15:48:59 [I] socket keepConnect :keepAlive
2020/05/06 15:49:06 [I] socket keepConnect :keepAlive
2020/05/06 15:49:07 [I] socket keepConnect :keepAlive
2020/05/06 15:49:24 [I] socket keepConnect :keepAlive
2020/05/06 15:50:36 [I] socket keepConnect :keepAlive
2020/05/06 15:50:38 [I] socket keepConnect :keepAlive
2020/05/06 15:53:27 [I] socket keepConnect :keepAlive
2020/05/06 15:53:45 [I] socket keepConnect :keepAlive
2020/05/06 15:54:07 [I] socket keepConnect :keepAlive
2020/05/06 15:55:02 [I] socket keepConnect :keepAlive
2020/05/06 15:55:19 [I] socket keepConnect :keepAlive
2020/05/06 15:55:24 [I] socket keepConnect :keepAlive
2020/05/06 15:57:16 [I] socket keepConnect :keepAlive
2020/05/06 16:03:44 [I] socket keepConnect :keepAlive
2020/05/06 16:03:52 [I] socket keepConnect :keepAlive
2020/05/06 16:04:28 [I] socket keepConnect :keepAlive
2020/05/06 16:06:36 [I] socket keepConnect :keepAlive
2020/05/06 16:14:02 [I] socket keepConnect :keepAlive
2020/05/06 16:15:01 [I] socket keepConnect :keepAlive
2020/05/06 16:15:43 [I] socket keepConnect :keepAlive
2020/05/06 16:16:39 [I] socket keepConnect :keepAlive
2020/05/06 16:17:14 [I] socket keepConnect :keepAlive
2020/05/06 16:17:14 [I] socket keepConnect :keepAlive
2020/05/06 16:17:22 [I] socket keepConnect :keepAlive
2020/05/06 16:19:31 [I] socket disconnect :disconnect
2020/05/06 16:19:32 [I] ++++++
2020/05/06 16:19:32 [I] ++++++
2020/05/06 16:19:32 [I] ++++++
2020/05/06 16:19:32 [I] ++++++
2020/05/06 16:19:32 [I] connect
2020/05/06 16:19:32 [I] ++++++
2020/05/06 16:19:32 [I] ++++++
2020/05/06 16:19:32 [I] ++++++
2020/05/06 16:19:32 [I] ++++++
2020/05/06 16:19:32 [I] ++++++
2020/05/06 16:19:32 [I] ++++++
2020/05/06 16:20:59 [I] socket keepConnect :keepAlive
2020/05/06 16:22:00 [I] socket keepConnect :keepAlive
2020/05/06 16:23:38 [I] socket keepConnect :keepAlive
2020/05/06 16:24:05 [I] socket keepConnect :keepAlive
2020/05/06 16:24:07 [I] socket keepConnect :keepAlive
2020/05/06 16:24:11 [I] socket keepConnect :keepAlive
2020/05/06 16:25:06 [I] socket disconnect :disconnect
2020/05/06 16:25:07 [I] ++++++
2020/05/06 16:25:07 [I] ++++++
2020/05/06 16:25:07 [I] ++++++
2020/05/06 16:25:07 [I] ++++++
2020/05/06 16:25:07 [I] connect
2020/05/06 16:25:07 [I] ++++++
2020/05/06 16:25:07 [I] ++++++
2020/05/06 16:25:08 [I] ++++++
2020/05/06 16:25:08 [I] ++++++
2020/05/06 16:25:08 [I] ++++++
2020/05/06 16:25:08 [I] ++++++
2020/05/06 16:25:24 [I] socket disconnect :disconnect
2020/05/06 16:25:25 [I] ++++++
2020/05/06 16:25:25 [I] ++++++
2020/05/06 16:25:25 [I] ++++++
2020/05/06 16:25:25 [I] ++++++
2020/05/06 16:25:25 [I] connect
2020/05/06 16:25:25 [I] ++++++
2020/05/06 16:25:25 [I] ++++++
2020/05/06 16:25:25 [I] ++++++
2020/05/06 16:25:25 [I] ++++++
2020/05/06 16:25:25 [I] ++++++
2020/05/06 16:25:26 [I] ++++++
2020/05/06 16:26:03 [I] socket keepConnect :keepAlive
2020/05/06 16:26:08 [I] socket keepConnect :keepAlive
2020/05/06 16:26:18 [I] socket keepConnect :keepAlive
2020/05/06 16:28:46 [I] socket keepConnect :keepAlive
2020/05/06 16:30:29 [I] socket keepConnect :keepAlive
2020/05/06 16:31:01 [I] ++++++
2020/05/06 16:31:01 [I] ++++++
2020/05/06 16:31:01 [I] ++++++
2020/05/06 16:31:01 [I] ++++++
2020/05/06 16:31:01 [I] ++++++
2020/05/06 16:31:01 [I] ++++++
2020/05/06 16:31:05 [I] ++++++
2020/05/06 16:31:05 [I] ++++++
2020/05/06 16:31:10 [I] ++++++
2020/05/06 16:31:10 [I] ++++++
2020/05/06 16:31:10 [I] ++++++
2020/05/06 16:31:10 [I] ++++++
2020/05/06 16:31:10 [I] ++++++
2020/05/06 16:31:10 [I] ++++++
2020/05/06 16:33:23 [I] socket keepConnect :keepAlive
2020/05/06 16:33:53 [I] socket keepConnect :keepAlive
2020/05/06 16:33:59 [I] socket keepConnect :keepAlive
2020/05/06 16:34:04 [I] socket keepConnect :keepAlive
2020/05/06 16:34:21 [I] ++++++
2020/05/06 16:34:21 [I] ++++++
2020/05/06 16:34:31 [I] socket keepConnect :keepAlive
2020/05/06 16:34:31 [I] socket keepConnect :keepAlive
2020/05/06 16:34:49 [I] socket keepConnect :keepAlive
2020/05/06 16:36:18 [I] socket keepConnect :keepAlive
2020/05/06 16:36:34 [I] socket keepConnect :keepAlive
2020/05/06 16:36:37 [I] socket keepConnect :keepAlive
2020/05/06 16:44:03 [I] socket disconnect :disconnect
2020/05/06 16:44:04 [I] ++++++
2020/05/06 16:44:04 [I] ++++++
2020/05/06 16:44:04 [I] ++++++
2020/05/06 16:44:04 [I] ++++++
2020/05/06 16:44:04 [I] connect
2020/05/06 16:44:04 [I] ++++++
2020/05/06 16:44:04 [I] ++++++
2020/05/06 16:44:04 [I] ++++++
2020/05/06 16:44:04 [I] ++++++
2020/05/06 16:44:04 [I] ++++++
2020/05/06 16:44:04 [I] ++++++
2020/05/06 16:44:49 [I] socket keepConnect :keepAlive
2020/05/06 16:45:10 [I] socket keepConnect :keepAlive
2020/05/06 16:45:22 [I] socket keepConnect :keepAlive
2020/05/06 16:45:28 [I] socket keepConnect :keepAlive
2020/05/06 16:45:35 [I] socket keepConnect :keepAlive
2020/05/06 16:46:16 [I] socket keepConnect :keepAlive
2020/05/06 16:46:23 [I] socket keepConnect :keepAlive
2020/05/06 16:47:00 [I] socket disconnect :disconnect
2020/05/06 16:47:01 [I] ++++++
2020/05/06 16:47:01 [I] ++++++
2020/05/06 16:47:01 [I] ++++++
2020/05/06 16:47:01 [I] ++++++
2020/05/06 16:47:01 [I] connect
2020/05/06 16:47:01 [I] ++++++
2020/05/06 16:47:01 [I] ++++++
2020/05/06 16:47:01 [I] ++++++
2020/05/06 16:47:01 [I] ++++++
2020/05/06 16:47:01 [I] ++++++
2020/05/06 16:47:01 [I] ++++++
2020/05/06 16:47:43 [I] socket disconnect :disconnect
2020/05/06 16:47:44 [I] ++++++
2020/05/06 16:47:44 [I] ++++++
2020/05/06 16:47:44 [I] ++++++
2020/05/06 16:47:44 [I] ++++++
2020/05/06 16:47:44 [I] connect
2020/05/06 16:47:44 [I] ++++++
2020/05/06 16:47:44 [I] ++++++
2020/05/06 16:47:44 [I] ++++++
2020/05/06 16:47:44 [I] ++++++
2020/05/06 16:47:44 [I] ++++++
2020/05/06 16:47:44 [I] ++++++
2020/05/06 16:47:56 [I] socket keepConnect :keepAlive
2020/05/06 16:48:14 [I] socket keepConnect :keepAlive
2020/05/06 16:48:19 [I] socket keepConnect :keepAlive
2020/05/06 16:48:19 [I] socket disconnect :disconnect
2020/05/06 16:48:20 [I] ++++++
2020/05/06 16:48:20 [I] ++++++
2020/05/06 16:48:20 [I] ++++++
2020/05/06 16:48:20 [I] ++++++
2020/05/06 16:48:20 [I] connect
2020/05/06 16:48:20 [I] ++++++
2020/05/06 16:48:20 [I] ++++++
2020/05/06 16:48:20 [I] ++++++
2020/05/06 16:48:20 [I] ++++++
2020/05/06 16:48:20 [I] ++++++
2020/05/06 16:48:20 [I] ++++++
2020/05/06 16:48:44 [I] socket keepConnect :keepAlive
2020/05/06 16:48:59 [I] socket keepConnect :keepAlive
2020/05/06 16:49:06 [I] socket keepConnect :keepAlive
2020/05/06 16:49:07 [I] socket keepConnect :keepAlive
2020/05/06 16:49:24 [I] socket keepConnect :keepAlive
2020/05/06 16:50:36 [I] socket keepConnect :keepAlive
2020/05/06 16:50:38 [I] socket keepConnect :keepAlive
2020/05/06 16:51:02 [I] socket disconnect :disconnect
2020/05/06 16:51:03 [I] ++++++
2020/05/06 16:51:03 [I] ++++++
2020/05/06 16:51:03 [I] ++++++
2020/05/06 16:51:03 [I] ++++++
2020/05/06 16:51:03 [I] connect
2020/05/06 16:51:03 [I] ++++++
2020/05/06 16:51:03 [I] ++++++
2020/05/06 16:51:03 [I] ++++++
2020/05/06 16:51:03 [I] ++++++
2020/05/06 16:51:03 [I] ++++++
2020/05/06 16:51:03 [I] ++++++
2020/05/06 16:53:27 [I] socket keepConnect :keepAlive
2020/05/06 16:53:29 [I] socket disconnect :disconnect
2020/05/06 16:53:29 [I] ++++++
2020/05/06 16:53:29 [I] ++++++
2020/05/06 16:53:29 [I] ++++++
2020/05/06 16:53:29 [I] ++++++
2020/05/06 16:53:29 [I] connect
2020/05/06 16:53:29 [I] ++++++
2020/05/06 16:53:29 [I] ++++++
2020/05/06 16:53:29 [I] ++++++
2020/05/06 16:53:29 [I] ++++++
2020/05/06 16:53:29 [I] ++++++
2020/05/06 16:53:30 [I] ++++++
2020/05/06 16:53:45 [I] socket keepConnect :keepAlive
2020/05/06 16:54:07 [I] socket keepConnect :keepAlive
2020/05/06 16:55:02 [I] socket keepConnect :keepAlive
2020/05/06 16:55:19 [I] socket keepConnect :keepAlive
2020/05/06 16:55:24 [I] socket keepConnect :keepAlive
2020/05/06 16:55:52 [I] socket disconnect :disconnect
2020/05/06 16:55:52 [I] ++++++
2020/05/06 16:55:52 [I] ++++++
2020/05/06 16:55:52 [I] ++++++
2020/05/06 16:55:52 [I] ++++++
2020/05/06 16:55:52 [I] connect
2020/05/06 16:55:52 [I] ++++++
2020/05/06 16:55:52 [I] ++++++
2020/05/06 16:55:52 [I] ++++++
2020/05/06 16:55:52 [I] ++++++
2020/05/06 16:55:52 [I] ++++++
2020/05/06 16:55:53 [I] ++++++
2020/05/06 16:56:53 [I] socket disconnect :disconnect
2020/05/06 16:56:54 [I] ++++++
2020/05/06 16:56:54 [I] ++++++
2020/05/06 16:56:54 [I] ++++++
2020/05/06 16:56:54 [I] ++++++
2020/05/06 16:56:54 [I] connect
2020/05/06 16:56:54 [I] ++++++
2020/05/06 16:56:54 [I] ++++++
2020/05/06 16:56:54 [I] ++++++
2020/05/06 16:56:54 [I] ++++++
2020/05/06 16:56:54 [I] ++++++
2020/05/06 16:56:54 [I] ++++++
2020/05/06 16:57:16 [I] socket keepConnect :keepAlive
2020/05/06 17:03:44 [I] socket keepConnect :keepAlive
2020/05/06 17:03:52 [I] socket keepConnect :keepAlive
2020/05/06 17:04:28 [I] socket keepConnect :keepAlive
2020/05/06 17:06:36 [I] socket keepConnect :keepAlive
2020/05/06 17:14:02 [I] socket keepConnect :keepAlive
2020/05/06 17:15:01 [I] socket keepConnect :keepAlive
2020/05/06 17:15:43 [I] socket keepConnect :keepAlive
2020/05/06 17:16:39 [I] socket keepConnect :keepAlive
2020/05/06 17:17:14 [I] socket keepConnect :keepAlive
2020/05/06 17:17:14 [I] socket keepConnect :keepAlive
2020/05/06 17:17:22 [I] socket keepConnect :keepAlive
2020/05/06 17:19:32 [I] socket keepConnect :keepAlive
2020/05/06 17:20:59 [I] socket keepConnect :keepAlive
2020/05/06 17:22:00 [I] socket keepConnect :keepAlive
2020/05/06 17:23:38 [I] socket keepConnect :keepAlive
2020/05/06 17:24:05 [I] socket keepConnect :keepAlive
2020/05/06 17:24:07 [I] socket keepConnect :keepAlive
2020/05/06 17:24:11 [I] socket keepConnect :keepAlive
2020/05/06 17:25:07 [I] socket keepConnect :keepAlive
2020/05/06 17:25:25 [I] socket keepConnect :keepAlive
2020/05/06 17:26:03 [I] socket keepConnect :keepAlive
2020/05/06 17:26:08 [I] socket keepConnect :keepAlive
2020/05/06 17:26:18 [I] socket keepConnect :keepAlive
2020/05/06 17:28:46 [I] socket keepConnect :keepAlive
2020/05/06 17:30:29 [I] socket keepConnect :keepAlive
2020/05/06 17:33:23 [I] socket keepConnect :keepAlive
2020/05/06 17:33:53 [I] socket keepConnect :keepAlive
2020/05/06 17:33:59 [I] socket keepConnect :keepAlive
2020/05/06 17:34:04 [I] socket keepConnect :keepAlive
2020/05/06 17:34:31 [I] socket keepConnect :keepAlive
2020/05/06 17:34:31 [I] socket keepConnect :keepAlive
2020/05/06 17:34:49 [I] socket keepConnect :keepAlive
2020/05/06 17:35:06 [I] socket disconnect :disconnect
2020/05/06 17:35:07 [I] ++++++
2020/05/06 17:35:07 [I] ++++++
2020/05/06 17:35:07 [I] ++++++
2020/05/06 17:35:07 [I] ++++++
2020/05/06 17:35:07 [I] connect
2020/05/06 17:35:07 [I] ++++++
2020/05/06 17:35:07 [I] ++++++
2020/05/06 17:35:07 [I] ++++++
2020/05/06 17:35:07 [I] ++++++
2020/05/06 17:35:07 [I] ++++++
2020/05/06 17:35:07 [I] ++++++
2020/05/06 17:36:18 [I] socket keepConnect :keepAlive
2020/05/06 17:36:34 [I] socket keepConnect :keepAlive
2020/05/06 17:36:37 [I] socket keepConnect :keepAlive
2020/05/06 17:44:04 [I] socket keepConnect :keepAlive
2020/05/06 17:44:49 [I] socket keepConnect :keepAlive
2020/05/06 17:45:10 [I] socket keepConnect :keepAlive
2020/05/06 17:45:22 [I] socket keepConnect :keepAlive
2020/05/06 17:45:28 [I] socket keepConnect :keepAlive
2020/05/06 17:45:35 [I] socket keepConnect :keepAlive
2020/05/06 17:46:16 [I] socket keepConnect :keepAlive
2020/05/06 17:46:23 [I] socket keepConnect :keepAlive
2020/05/06 17:47:01 [I] socket keepConnect :keepAlive
2020/05/06 17:47:44 [I] socket keepConnect :keepAlive
2020/05/06 17:47:56 [I] socket keepConnect :keepAlive
2020/05/06 17:48:14 [I] socket keepConnect :keepAlive
2020/05/06 17:48:19 [I] socket keepConnect :keepAlive
2020/05/06 17:48:20 [I] socket keepConnect :keepAlive
2020/05/06 17:48:44 [I] socket keepConnect :keepAlive
2020/05/06 17:48:59 [I] socket keepConnect :keepAlive
2020/05/06 17:49:06 [I] socket keepConnect :keepAlive
2020/05/06 17:49:07 [I] socket keepConnect :keepAlive
2020/05/06 17:49:24 [I] socket keepConnect :keepAlive
2020/05/06 17:50:36 [I] socket keepConnect :keepAlive
2020/05/06 17:50:38 [I] socket keepConnect :keepAlive
2020/05/06 17:51:03 [I] socket keepConnect :keepAlive
2020/05/06 17:53:27 [I] socket keepConnect :keepAlive
2020/05/06 17:53:29 [I] socket keepConnect :keepAlive
2020/05/06 17:53:45 [I] socket keepConnect :keepAlive
2020/05/06 17:54:07 [I] socket keepConnect :keepAlive
2020/05/06 17:55:02 [I] socket keepConnect :keepAlive
2020/05/06 17:55:19 [I] socket keepConnect :keepAlive
2020/05/06 17:55:24 [I] socket keepConnect :keepAlive
2020/05/06 17:55:52 [I] socket keepConnect :keepAlive
2020/05/06 17:56:54 [I] socket keepConnect :keepAlive
2020/05/06 17:57:16 [I] socket keepConnect :keepAlive
2020/05/06 18:03:44 [I] socket keepConnect :keepAlive
2020/05/06 18:03:52 [I] socket keepConnect :keepAlive
2020/05/06 18:04:28 [I] socket keepConnect :keepAlive
2020/05/06 18:06:36 [I] socket keepConnect :keepAlive
2020/05/06 18:14:02 [I] socket keepConnect :keepAlive
2020/05/06 18:15:01 [I] socket keepConnect :keepAlive
2020/05/06 18:15:43 [I] socket keepConnect :keepAlive
2020/05/06 18:16:39 [I] socket keepConnect :keepAlive
2020/05/06 18:17:14 [I] socket keepConnect :keepAlive
2020/05/06 18:17:14 [I] socket keepConnect :keepAlive
2020/05/06 18:17:22 [I] socket keepConnect :keepAlive
2020/05/06 18:19:32 [I] socket keepConnect :keepAlive
2020/05/06 18:20:59 [I] socket keepConnect :keepAlive
2020/05/06 18:22:00 [I] socket keepConnect :keepAlive
2020/05/06 18:23:38 [I] socket keepConnect :keepAlive
2020/05/06 18:24:05 [I] socket keepConnect :keepAlive
2020/05/06 18:24:07 [I] socket keepConnect :keepAlive
2020/05/06 18:24:11 [I] socket keepConnect :keepAlive
2020/05/06 18:25:07 [I] socket keepConnect :keepAlive
2020/05/06 18:25:25 [I] socket keepConnect :keepAlive
2020/05/06 18:26:03 [I] socket keepConnect :keepAlive
2020/05/06 18:26:08 [I] socket keepConnect :keepAlive
2020/05/06 18:26:18 [I] socket keepConnect :keepAlive
2020/05/06 18:28:46 [I] socket keepConnect :keepAlive
2020/05/06 18:30:29 [I] socket keepConnect :keepAlive
2020/05/06 18:33:23 [I] socket keepConnect :keepAlive
2020/05/06 18:33:53 [I] socket keepConnect :keepAlive
2020/05/06 18:33:59 [I] socket keepConnect :keepAlive
2020/05/06 18:34:04 [I] socket keepConnect :keepAlive
2020/05/06 18:34:31 [I] socket keepConnect :keepAlive
2020/05/06 18:34:31 [I] socket keepConnect :keepAlive
2020/05/06 18:34:49 [I] socket keepConnect :keepAlive
2020/05/06 18:35:07 [I] socket keepConnect :keepAlive
2020/05/06 18:36:18 [I] socket keepConnect :keepAlive
2020/05/06 18:36:34 [I] socket keepConnect :keepAlive
2020/05/06 18:36:37 [I] socket keepConnect :keepAlive
2020/05/06 18:44:04 [I] socket keepConnect :keepAlive
2020/05/06 18:44:49 [I] socket keepConnect :keepAlive
2020/05/06 18:45:10 [I] socket keepConnect :keepAlive
2020/05/06 18:45:22 [I] socket keepConnect :keepAlive
2020/05/06 18:45:28 [I] socket keepConnect :keepAlive
2020/05/06 18:45:35 [I] socket keepConnect :keepAlive
2020/05/06 18:46:16 [I] socket keepConnect :keepAlive
2020/05/06 18:46:23 [I] socket keepConnect :keepAlive
2020/05/06 18:47:01 [I] socket keepConnect :keepAlive
2020/05/06 18:47:44 [I] socket keepConnect :keepAlive
2020/05/06 18:47:56 [I] socket keepConnect :keepAlive
2020/05/06 18:48:14 [I] socket keepConnect :keepAlive
2020/05/06 18:48:19 [I] socket keepConnect :keepAlive
2020/05/06 18:48:20 [I] socket keepConnect :keepAlive
2020/05/06 18:48:44 [I] socket keepConnect :keepAlive
2020/05/06 18:48:59 [I] socket keepConnect :keepAlive
2020/05/06 18:49:06 [I] socket keepConnect :keepAlive
2020/05/06 18:49:07 [I] socket keepConnect :keepAlive
2020/05/06 18:49:24 [I] socket keepConnect :keepAlive
2020/05/06 18:50:36 [I] socket keepConnect :keepAlive
2020/05/06 18:50:38 [I] socket keepConnect :keepAlive
2020/05/06 18:51:03 [I] socket keepConnect :keepAlive
2020/05/06 18:53:27 [I] socket keepConnect :keepAlive
2020/05/06 18:53:29 [I] socket keepConnect :keepAlive
2020/05/06 18:53:45 [I] socket keepConnect :keepAlive
2020/05/06 18:54:07 [I] socket keepConnect :keepAlive
2020/05/06 18:55:02 [I] socket keepConnect :keepAlive
2020/05/06 18:55:19 [I] socket keepConnect :keepAlive
2020/05/06 18:55:24 [I] socket keepConnect :keepAlive
2020/05/06 18:55:52 [I] socket keepConnect :keepAlive
2020/05/06 18:56:54 [I] socket keepConnect :keepAlive
2020/05/06 18:57:16 [I] socket keepConnect :keepAlive
2020/05/07 13:54:16 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/05/07 13:54:16 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/05/07 13:54:16 [I] Starting Show
2020/05/07 13:54:16 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/05/07 13:54:16 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/05/07 13:54:16 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/05/07 13:54:16 [I] Database: mysql
2020/05/07 13:54:16 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/05/07 13:54:16 [I] Database: mysql
2020/05/07 13:54:17 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/05/07 13:54:17 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/05/07 13:54:17 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/05/07 13:54:19 [I] Listen: http://0.0.0.0:7700
2020/05/07 13:59:09 [I] ++++++
2020/05/07 13:59:09 [I] ++++++
2020/05/07 13:59:09 [I] ++++++
2020/05/07 13:59:09 [I] ++++++
2020/05/07 13:59:11 [I] ++++++
2020/05/07 13:59:11 [I] ++++++
2020/05/07 13:59:11 [I] ++++++
2020/05/07 13:59:11 [I] connect
2020/05/07 13:59:12 [I] ++++++
2020/05/07 13:59:12 [I] ++++++
2020/05/07 13:59:12 [I] ++++++
2020/05/07 13:59:12 [I] ++++++
2020/05/07 13:59:12 [I] ++++++
2020/05/07 14:24:28 [I] socket disconnect :disconnect
2020/05/07 14:24:29 [I] ++++++
2020/05/07 14:24:29 [I] ++++++
2020/05/07 14:24:29 [I] ++++++
2020/05/07 14:24:29 [I] ++++++
2020/05/07 14:24:29 [I] connect
2020/05/07 14:24:29 [I] ++++++
2020/05/07 14:24:29 [I] ++++++
2020/05/07 14:24:29 [I] ++++++
2020/05/07 14:24:29 [I] ++++++
2020/05/07 14:24:29 [I] ++++++
2020/05/07 14:24:29 [I] ++++++
2020/05/07 14:25:44 [I] socket disconnect :disconnect
2020/05/07 14:25:45 [I] ++++++
2020/05/07 14:25:45 [I] ++++++
2020/05/07 14:25:45 [I] ++++++
2020/05/07 14:25:45 [I] ++++++
2020/05/07 14:25:45 [I] connect
2020/05/07 14:25:45 [I] ++++++
2020/05/07 14:25:45 [I] ++++++
2020/05/07 14:25:45 [I] ++++++
2020/05/07 14:25:45 [I] ++++++
2020/05/07 14:25:46 [I] ++++++
2020/05/07 14:25:46 [I] ++++++
2020/05/07 14:25:58 [I] socket disconnect :disconnect
2020/05/07 14:25:59 [I] ++++++
2020/05/07 14:25:59 [I] ++++++
2020/05/07 14:25:59 [I] ++++++
2020/05/07 14:25:59 [I] ++++++
2020/05/07 14:25:59 [I] connect
2020/05/07 14:25:59 [I] ++++++
2020/05/07 14:25:59 [I] ++++++
2020/05/07 14:25:59 [I] ++++++
2020/05/07 14:25:59 [I] ++++++
2020/05/07 14:25:59 [I] ++++++
2020/05/07 14:26:00 [I] ++++++
2020/05/07 14:27:40 [I] socket disconnect :disconnect
2020/05/07 14:27:43 [I] ++++++
2020/05/07 14:27:43 [I] ++++++
2020/05/07 14:27:43 [I] ++++++
2020/05/07 14:27:43 [I] ++++++
2020/05/07 14:27:43 [I] connect
2020/05/07 14:27:43 [I] ++++++
2020/05/07 14:27:43 [I] ++++++
2020/05/07 14:27:44 [I] ++++++
2020/05/07 14:27:44 [I] ++++++
2020/05/07 14:27:44 [I] ++++++
2020/05/07 14:27:44 [I] ++++++
2020/05/07 14:28:00 [I] socket disconnect :disconnect
2020/05/07 14:28:01 [I] ++++++
2020/05/07 14:28:01 [I] ++++++
2020/05/07 14:28:01 [I] ++++++
2020/05/07 14:28:01 [I] ++++++
2020/05/07 14:28:01 [I] connect
2020/05/07 14:28:01 [I] ++++++
2020/05/07 14:28:01 [I] ++++++
2020/05/07 14:28:01 [I] ++++++
2020/05/07 14:28:01 [I] ++++++
2020/05/07 14:28:01 [I] ++++++
2020/05/07 14:28:01 [I] ++++++
2020/05/07 14:28:28 [I] socket disconnect :disconnect
2020/05/07 14:28:28 [I] ++++++
2020/05/07 14:28:28 [I] ++++++
2020/05/07 14:28:28 [I] ++++++
2020/05/07 14:28:28 [I] ++++++
2020/05/07 14:28:28 [I] connect
2020/05/07 14:28:28 [I] ++++++
2020/05/07 14:28:28 [I] ++++++
2020/05/07 14:28:29 [I] ++++++
2020/05/07 14:28:29 [I] ++++++
2020/05/07 14:28:29 [I] ++++++
2020/05/07 14:28:29 [I] ++++++
2020/05/07 14:29:50 [I] socket disconnect :disconnect
2020/05/07 14:29:50 [I] ++++++
2020/05/07 14:29:50 [I] ++++++
2020/05/07 14:29:50 [I] ++++++
2020/05/07 14:29:50 [I] ++++++
2020/05/07 14:29:50 [I] connect
2020/05/07 14:29:50 [I] ++++++
2020/05/07 14:29:50 [I] ++++++
2020/05/07 14:29:51 [I] ++++++
2020/05/07 14:29:51 [I] ++++++
2020/05/07 14:29:51 [I] ++++++
2020/05/07 14:29:51 [I] ++++++
2020/05/07 14:30:37 [I] socket disconnect :disconnect
2020/05/07 14:30:38 [I] ++++++
2020/05/07 14:30:38 [I] ++++++
2020/05/07 14:30:38 [I] ++++++
2020/05/07 14:30:38 [I] ++++++
2020/05/07 14:30:38 [I] connect
2020/05/07 14:30:38 [I] ++++++
2020/05/07 14:30:38 [I] ++++++
2020/05/07 14:30:38 [I] ++++++
2020/05/07 14:30:38 [I] ++++++
2020/05/07 14:30:38 [I] ++++++
2020/05/07 14:30:38 [I] ++++++
2020/05/07 14:30:56 [I] socket disconnect :disconnect
2020/05/07 14:30:56 [I] ++++++
2020/05/07 14:30:56 [I] ++++++
2020/05/07 14:30:56 [I] ++++++
2020/05/07 14:30:56 [I] ++++++
2020/05/07 14:30:56 [I] connect
2020/05/07 14:30:56 [I] ++++++
2020/05/07 14:30:56 [I] ++++++
2020/05/07 14:30:57 [I] ++++++
2020/05/07 14:30:57 [I] ++++++
2020/05/07 14:30:57 [I] ++++++
2020/05/07 14:30:57 [I] ++++++
2020/05/07 14:31:03 [I] socket disconnect :disconnect
2020/05/07 14:31:04 [I] ++++++
2020/05/07 14:31:04 [I] ++++++
2020/05/07 14:31:04 [I] ++++++
2020/05/07 14:31:04 [I] ++++++
2020/05/07 14:31:04 [I] connect
2020/05/07 14:31:04 [I] ++++++
2020/05/07 14:31:04 [I] ++++++
2020/05/07 14:31:04 [I] ++++++
2020/05/07 14:31:04 [I] ++++++
2020/05/07 14:31:04 [I] ++++++
2020/05/07 14:31:04 [I] ++++++
2020/05/07 14:47:08 [I] socket disconnect :disconnect
2020/05/07 14:47:09 [I] ++++++
2020/05/07 14:47:09 [I] ++++++
2020/05/07 14:47:09 [I] connect
2020/05/07 14:47:09 [I] ++++++
2020/05/07 14:47:09 [I] ++++++
2020/05/07 14:47:09 [I] ++++++
2020/05/07 14:47:09 [I] ++++++
2020/05/07 14:47:09 [I] ++++++
2020/05/07 14:47:09 [I] ++++++
2020/05/07 14:47:09 [I] ++++++
2020/05/07 14:47:09 [I] ++++++
2020/05/07 14:48:13 [I] socket disconnect :disconnect
2020/05/07 14:48:14 [I] ++++++
2020/05/07 14:48:14 [I] ++++++
2020/05/07 14:48:14 [I] ++++++
2020/05/07 14:48:14 [I] ++++++
2020/05/07 14:48:14 [I] connect
2020/05/07 14:48:14 [I] ++++++
2020/05/07 14:48:14 [I] ++++++
2020/05/07 14:48:15 [I] ++++++
2020/05/07 14:48:15 [I] ++++++
2020/05/07 14:48:15 [I] ++++++
2020/05/07 14:48:15 [I] ++++++
2020/05/07 14:48:19 [I] socket disconnect :disconnect
2020/05/07 14:48:20 [I] ++++++
2020/05/07 14:48:20 [I] ++++++
2020/05/07 14:48:20 [I] ++++++
2020/05/07 14:48:20 [I] ++++++
2020/05/07 14:48:20 [I] connect
2020/05/07 14:48:20 [I] ++++++
2020/05/07 14:48:20 [I] ++++++
2020/05/07 14:48:20 [I] ++++++
2020/05/07 14:48:20 [I] ++++++
2020/05/07 14:48:20 [I] ++++++
2020/05/07 14:48:20 [I] ++++++
2020/05/07 14:59:11 [I] socket keepConnect :keepAlive
2020/05/07 15:14:17 [I] ++++++
2020/05/07 15:14:17 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/05/07 15:14:17 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/05/07 15:14:17 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/05/07 15:14:20 [I] ++++++
2020/05/07 15:14:20 [I] ++++++
2020/05/07 15:14:20 [I] ++++++
2020/05/07 15:14:20 [I] ++++++
2020/05/07 15:14:20 [I] ++++++
2020/05/07 15:14:20 [I] ++++++
2020/05/07 15:17:33 [I] ++++++
2020/05/07 15:17:33 [I] ++++++
2020/05/07 15:18:35 [I] ++++++
2020/05/07 15:18:35 [I] ++++++
2020/05/07 15:18:35 [I] ++++++
2020/05/07 15:18:35 [I] ++++++
2020/05/07 15:18:35 [I] ++++++
2020/05/07 15:18:35 [I] ++++++
2020/05/07 15:18:47 [I] ++++++
2020/05/07 15:18:47 [I] ++++++
2020/05/07 15:18:49 [I] ++++++
2020/05/07 15:18:49 [I] ++++++
2020/05/07 15:18:49 [I] ++++++
2020/05/07 15:18:49 [I] ++++++
2020/05/07 15:18:49 [I] ++++++
2020/05/07 15:18:49 [I] ++++++
2020/05/07 15:24:29 [I] socket keepConnect :keepAlive
2020/05/07 15:25:45 [I] socket keepConnect :keepAlive
2020/05/07 15:25:59 [I] socket keepConnect :keepAlive
2020/05/07 15:27:43 [I] socket keepConnect :keepAlive
2020/05/07 15:28:01 [I] socket keepConnect :keepAlive
2020/05/07 15:28:28 [I] socket keepConnect :keepAlive
2020/05/07 15:29:50 [I] socket keepConnect :keepAlive
2020/05/07 15:30:12 [I] socket disconnect :disconnect
2020/05/07 15:30:38 [I] socket keepConnect :keepAlive
2020/05/07 15:30:56 [I] socket keepConnect :keepAlive
2020/05/07 15:31:04 [I] socket keepConnect :keepAlive
2020/05/07 15:33:36 [I] ++++++
2020/05/07 15:33:36 [I] ++++++
2020/05/07 15:33:36 [I] ++++++
2020/05/07 15:33:36 [I] ++++++
2020/05/07 15:33:36 [I] ++++++
2020/05/07 15:33:36 [I] ++++++
2020/05/07 15:33:36 [I] ++++++
2020/05/07 15:33:36 [I] ++++++
2020/05/07 15:33:38 [I] ++++++
2020/05/07 15:33:38 [I] ++++++
2020/05/07 15:33:38 [I] ++++++
2020/05/07 15:33:38 [I] connect
2020/05/07 15:33:38 [I] ++++++
2020/05/07 15:33:38 [I] ++++++
2020/05/07 15:33:38 [I] ++++++
2020/05/07 15:33:39 [I] ++++++
2020/05/07 15:33:39 [I] ++++++
2020/05/07 15:33:39 [I] ++++++
2020/05/07 15:33:41 [I] socket disconnect :disconnect
2020/05/07 15:33:41 [I] socket disconnect :disconnect
2020/05/07 15:33:41 [I] ++++++
2020/05/07 15:33:41 [I] ++++++
2020/05/07 15:33:41 [I] ++++++
2020/05/07 15:34:10 [I] ++++++
2020/05/07 15:34:10 [I] ++++++
2020/05/07 15:34:10 [I] ++++++
2020/05/07 15:34:10 [I] ++++++
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [I] connect
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:34:18 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:34:18 [I] ++++++
2020/05/07 15:34:18 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:34:18 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:NOAUTH Authentication required.
2020/05/07 15:34:18 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:34:19 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1588836859 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc0421b00a0)}
2020/05/07 15:34:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/07 15:34:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:34:19 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41588836859 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc0421b00a0)}
2020/05/07 15:34:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/05/07 15:34:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:34:19 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61588836859 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc0421b00a0)}
2020/05/07 15:34:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/07 15:34:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:34:19 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:34:19 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751588836859 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc0421b00a0)}
2020/05/07 15:34:23 [I] ++++++
2020/05/07 15:34:23 [I] ++++++
2020/05/07 15:34:38 [I] ++++++
2020/05/07 15:34:38 [I] ++++++
2020/05/07 15:34:38 [I] ++++++
2020/05/07 15:34:38 [I] connect
2020/05/07 15:34:38 [I] ++++++
2020/05/07 15:34:38 [I] ++++++
2020/05/07 15:34:38 [I] ++++++
2020/05/07 15:34:38 [I] ++++++
2020/05/07 15:34:38 [I] ++++++
2020/05/07 15:34:38 [I] ++++++
2020/05/07 15:34:39 [I] ++++++
2020/05/07 15:34:39 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [I] ++++++
2020/05/07 15:34:39 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [I] ++++++
2020/05/07 15:34:39 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [I] ++++++
2020/05/07 15:34:39 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:NOAUTH Authentication required.
2020/05/07 15:34:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:34:39 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1588836879 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc04220b740)}
2020/05/07 15:34:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/05/07 15:34:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:34:39 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61588836879 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc04220b740)}
2020/05/07 15:34:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/07 15:34:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:34:39 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:34:39 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:34:40 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41588836880 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc04220b740)}
2020/05/07 15:34:40 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/07 15:34:40 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:34:40 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:34:40 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:34:40 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751588836880 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc04220b740)}
2020/05/07 15:35:05 [I] ++++++
2020/05/07 15:35:05 [I] ++++++
2020/05/07 15:35:05 [I] ++++++
2020/05/07 15:35:05 [I] ++++++
2020/05/07 15:35:10 [I] ++++++
2020/05/07 15:35:10 [I] ++++++
2020/05/07 15:35:10 [I] ++++++
2020/05/07 15:35:10 [I] connect
2020/05/07 15:35:10 [I] ++++++
2020/05/07 15:35:10 [I] ++++++
2020/05/07 15:35:10 [I] ++++++
2020/05/07 15:35:10 [I] ++++++
2020/05/07 15:35:10 [I] ++++++
2020/05/07 15:35:10 [I] ++++++
2020/05/07 15:35:14 [I] socket disconnect :disconnect
2020/05/07 15:35:14 [I] socket disconnect :disconnect
2020/05/07 15:35:14 [I] ++++++
2020/05/07 15:35:14 [I] ++++++
2020/05/07 15:35:14 [I] ++++++
2020/05/07 15:35:15 [I] ++++++
2020/05/07 15:35:15 [I] ++++++
2020/05/07 15:35:15 [I] ++++++
2020/05/07 15:35:15 [I] connect
2020/05/07 15:35:15 [I] ++++++
2020/05/07 15:35:15 [I] ++++++
2020/05/07 15:35:15 [I] ++++++
2020/05/07 15:35:15 [I] ++++++
2020/05/07 15:35:15 [I] ++++++
2020/05/07 15:35:15 [I] ++++++
2020/05/07 15:35:16 [I] ++++++
2020/05/07 15:35:16 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [I] ++++++
2020/05/07 15:35:16 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [I] ++++++
2020/05/07 15:35:16 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [I] ++++++
2020/05/07 15:35:16 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:NOAUTH Authentication required.
2020/05/07 15:35:16 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:35:16 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1588836916 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc0421d6020)}
2020/05/07 15:35:16 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/05/07 15:35:16 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:35:16 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61588836916 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc0421d6020)}
2020/05/07 15:35:16 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/07 15:35:16 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:35:16 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:35:16 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751588836916 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc0421d6020)}
2020/05/07 15:35:17 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/07 15:35:17 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 15:35:17 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 15:35:17 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 15:35:17 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41588836917 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc0421d6020)}
2020/05/07 15:35:23 [I] socket disconnect :disconnect
2020/05/07 15:35:23 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588836879
2020/05/07 15:35:57 [I] socket disconnect :disconnect
2020/05/07 15:35:57 [I] socket disconnect :disconnect
2020/05/07 15:35:57 [I] ++++++
2020/05/07 15:35:57 [I] ++++++
2020/05/07 15:35:57 [I] ++++++
2020/05/07 15:35:58 [I] ++++++
2020/05/07 15:35:58 [I] ++++++
2020/05/07 15:35:58 [I] ++++++
2020/05/07 15:35:58 [I] connect
2020/05/07 15:35:58 [I] ++++++
2020/05/07 15:35:58 [I] ++++++
2020/05/07 15:35:58 [I] ++++++
2020/05/07 15:35:58 [I] ++++++
2020/05/07 15:35:58 [I] ++++++
2020/05/07 15:35:59 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588836859
2020/05/07 15:36:01 [I] socket disconnect :disconnect
2020/05/07 15:36:02 [I] ++++++
2020/05/07 15:36:02 [I] ++++++
2020/05/07 15:36:02 [I] ++++++
2020/05/07 15:36:02 [I] ++++++
2020/05/07 15:36:02 [I] connect
2020/05/07 15:36:02 [I] ++++++
2020/05/07 15:36:02 [I] ++++++
2020/05/07 15:36:02 [I] ++++++
2020/05/07 15:36:02 [I] ++++++
2020/05/07 15:36:02 [I] ++++++
2020/05/07 15:36:16 [I] socket disconnect :disconnect
2020/05/07 15:36:17 [I] ++++++
2020/05/07 15:36:17 [I] ++++++
2020/05/07 15:36:17 [I] ++++++
2020/05/07 15:36:17 [I] ++++++
2020/05/07 15:36:17 [I] connect
2020/05/07 15:36:17 [I] ++++++
2020/05/07 15:36:17 [I] ++++++
2020/05/07 15:36:17 [I] ++++++
2020/05/07 15:36:17 [I] ++++++
2020/05/07 15:36:17 [I] ++++++
2020/05/07 15:36:17 [I] ++++++
2020/05/07 15:36:19 [I] socket disconnect :disconnect
2020/05/07 15:36:19 [I] socket disconnect :disconnect
2020/05/07 15:36:19 [I] ++++++
2020/05/07 15:36:19 [I] ++++++
2020/05/07 15:36:19 [I] ++++++
2020/05/07 15:36:34 [I] ++++++
2020/05/07 15:36:34 [I] ++++++
2020/05/07 15:36:36 [I] ++++++
2020/05/07 15:36:36 [I] ++++++
2020/05/07 15:36:46 [I] ++++++
2020/05/07 15:36:46 [I] ++++++
2020/05/07 15:36:49 [I] ++++++
2020/05/07 15:36:49 [I] ++++++
2020/05/07 15:36:52 [I] ++++++
2020/05/07 15:36:52 [I] ++++++
2020/05/07 15:36:58 [I] ++++++
2020/05/07 15:36:58 [I] ++++++
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:37:13 [I] connect
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:37:13 [I] ++++++
2020/05/07 15:42:34 [I] socket disconnect :disconnect
2020/05/07 15:42:34 [I] socket disconnect :disconnect
2020/05/07 15:42:34 [I] ++++++
2020/05/07 15:42:34 [I] ++++++
2020/05/07 15:42:34 [I] ++++++
2020/05/07 15:42:37 [I] ++++++
2020/05/07 15:42:37 [I] connect
2020/05/07 15:42:37 [I] ++++++
2020/05/07 15:42:37 [I] ++++++
2020/05/07 15:42:37 [I] ++++++
2020/05/07 15:42:37 [I] ++++++
2020/05/07 15:42:37 [I] ++++++
2020/05/07 15:42:37 [I] ++++++
2020/05/07 15:42:37 [I] ++++++
2020/05/07 15:42:37 [I] ++++++
2020/05/07 15:47:09 [I] socket keepConnect :keepAlive
2020/05/07 15:48:14 [I] socket keepConnect :keepAlive
2020/05/07 15:48:20 [I] socket keepConnect :keepAlive
2020/05/07 15:59:11 [I] socket keepConnect :keepAlive
2020/05/07 15:59:40 [I] socket disconnect :disconnect
2020/05/07 15:59:41 [I] ++++++
2020/05/07 15:59:41 [I] ++++++
2020/05/07 15:59:41 [I] ++++++
2020/05/07 15:59:41 [I] ++++++
2020/05/07 15:59:41 [I] connect
2020/05/07 15:59:41 [I] ++++++
2020/05/07 15:59:41 [I] ++++++
2020/05/07 15:59:41 [I] ++++++
2020/05/07 15:59:41 [I] ++++++
2020/05/07 15:59:41 [I] ++++++
2020/05/07 15:59:41 [I] ++++++
2020/05/07 15:59:45 [I] ++++++
2020/05/07 15:59:45 [I] ++++++
2020/05/07 15:59:45 [I] ++++++
2020/05/07 15:59:45 [I] ++++++
2020/05/07 15:59:45 [I] ++++++
2020/05/07 15:59:45 [I] ++++++
2020/05/07 15:59:53 [I] ++++++
2020/05/07 15:59:53 [I] ++++++
2020/05/07 15:59:53 [I] ++++++
2020/05/07 15:59:53 [I] ++++++
2020/05/07 15:59:53 [I] ++++++
2020/05/07 15:59:53 [I] ++++++
2020/05/07 16:00:08 [I] ++++++
2020/05/07 16:00:08 [I] ++++++
2020/05/07 16:04:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/07 16:04:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:04:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/05/07 16:04:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:04:19 [I] --getSingleData----
2020/05/07 16:04:19 [I] 停止 key:5c066b0f844b445790a57a4847d0eae4 , 线程id:5c066b0f844b445790a57a4847d0eae41588836859
2020/05/07 16:04:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/07 16:04:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:04:19 [I] --getSingleData----
2020/05/07 16:04:19 [I] --getSingleData----
2020/05/07 16:04:19 [I] 停止 key:d94209e154de408ab80e6ce54a6968a6 , 线程id:d94209e154de408ab80e6ce54a6968a61588836859
2020/05/07 16:04:32 [I] socket disconnect :disconnect
2020/05/07 16:04:39 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/05/07 16:04:39 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:04:39 [I] --getSingleData----
2020/05/07 16:04:39 [I] 停止 key:d94209e154de408ab80e6ce54a6968a6 , 线程id:d94209e154de408ab80e6ce54a6968a61588836879
2020/05/07 16:04:40 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/07 16:04:40 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:04:40 [I] --getSingleData----
2020/05/07 16:04:40 [I] 停止 key:5c066b0f844b445790a57a4847d0eae4 , 线程id:5c066b0f844b445790a57a4847d0eae41588836880
2020/05/07 16:04:40 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/07 16:04:40 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:04:40 [I] --getSingleData----
2020/05/07 16:04:40 [I] 停止 key:f0e94962c83044bbb8b7f2db216c5275 , 线程id:f0e94962c83044bbb8b7f2db216c52751588836880
2020/05/07 16:05:17 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/05/07 16:05:17 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:05:17 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/07 16:05:17 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:05:17 [I] --getSingleData----
2020/05/07 16:05:17 [I] 停止 key:d94209e154de408ab80e6ce54a6968a6 , 线程id:d94209e154de408ab80e6ce54a6968a61588836916
2020/05/07 16:05:17 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/07 16:05:17 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:05:17 [I] --getSingleData----
2020/05/07 16:05:17 [I] --getSingleData----
2020/05/07 16:05:17 [I] 停止 key:f0e94962c83044bbb8b7f2db216c5275 , 线程id:f0e94962c83044bbb8b7f2db216c52751588836916
2020/05/07 16:09:28 [I] ++++++
2020/05/07 16:09:28 [I] ++++++
2020/05/07 16:09:28 [I] ++++++
2020/05/07 16:09:28 [I] connect
2020/05/07 16:09:28 [I] ++++++
2020/05/07 16:09:28 [I] ++++++
2020/05/07 16:09:28 [I] ++++++
2020/05/07 16:10:28 [I] socket disconnect :disconnect
2020/05/07 16:18:57 [I] ++++++
2020/05/07 16:18:57 [server.go:127 ServeHTTP()] [E] --sid--invalid---err-tGMJAtj7wFMhh54Pxv1W--
2020/05/07 16:18:57 [I] ++++++
2020/05/07 16:18:57 [I] ++++++
2020/05/07 16:18:57 [server.go:127 ServeHTTP()] [E] --sid--invalid---err-tGMJAtj7wFMhh54Pxv1W--
2020/05/07 16:24:29 [I] socket keepConnect :keepAlive
2020/05/07 16:25:04 [I] ++++++
2020/05/07 16:25:04 [I] ++++++
2020/05/07 16:25:04 [I] ++++++
2020/05/07 16:25:09 [I] ++++++
2020/05/07 16:25:09 [I] ++++++
2020/05/07 16:25:09 [I] ++++++
2020/05/07 16:25:09 [I] connect
2020/05/07 16:25:09 [I] ++++++
2020/05/07 16:25:09 [I] ++++++
2020/05/07 16:25:09 [I] ++++++
2020/05/07 16:25:09 [I] ++++++
2020/05/07 16:25:09 [I] ++++++
2020/05/07 16:25:09 [I] ++++++
2020/05/07 16:25:19 [I] socket disconnect :disconnect
2020/05/07 16:25:19 [I] socket disconnect :disconnect
2020/05/07 16:25:19 [I] ++++++
2020/05/07 16:25:19 [I] ++++++
2020/05/07 16:25:19 [I] ++++++
2020/05/07 16:25:22 [I] ++++++
2020/05/07 16:25:22 [I] connect
2020/05/07 16:25:22 [I] ++++++
2020/05/07 16:25:22 [I] ++++++
2020/05/07 16:25:22 [I] ++++++
2020/05/07 16:25:22 [I] ++++++
2020/05/07 16:25:22 [I] ++++++
2020/05/07 16:25:23 [I] ++++++
2020/05/07 16:25:23 [I] ++++++
2020/05/07 16:25:25 [I] socket disconnect :disconnect
2020/05/07 16:25:25 [I] socket disconnect :disconnect
2020/05/07 16:25:25 [I] ++++++
2020/05/07 16:25:25 [I] ++++++
2020/05/07 16:25:25 [I] ++++++
2020/05/07 16:25:26 [I] ++++++
2020/05/07 16:25:26 [I] ++++++
2020/05/07 16:25:26 [I] ++++++
2020/05/07 16:25:26 [I] connect
2020/05/07 16:25:26 [I] ++++++
2020/05/07 16:25:26 [I] ++++++
2020/05/07 16:25:26 [I] ++++++
2020/05/07 16:25:27 [I] ++++++
2020/05/07 16:25:27 [I] ++++++
2020/05/07 16:25:27 [I] ++++++
2020/05/07 16:25:27 [I] ++++++
2020/05/07 16:25:27 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [I] ++++++
2020/05/07 16:25:27 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [I] ++++++
2020/05/07 16:25:27 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [I] ++++++
2020/05/07 16:25:27 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=ea06648a744548878e3f86297e8fb31f:0) result err:NOAUTH Authentication required.
2020/05/07 16:25:27 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 16:25:27 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [socket.go:99 1()] [E] add rotuineName :ea06648a744548878e3f86297e8fb31f1588839927 ,singledata :{ea06648a744548878e3f86297e8fb31f 0s %!s(*socketio.Socket=0xc042394e00)}
2020/05/07 16:25:27 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/07 16:25:27 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 16:25:27 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 16:25:27 [socket.go:99 1()] [E] add rotuineName :5c066b0f844b445790a57a4847d0eae41588839927 ,singledata :{5c066b0f844b445790a57a4847d0eae4 30m %!s(*socketio.Socket=0xc042394e00)}
2020/05/07 16:25:27 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/07 16:25:27 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:25:28 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 16:25:28 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 16:25:28 [socket.go:99 1()] [E] add rotuineName :f0e94962c83044bbb8b7f2db216c52751588839928 ,singledata :{f0e94962c83044bbb8b7f2db216c5275 30m %!s(*socketio.Socket=0xc042394e00)}
2020/05/07 16:25:28 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/05/07 16:25:28 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:25:28 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 16:25:28 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 16:25:28 [socket.go:99 1()] [E] add rotuineName :d94209e154de408ab80e6ce54a6968a61588839928 ,singledata :{d94209e154de408ab80e6ce54a6968a6 30m %!s(*socketio.Socket=0xc042394e00)}
2020/05/07 16:25:45 [I] socket keepConnect :keepAlive
2020/05/07 16:25:59 [I] socket keepConnect :keepAlive
2020/05/07 16:26:59 [I] socket disconnect :disconnect
2020/05/07 16:26:59 [I] socket disconnect :disconnect
2020/05/07 16:26:59 [I] ++++++
2020/05/07 16:26:59 [I] ++++++
2020/05/07 16:26:59 [I] ++++++
2020/05/07 16:26:59 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588839927
2020/05/07 16:27:00 [I] ++++++
2020/05/07 16:27:00 [I] connect
2020/05/07 16:27:00 [I] ++++++
2020/05/07 16:27:00 [I] ++++++
2020/05/07 16:27:00 [I] ++++++
2020/05/07 16:27:00 [I] ++++++
2020/05/07 16:27:00 [I] ++++++
2020/05/07 16:27:00 [I] ++++++
2020/05/07 16:27:00 [I] ++++++
2020/05/07 16:27:00 [I] ++++++
2020/05/07 16:27:41 [I] ++++++
2020/05/07 16:27:41 [I] ++++++
2020/05/07 16:27:43 [I] socket keepConnect :keepAlive
2020/05/07 16:27:50 [I] ++++++
2020/05/07 16:27:50 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/05/07 16:27:50 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/05/07 16:27:50 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/05/07 16:27:53 [I] ++++++
2020/05/07 16:27:53 [I] ++++++
2020/05/07 16:27:55 [I] ++++++
2020/05/07 16:27:55 [I] ++++++
2020/05/07 16:27:57 [I] ++++++
2020/05/07 16:27:57 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/05/07 16:27:57 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/05/07 16:27:57 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/05/07 16:28:00 [I] ++++++
2020/05/07 16:28:00 [I] ++++++
2020/05/07 16:28:00 [I] ++++++
2020/05/07 16:28:00 [I] ++++++
2020/05/07 16:28:00 [I] ++++++
2020/05/07 16:28:00 [I] ++++++
2020/05/07 16:28:01 [I] socket keepConnect :keepAlive
2020/05/07 16:28:28 [I] socket keepConnect :keepAlive
2020/05/07 16:29:50 [I] socket keepConnect :keepAlive
2020/05/07 16:30:09 [I] socket disconnect :disconnect
2020/05/07 16:30:38 [I] socket keepConnect :keepAlive
2020/05/07 16:30:56 [I] socket keepConnect :keepAlive
2020/05/07 16:31:04 [I] socket keepConnect :keepAlive
2020/05/07 16:32:35 [I] socket disconnect :disconnect
2020/05/07 16:32:36 [I] ++++++
2020/05/07 16:32:36 [I] ++++++
2020/05/07 16:32:36 [I] ++++++
2020/05/07 16:32:36 [I] connect
2020/05/07 16:32:36 [I] ++++++
2020/05/07 16:32:36 [I] ++++++
2020/05/07 16:32:36 [I] ++++++
2020/05/07 16:32:36 [I] ++++++
2020/05/07 16:32:36 [I] ++++++
2020/05/07 16:32:36 [I] ++++++
2020/05/07 16:33:38 [I] socket keepConnect :keepAlive
2020/05/07 16:34:18 [I] socket keepConnect :keepAlive
2020/05/07 16:34:19 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/07 16:34:19 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:34:19 [I] --getSingleData----
2020/05/07 16:34:19 [I] 停止 key:f0e94962c83044bbb8b7f2db216c5275 , 线程id:f0e94962c83044bbb8b7f2db216c52751588836859
2020/05/07 16:34:27 [I] socket disconnect :disconnect
2020/05/07 16:34:28 [I] ++++++
2020/05/07 16:34:28 [I] ++++++
2020/05/07 16:34:28 [I] ++++++
2020/05/07 16:34:28 [I] connect
2020/05/07 16:34:28 [I] ++++++
2020/05/07 16:34:28 [I] ++++++
2020/05/07 16:34:28 [I] ++++++
2020/05/07 16:34:28 [I] ++++++
2020/05/07 16:34:28 [I] ++++++
2020/05/07 16:34:29 [I] ++++++
2020/05/07 16:34:38 [I] socket keepConnect :keepAlive
2020/05/07 16:34:43 [I] socket disconnect :disconnect
2020/05/07 16:34:43 [I] ++++++
2020/05/07 16:34:43 [I] ++++++
2020/05/07 16:34:43 [I] ++++++
2020/05/07 16:34:43 [I] connect
2020/05/07 16:34:44 [I] ++++++
2020/05/07 16:34:44 [I] ++++++
2020/05/07 16:34:44 [I] ++++++
2020/05/07 16:34:44 [I] ++++++
2020/05/07 16:34:44 [I] ++++++
2020/05/07 16:34:44 [I] ++++++
2020/05/07 16:35:10 [I] socket keepConnect :keepAlive
2020/05/07 16:35:15 [I] socket keepConnect :keepAlive
2020/05/07 16:35:17 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/07 16:35:17 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:35:17 [I] --getSingleData----
2020/05/07 16:35:17 [I] 停止 key:5c066b0f844b445790a57a4847d0eae4 , 线程id:5c066b0f844b445790a57a4847d0eae41588836917
2020/05/07 16:35:18 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588836916
2020/05/07 16:35:18 [I] 停止 key:d94209e154de408ab80e6ce54a6968a6 , 线程id:d94209e154de408ab80e6ce54a6968a61588836916
2020/05/07 16:35:38 [I] socket disconnect :disconnect
2020/05/07 16:35:38 [I] ++++++
2020/05/07 16:35:38 [I] ++++++
2020/05/07 16:35:38 [I] ++++++
2020/05/07 16:35:38 [I] connect
2020/05/07 16:35:38 [I] ++++++
2020/05/07 16:35:38 [I] ++++++
2020/05/07 16:35:38 [I] ++++++
2020/05/07 16:35:38 [I] ++++++
2020/05/07 16:35:38 [I] ++++++
2020/05/07 16:35:39 [I] ++++++
2020/05/07 16:35:58 [I] socket keepConnect :keepAlive
2020/05/07 16:36:02 [I] socket keepConnect :keepAlive
2020/05/07 16:36:17 [I] socket keepConnect :keepAlive
2020/05/07 16:37:13 [I] socket keepConnect :keepAlive
2020/05/07 16:42:37 [I] socket keepConnect :keepAlive
2020/05/07 16:45:05 [I] socket disconnect :disconnect
2020/05/07 16:45:06 [I] ++++++
2020/05/07 16:45:06 [I] ++++++
2020/05/07 16:45:06 [I] ++++++
2020/05/07 16:45:06 [I] connect
2020/05/07 16:45:06 [I] ++++++
2020/05/07 16:45:06 [I] ++++++
2020/05/07 16:45:06 [I] ++++++
2020/05/07 16:45:07 [I] ++++++
2020/05/07 16:45:07 [I] ++++++
2020/05/07 16:45:07 [I] ++++++
2020/05/07 16:45:09 [I] socket disconnect :disconnect
2020/05/07 16:45:09 [I] socket disconnect :disconnect
2020/05/07 16:45:09 [I] ++++++
2020/05/07 16:45:09 [I] ++++++
2020/05/07 16:45:09 [I] ++++++
2020/05/07 16:45:10 [I] ++++++
2020/05/07 16:45:10 [I] ++++++
2020/05/07 16:45:10 [I] ++++++
2020/05/07 16:47:03 [I] ++++++
2020/05/07 16:47:03 [I] ++++++
2020/05/07 16:47:03 [I] ++++++
2020/05/07 16:47:09 [I] socket keepConnect :keepAlive
2020/05/07 16:47:51 [I] ++++++
2020/05/07 16:47:51 [I] ++++++
2020/05/07 16:47:51 [I] ++++++
2020/05/07 16:47:51 [I] connect
2020/05/07 16:47:51 [I] ++++++
2020/05/07 16:47:51 [I] ++++++
2020/05/07 16:47:51 [I] ++++++
2020/05/07 16:47:51 [I] ++++++
2020/05/07 16:47:51 [I] ++++++
2020/05/07 16:47:51 [I] ++++++
2020/05/07 16:48:14 [I] socket keepConnect :keepAlive
2020/05/07 16:48:20 [I] socket keepConnect :keepAlive
2020/05/07 16:52:26 [I] socket disconnect :disconnect
2020/05/07 16:52:27 [I] ++++++
2020/05/07 16:52:27 [I] ++++++
2020/05/07 16:52:27 [I] ++++++
2020/05/07 16:52:27 [I] connect
2020/05/07 16:52:27 [I] ++++++
2020/05/07 16:52:27 [I] ++++++
2020/05/07 16:52:27 [I] ++++++
2020/05/07 16:52:27 [I] ++++++
2020/05/07 16:52:27 [I] ++++++
2020/05/07 16:52:27 [I] ++++++
2020/05/07 16:54:24 [I] socket disconnect :disconnect
2020/05/07 16:54:25 [I] ++++++
2020/05/07 16:54:25 [I] ++++++
2020/05/07 16:54:25 [I] ++++++
2020/05/07 16:54:25 [I] connect
2020/05/07 16:54:25 [I] ++++++
2020/05/07 16:54:25 [I] ++++++
2020/05/07 16:54:25 [I] ++++++
2020/05/07 16:54:25 [I] ++++++
2020/05/07 16:54:25 [I] ++++++
2020/05/07 16:54:25 [I] ++++++
2020/05/07 16:55:27 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=5c066b0f844b445790a57a4847d0eae4:0) result err:NOAUTH Authentication required.
2020/05/07 16:55:27 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:55:27 [I] --getSingleData----
2020/05/07 16:55:27 [I] 停止 key:5c066b0f844b445790a57a4847d0eae4 , 线程id:5c066b0f844b445790a57a4847d0eae41588839927
2020/05/07 16:55:28 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=f0e94962c83044bbb8b7f2db216c5275:0) result err:NOAUTH Authentication required.
2020/05/07 16:55:28 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:55:28 [I] --getSingleData----
2020/05/07 16:55:28 [I] 停止 key:f0e94962c83044bbb8b7f2db216c5275 , 线程id:f0e94962c83044bbb8b7f2db216c52751588839928
2020/05/07 16:55:28 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=d94209e154de408ab80e6ce54a6968a6:0) result err:NOAUTH Authentication required.
2020/05/07 16:55:28 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 16:55:28 [I] --getSingleData----
2020/05/07 16:55:28 [I] 停止 key:d94209e154de408ab80e6ce54a6968a6 , 线程id:d94209e154de408ab80e6ce54a6968a61588839928
2020/05/07 16:55:28 [I] 停止 key:ea06648a744548878e3f86297e8fb31f , 线程id:ea06648a744548878e3f86297e8fb31f1588839927
2020/05/07 16:59:11 [I] socket keepConnect :keepAlive
2020/05/07 16:59:41 [I] socket keepConnect :keepAlive
2020/05/07 17:05:30 [I] socket disconnect :disconnect
2020/05/07 17:05:30 [I] ++++++
2020/05/07 17:05:30 [I] ++++++
2020/05/07 17:05:30 [I] ++++++
2020/05/07 17:05:30 [I] connect
2020/05/07 17:05:30 [I] ++++++
2020/05/07 17:05:30 [I] ++++++
2020/05/07 17:05:30 [I] ++++++
2020/05/07 17:05:31 [I] ++++++
2020/05/07 17:05:31 [I] ++++++
2020/05/07 17:05:31 [I] ++++++
2020/05/07 17:06:40 [I] socket disconnect :disconnect
2020/05/07 17:06:41 [I] ++++++
2020/05/07 17:06:41 [I] ++++++
2020/05/07 17:06:41 [I] ++++++
2020/05/07 17:06:41 [I] connect
2020/05/07 17:06:41 [I] ++++++
2020/05/07 17:06:41 [I] ++++++
2020/05/07 17:06:41 [I] ++++++
2020/05/07 17:06:41 [I] ++++++
2020/05/07 17:06:41 [I] ++++++
2020/05/07 17:06:41 [I] ++++++
2020/05/07 17:06:58 [I] ++++++
2020/05/07 17:06:58 [I] ++++++
2020/05/07 17:06:58 [I] ++++++
2020/05/07 17:07:08 [I] ++++++
2020/05/07 17:07:08 [I] ++++++
2020/05/07 17:07:08 [I] ++++++
2020/05/07 17:07:21 [I] socket disconnect :disconnect
2020/05/07 17:07:22 [I] ++++++
2020/05/07 17:07:22 [I] ++++++
2020/05/07 17:07:22 [I] ++++++
2020/05/07 17:07:22 [I] connect
2020/05/07 17:07:22 [I] ++++++
2020/05/07 17:07:22 [I] ++++++
2020/05/07 17:07:22 [I] ++++++
2020/05/07 17:07:22 [I] ++++++
2020/05/07 17:07:22 [I] ++++++
2020/05/07 17:07:22 [I] ++++++
2020/05/07 17:07:24 [I] socket disconnect :disconnect
2020/05/07 17:07:45 [I] Received signal interrupt. shutting down
2020/05/07 17:08:17 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/05/07 17:08:18 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/05/07 17:08:18 [I] Starting Show
2020/05/07 17:08:18 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/05/07 17:08:18 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/05/07 17:08:18 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/05/07 17:08:18 [I] Database: mysql
2020/05/07 17:08:18 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/05/07 17:08:18 [I] Database: mysql
2020/05/07 17:08:19 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/05/07 17:08:19 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/05/07 17:08:19 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/05/07 17:08:21 [I] Listen: http://0.0.0.0:7700
2020/05/07 17:09:18 [I] ++++++
2020/05/07 17:09:18 [I] ++++++
2020/05/07 17:09:18 [I] ++++++
2020/05/07 17:09:27 [I] start save to redis
2020/05/07 17:09:27 [I] start save to redis
2020/05/07 17:09:27 [I] ++++++
2020/05/07 17:09:27 [I] ++++++
2020/05/07 17:09:27 [I] ++++++
2020/05/07 17:09:34 [I] start save to redis
2020/05/07 17:09:38 [I] start save to redis
2020/05/07 17:09:42 [I] start save to redis
2020/05/07 17:10:04 [I] start save to redis
2020/05/07 17:10:22 [I] ++++++
2020/05/07 17:10:22 [I] ++++++
2020/05/07 17:10:22 [I] ++++++
2020/05/07 17:10:27 [I] ++++++
2020/05/07 17:10:27 [I] ++++++
2020/05/07 17:10:27 [I] ++++++
2020/05/07 17:10:40 [I] ++++++
2020/05/07 17:10:40 [I] ++++++
2020/05/07 17:10:40 [I] ++++++
2020/05/07 17:10:40 [I] connect
2020/05/07 17:10:40 [I] ++++++
2020/05/07 17:10:40 [I] ++++++
2020/05/07 17:10:40 [I] ++++++
2020/05/07 17:10:40 [I] ++++++
2020/05/07 17:10:40 [I] ++++++
2020/05/07 17:10:40 [I] ++++++
2020/05/07 17:10:55 [I] ++++++
2020/05/07 17:10:55 [I] ++++++
2020/05/07 17:10:55 [I] ++++++
2020/05/07 17:10:55 [I] ++++++
2020/05/07 17:10:55 [I] ++++++
2020/05/07 17:10:55 [I] ++++++
2020/05/07 17:10:57 [I] ++++++
2020/05/07 17:10:57 [I] ++++++
2020/05/07 17:10:57 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/07 17:10:59 [I] ++++++
2020/05/07 17:10:59 [I] ++++++
2020/05/07 17:10:59 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/07 17:11:03 [I] ++++++
2020/05/07 17:11:03 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 17:11:03 [I] ++++++
2020/05/07 17:11:03 [I] ++++++
2020/05/07 17:11:03 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/07 17:11:03 [I] ++++++
2020/05/07 17:11:03 [I] ++++++
2020/05/07 17:11:03 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/07 17:11:04 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 17:11:04 [I] ++++++
2020/05/07 17:11:04 [I] ++++++
2020/05/07 17:11:04 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/07 17:11:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=046bb22db98a405889033c97e11ef0cf:0) result err:NOAUTH Authentication required.
2020/05/07 17:11:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 17:11:04 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 17:11:04 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 17:11:04 [socket.go:99 1()] [E] add rotuineName :046bb22db98a405889033c97e11ef0cf1588842664 ,singledata :{046bb22db98a405889033c97e11ef0cf 30m %!s(*socketio.Socket=0xc0424644e0)}
2020/05/07 17:11:22 [I] remove rotuineName:046bb22db98a405889033c97e11ef0cf1588842664
2020/05/07 17:11:22 [I] ++++++
2020/05/07 17:11:22 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 17:11:22 [I] ++++++
2020/05/07 17:11:22 [I] ++++++
2020/05/07 17:11:22 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/07 17:11:22 [I] ++++++
2020/05/07 17:11:22 [I] ++++++
2020/05/07 17:11:22 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/07 17:11:22 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 17:11:22 [I] ++++++
2020/05/07 17:11:22 [I] ++++++
2020/05/07 17:11:22 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/07 17:11:22 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=13640bb7ef1e414a843d0a279f6395a2:0) result err:NOAUTH Authentication required.
2020/05/07 17:11:22 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 17:11:22 [I] add 第一次建立连接的时候返回所有数据 
2020/05/07 17:11:22 [dataset.go:85 GetRfreshTimeDatas()] [E] ------------------GetRfreshTimeDatas------------------------%!(EXTRA string=)
2020/05/07 17:11:23 [socket.go:99 1()] [E] add rotuineName :13640bb7ef1e414a843d0a279f6395a21588842683 ,singledata :{13640bb7ef1e414a843d0a279f6395a2 0s %!s(*socketio.Socket=0xc0424644e0)}
2020/05/07 17:11:28 [I] ++++++
2020/05/07 17:11:28 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 17:11:29 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [dataset.go:97 GetDataSets()] [E] ------------------GetDataSets------------------------%!(EXTRA string=)
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [dataset.go:368 GetDataSetFieldById()] [E] ------------------GetDataSetFieldById------------------------%!(EXTRA string=)
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [I] ++++++
2020/05/07 17:12:03 [dataset.go:348 GetRedisData()] [E] ------------------GetRedisData------------------------%!(EXTRA string=)
2020/05/07 17:12:05 [I] remove rotuineName:13640bb7ef1e414a843d0a279f6395a21588842683
2020/05/07 17:12:05 [I] ++++++
2020/05/07 17:12:05 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 17:12:05 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/05/07 17:14:05 [I] ++++++
2020/05/07 17:14:05 [dataset.go:107 GetDataSetById()] [E] ------------------GetDataSetById------------------------%!(EXTRA string=)
2020/05/07 17:14:05 [dataset.go:73 GetDataSetById()] [E] -----bus.Dispatch--set---id--undefined--err-数据集没有找到
2020/05/07 17:17:23 [I] socket disconnect :disconnect
2020/05/07 17:17:24 [I] ++++++
2020/05/07 17:17:24 [I] ++++++
2020/05/07 17:17:24 [I] ++++++
2020/05/07 17:17:24 [I] connect
2020/05/07 17:17:24 [I] ++++++
2020/05/07 17:17:24 [I] ++++++
2020/05/07 17:17:24 [I] ++++++
2020/05/07 17:17:24 [I] ++++++
2020/05/07 17:17:24 [I] ++++++
2020/05/07 17:17:24 [I] ++++++
2020/05/07 17:19:47 [I] ++++++
2020/05/07 17:19:51 [I] socket disconnect :disconnect
2020/05/07 17:19:51 [I] ++++++
2020/05/07 17:19:51 [I] ++++++
2020/05/07 17:19:51 [I] ++++++
2020/05/07 17:19:51 [I] connect
2020/05/07 17:19:51 [I] ++++++
2020/05/07 17:19:51 [I] ++++++
2020/05/07 17:19:51 [I] ++++++
2020/05/07 17:19:52 [I] ++++++
2020/05/07 17:19:52 [I] ++++++
2020/05/07 17:19:52 [I] ++++++
2020/05/07 17:24:21 [I] start save to redis
2020/05/07 17:24:22 [I] start save to redis
2020/05/07 17:24:24 [I] start save to redis
2020/05/07 17:24:24 [I] start save to redis
2020/05/07 17:24:26 [I] start save to redis
2020/05/07 17:24:26 [I] start save to redis
2020/05/07 17:24:28 [I] start save to redis
2020/05/07 17:24:29 [I] start save to redis
2020/05/07 17:24:29 [I] start save to redis
2020/05/07 17:24:30 [I] start save to redis
2020/05/07 17:24:31 [I] start save to redis
2020/05/07 17:24:32 [I] start save to redis
2020/05/07 17:24:33 [I] start save to redis
2020/05/07 17:24:34 [I] start save to redis
2020/05/07 17:24:34 [I] start save to redis
2020/05/07 17:24:35 [I] start save to redis
2020/05/07 17:24:35 [I] start save to redis
2020/05/07 17:24:37 [I] start save to redis
2020/05/07 17:24:37 [I] start save to redis
2020/05/07 17:24:37 [I] start save to redis
2020/05/07 17:25:05 [I] ++++++
2020/05/07 17:28:16 [I] ++++++
2020/05/07 17:28:18 [I] socket disconnect :disconnect
2020/05/07 17:28:19 [I] ++++++
2020/05/07 17:28:19 [I] ++++++
2020/05/07 17:28:19 [I] ++++++
2020/05/07 17:28:19 [I] connect
2020/05/07 17:28:19 [I] ++++++
2020/05/07 17:28:19 [I] ++++++
2020/05/07 17:28:19 [I] ++++++
2020/05/07 17:28:19 [I] ++++++
2020/05/07 17:28:19 [I] ++++++
2020/05/07 17:28:19 [I] ++++++
2020/05/07 17:29:38 [I] socket disconnect :disconnect
2020/05/07 17:29:39 [I] ++++++
2020/05/07 17:29:39 [I] ++++++
2020/05/07 17:29:39 [I] ++++++
2020/05/07 17:29:39 [I] connect
2020/05/07 17:29:39 [I] ++++++
2020/05/07 17:29:39 [I] ++++++
2020/05/07 17:29:39 [I] ++++++
2020/05/07 17:29:41 [I] socket disconnect :disconnect
2020/05/07 17:29:42 [I] ++++++
2020/05/07 17:29:42 [I] ++++++
2020/05/07 17:29:42 [I] ++++++
2020/05/07 17:29:42 [I] connect
2020/05/07 17:29:42 [I] ++++++
2020/05/07 17:29:42 [I] ++++++
2020/05/07 17:29:42 [I] ++++++
2020/05/07 17:29:50 [I] socket disconnect :disconnect
2020/05/07 17:29:50 [I] ++++++
2020/05/07 17:29:50 [I] ++++++
2020/05/07 17:29:50 [I] ++++++
2020/05/07 17:29:50 [I] connect
2020/05/07 17:29:50 [I] ++++++
2020/05/07 17:29:50 [I] ++++++
2020/05/07 17:29:50 [I] ++++++
2020/05/07 17:29:50 [I] ++++++
2020/05/07 17:29:50 [I] ++++++
2020/05/07 17:29:50 [I] ++++++
2020/05/07 17:30:04 [I] socket disconnect :disconnect
2020/05/07 17:30:04 [I] ++++++
2020/05/07 17:30:04 [I] ++++++
2020/05/07 17:30:04 [I] ++++++
2020/05/07 17:30:04 [I] connect
2020/05/07 17:30:04 [I] ++++++
2020/05/07 17:30:04 [I] ++++++
2020/05/07 17:30:04 [I] ++++++
2020/05/07 17:30:05 [I] ++++++
2020/05/07 17:30:05 [I] ++++++
2020/05/07 17:30:05 [I] ++++++
2020/05/07 17:30:05 [I] connect
2020/05/07 17:30:05 [I] ++++++
2020/05/07 17:30:05 [I] ++++++
2020/05/07 17:30:05 [I] ++++++
2020/05/07 17:30:05 [I] ++++++
2020/05/07 17:30:05 [I] ++++++
2020/05/07 17:31:04 [I] socket disconnect :disconnect
2020/05/07 17:41:04 [addRedis.go:424 OperateRedis()] [E] redis get id :%!s(int=0) i %!d(string=046bb22db98a405889033c97e11ef0cf:0) result err:NOAUTH Authentication required.
2020/05/07 17:41:04 [dataset.go:358 GetRedisDataMap()] [E] ------------------GetRedisDataMap------------------------%!(EXTRA string=)
2020/05/07 17:41:04 [I] --getSingleData----
2020/05/07 18:10:40 [I] socket keepConnect :keepAlive
2020/05/07 18:17:24 [I] socket keepConnect :keepAlive
2020/05/07 18:19:51 [I] socket keepConnect :keepAlive
2020/05/07 18:27:47 [I] socket disconnect :disconnect
2020/05/08 09:25:05 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/05/08 09:25:05 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/05/08 09:25:05 [I] Starting Show
2020/05/08 09:25:05 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/05/08 09:25:05 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/05/08 09:25:05 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/05/08 09:25:05 [I] Database: mysql
2020/05/08 09:25:05 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/05/08 09:25:05 [I] Database: mysql
2020/05/08 09:25:05 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/05/08 09:25:05 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/05/08 09:25:05 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/05/08 09:25:07 [I] Listen: http://0.0.0.0:7700
2020/05/08 09:27:34 [I] ++++++
2020/05/08 09:27:34 [I] ++++++
2020/05/08 09:27:34 [I] ++++++
2020/05/08 09:27:35 [I] ++++++
2020/05/08 09:27:35 [I] ++++++
2020/05/08 09:27:35 [I] ++++++
2020/05/08 09:27:35 [I] connect
2020/05/08 09:27:35 [I] ++++++
2020/05/08 09:27:35 [I] ++++++
2020/05/08 09:27:35 [I] ++++++
2020/05/08 09:28:35 [I] socket disconnect :disconnect
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [server.go:127 ServeHTTP()] [E] --sid--invalid---err-qYRMRn__XntBAKJUtfi5--
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [server.go:127 ServeHTTP()] [E] --sid--invalid---err-qYRMRn__XntBAKJUtfi5--
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [I] connect
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [server.go:127 ServeHTTP()] [E] --sid--invalid---err-qYRMRn__XntBAKJUtfi5--
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [I] ++++++
2020/05/08 09:37:59 [server.go:127 ServeHTTP()] [E] --sid--invalid---err-qYRMRn__XntBAKJUtfi5--
2020/05/08 09:38:00 [I] ++++++
2020/05/08 09:38:00 [I] ++++++
2020/05/08 09:38:01 [I] ++++++
2020/05/08 09:38:01 [I] ++++++
2020/05/08 09:38:03 [I] ++++++
2020/05/08 09:38:03 [I] ++++++
2020/05/08 09:38:03 [I] ++++++
2020/05/08 09:38:03 [I] connect
2020/05/08 09:38:03 [I] ++++++
2020/05/08 09:38:03 [I] ++++++
2020/05/08 09:38:03 [I] ++++++
2020/05/08 09:38:03 [I] ++++++
2020/05/08 09:38:03 [I] ++++++
2020/05/08 09:38:03 [I] ++++++
2020/05/08 09:38:59 [I] socket disconnect :disconnect
2020/05/08 09:39:46 [I] socket disconnect :disconnect
2020/05/08 09:39:46 [I] socket disconnect :disconnect
2020/05/08 09:39:46 [I] ++++++
2020/05/08 09:39:46 [I] ++++++
2020/05/08 09:39:46 [I] ++++++
2020/05/08 09:39:46 [I] ++++++
2020/05/08 09:39:46 [I] ++++++
2020/05/08 09:39:55 [I] ++++++
2020/05/08 09:39:55 [I] ++++++
2020/05/08 09:39:55 [I] ++++++
2020/05/08 09:39:55 [I] connect
2020/05/08 09:39:55 [I] ++++++
2020/05/08 09:39:55 [I] ++++++
2020/05/08 09:39:55 [I] ++++++
2020/05/08 09:39:56 [I] ++++++
2020/05/08 09:39:56 [I] ++++++
2020/05/08 09:39:56 [I] ++++++
2020/05/08 09:39:59 [I] socket disconnect :disconnect
2020/05/08 09:39:59 [I] socket disconnect :disconnect
2020/05/08 09:39:59 [I] ++++++
2020/05/08 09:39:59 [I] ++++++
2020/05/08 09:39:59 [I] ++++++
2020/05/08 09:39:59 [I] ++++++
2020/05/08 09:39:59 [I] ++++++
2020/05/08 09:40:01 [I] ++++++
2020/05/08 09:40:01 [I] ++++++
2020/05/08 09:40:01 [I] ++++++
2020/05/08 09:40:01 [I] connect
2020/05/08 09:40:01 [I] ++++++
2020/05/08 09:40:01 [I] ++++++
2020/05/08 09:40:01 [I] ++++++
2020/05/08 09:40:03 [I] ++++++
2020/05/08 09:40:03 [I] ++++++
2020/05/08 09:40:04 [I] ++++++
2020/05/08 09:40:04 [I] socket disconnect :disconnect
2020/05/08 09:40:04 [I] socket disconnect :disconnect
2020/05/08 09:40:04 [I] ++++++
2020/05/08 09:40:04 [I] ++++++
2020/05/08 09:40:04 [I] ++++++
2020/05/08 09:40:04 [I] ++++++
2020/05/08 09:40:04 [I] ++++++
2020/05/08 09:40:06 [I] ++++++
2020/05/08 09:40:06 [I] ++++++
2020/05/08 09:40:06 [I] ++++++
2020/05/08 09:40:06 [I] connect
2020/05/08 09:40:06 [I] ++++++
2020/05/08 09:40:06 [I] ++++++
2020/05/08 09:40:06 [I] ++++++
2020/05/08 09:40:07 [I] ++++++
2020/05/08 09:40:07 [I] ++++++
2020/05/08 09:40:07 [I] ++++++
2020/05/08 09:44:30 [I] socket disconnect :disconnect
2020/05/08 09:44:31 [I] ++++++
2020/05/08 09:44:31 [I] ++++++
2020/05/08 09:44:31 [I] ++++++
2020/05/08 09:44:31 [I] connect
2020/05/08 09:44:31 [I] ++++++
2020/05/08 09:44:31 [I] ++++++
2020/05/08 09:44:31 [I] ++++++
2020/05/08 09:44:31 [I] ++++++
2020/05/08 09:44:31 [I] ++++++
2020/05/08 09:44:31 [I] ++++++
2020/05/08 09:44:38 [I] socket disconnect :disconnect
2020/05/08 09:44:38 [I] ++++++
2020/05/08 09:44:38 [I] ++++++
2020/05/08 09:44:38 [I] ++++++
2020/05/08 09:44:38 [I] connect
2020/05/08 09:44:38 [I] ++++++
2020/05/08 09:44:38 [I] ++++++
2020/05/08 09:44:38 [I] ++++++
2020/05/08 09:44:38 [I] ++++++
2020/05/08 09:44:38 [I] ++++++
2020/05/08 09:44:38 [I] ++++++
2020/05/08 09:44:57 [I] socket disconnect :disconnect
2020/05/08 09:44:58 [I] ++++++
2020/05/08 09:44:58 [I] ++++++
2020/05/08 09:44:58 [I] connect
2020/05/08 09:44:58 [I] ++++++
2020/05/08 09:44:58 [I] ++++++
2020/05/08 09:44:58 [I] ++++++
2020/05/08 09:44:58 [I] ++++++
2020/05/08 09:44:58 [I] ++++++
2020/05/08 09:44:58 [I] ++++++
2020/05/08 09:44:58 [I] ++++++
2020/05/08 09:45:00 [I] socket disconnect :disconnect
2020/05/08 09:45:00 [I] ++++++
2020/05/08 09:45:00 [I] ++++++
2020/05/08 09:45:00 [I] ++++++
2020/05/08 09:45:00 [I] connect
2020/05/08 09:45:00 [I] ++++++
2020/05/08 09:45:00 [I] ++++++
2020/05/08 09:45:00 [I] ++++++
2020/05/08 09:45:01 [I] ++++++
2020/05/08 09:45:01 [I] ++++++
2020/05/08 09:45:01 [I] ++++++
2020/05/08 09:45:05 [I] socket disconnect :disconnect
2020/05/08 09:45:05 [I] ++++++
2020/05/08 09:45:05 [I] ++++++
2020/05/08 09:45:05 [I] ++++++
2020/05/08 09:45:05 [I] connect
2020/05/08 09:45:05 [I] ++++++
2020/05/08 09:45:06 [I] ++++++
2020/05/08 09:45:06 [I] ++++++
2020/05/08 09:45:06 [I] ++++++
2020/05/08 09:45:06 [I] ++++++
2020/05/08 09:45:06 [I] ++++++
2020/05/08 09:45:15 [I] ++++++
2020/05/08 09:45:15 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/05/08 09:45:15 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/05/08 09:45:15 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/05/08 09:45:17 [I] ++++++
2020/05/08 09:45:17 [I] ++++++
2020/05/08 09:45:17 [I] ++++++
2020/05/08 09:45:17 [I] ++++++
2020/05/08 09:45:17 [I] ++++++
2020/05/08 09:45:17 [I] ++++++
2020/05/08 09:45:18 [I] ++++++
2020/05/08 09:45:18 [auth.go:267 GetTentantViews()] [E] view tenant err
2020/05/08 09:45:18 [middleware.go:67 GetAPikey()] [E] unexpected end of JSON input
2020/05/08 09:45:18 [molds.go:73 GetMoldClasses()] [E] get apikey err %!(EXTRA string=)
2020/05/08 09:45:19 [I] ++++++
2020/05/08 09:45:19 [I] ++++++
2020/05/08 09:45:19 [I] ++++++
2020/05/08 09:45:19 [I] ++++++
2020/05/08 09:45:19 [I] ++++++
2020/05/08 09:45:19 [I] ++++++
2020/05/08 09:45:30 [I] socket disconnect :disconnect
2020/05/08 09:45:30 [I] socket disconnect :disconnect
2020/05/08 09:45:30 [I] ++++++
2020/05/08 09:45:30 [I] ++++++
2020/05/08 09:45:30 [I] ++++++
2020/05/08 09:45:30 [I] ++++++
2020/05/08 09:45:30 [I] ++++++
2020/05/08 09:45:49 [I] ++++++
2020/05/08 09:45:49 [I] ++++++
2020/05/08 09:45:49 [I] ++++++
2020/05/08 09:45:49 [I] connect
2020/05/08 09:45:49 [I] ++++++
2020/05/08 09:45:49 [I] ++++++
2020/05/08 09:45:49 [I] ++++++
2020/05/08 09:45:49 [I] ++++++
2020/05/08 09:45:49 [I] ++++++
2020/05/08 09:45:49 [I] ++++++
2020/05/08 09:57:08 [I] ++++++
2020/05/08 09:57:08 [I] ++++++
2020/05/08 09:57:08 [I] ++++++
2020/05/08 09:57:08 [I] ++++++
2020/05/08 09:57:08 [I] ++++++
2020/05/08 09:57:08 [I] socket disconnect :disconnect
2020/05/08 09:57:08 [I] socket disconnect :disconnect
2020/05/08 09:57:22 [I] ++++++
2020/05/08 09:57:22 [I] ++++++
2020/05/08 09:57:22 [I] ++++++
2020/05/08 09:57:22 [I] connect
2020/05/08 09:57:22 [I] ++++++
2020/05/08 09:57:22 [I] ++++++
2020/05/08 09:57:22 [I] ++++++
2020/05/08 10:03:37 [I] socket disconnect :disconnect
2020/05/08 10:03:37 [I] ++++++
2020/05/08 10:03:37 [I] ++++++
2020/05/08 10:03:37 [I] ++++++
2020/05/08 10:03:37 [I] connect
2020/05/08 10:03:37 [I] ++++++
2020/05/08 10:03:37 [I] ++++++
2020/05/08 10:03:37 [I] ++++++
2020/05/08 10:03:38 [I] ++++++
2020/05/08 10:03:38 [I] ++++++
2020/05/08 10:03:38 [I] ++++++
2020/05/08 10:05:01 [I] socket disconnect :disconnect
2020/05/08 10:05:11 [I] ++++++
2020/05/08 10:05:11 [I] ++++++
2020/05/08 10:05:11 [I] ++++++
2020/05/08 10:05:11 [I] connect
2020/05/08 10:05:11 [I] ++++++
2020/05/08 10:05:12 [I] ++++++
2020/05/08 10:05:12 [I] ++++++
2020/05/08 10:05:22 [I] socket disconnect :disconnect
2020/05/08 10:05:22 [I] ++++++
2020/05/08 10:05:22 [I] ++++++
2020/05/08 10:05:22 [I] ++++++
2020/05/08 10:05:22 [I] connect
2020/05/08 10:05:23 [I] ++++++
2020/05/08 10:05:23 [I] ++++++
2020/05/08 10:05:23 [I] ++++++
2020/05/08 10:05:36 [I] socket disconnect :disconnect
2020/05/08 10:05:37 [I] ++++++
2020/05/08 10:05:37 [I] ++++++
2020/05/08 10:05:37 [I] ++++++
2020/05/08 10:05:37 [I] connect
2020/05/08 10:05:37 [I] ++++++
2020/05/08 10:05:37 [I] ++++++
2020/05/08 10:05:37 [I] ++++++
2020/05/08 10:05:45 [I] socket disconnect :disconnect
2020/05/08 10:05:46 [I] ++++++
2020/05/08 10:05:46 [I] connect
2020/05/08 10:05:46 [I] ++++++
2020/05/08 10:05:46 [I] ++++++
2020/05/08 10:05:46 [I] ++++++
2020/05/08 10:05:46 [I] ++++++
2020/05/08 10:05:46 [I] ++++++
2020/05/08 10:05:55 [I] socket disconnect :disconnect
2020/05/08 10:05:56 [I] ++++++
2020/05/08 10:05:56 [I] ++++++
2020/05/08 10:05:56 [I] ++++++
2020/05/08 10:05:56 [I] connect
2020/05/08 10:05:56 [I] ++++++
2020/05/08 10:05:56 [I] ++++++
2020/05/08 10:05:56 [I] ++++++
2020/05/08 10:05:56 [I] ++++++
2020/05/08 10:05:56 [I] ++++++
2020/05/08 10:05:56 [I] ++++++
2020/05/08 10:08:23 [I] socket disconnect :disconnect
2020/05/08 10:08:24 [I] ++++++
2020/05/08 10:08:24 [I] ++++++
2020/05/08 10:08:24 [I] ++++++
2020/05/08 10:08:24 [I] connect
2020/05/08 10:08:24 [I] ++++++
2020/05/08 10:08:24 [I] ++++++
2020/05/08 10:08:24 [I] ++++++
2020/05/08 10:08:24 [I] ++++++
2020/05/08 10:08:24 [I] ++++++
2020/05/08 10:08:24 [I] ++++++
2020/05/08 10:08:46 [I] socket disconnect :disconnect
2020/05/08 10:08:47 [I] ++++++
2020/05/08 10:08:47 [I] ++++++
2020/05/08 10:08:47 [I] ++++++
2020/05/08 10:08:47 [I] connect
2020/05/08 10:08:47 [I] ++++++
2020/05/08 10:08:47 [I] ++++++
2020/05/08 10:08:47 [I] ++++++
2020/05/08 10:08:47 [I] ++++++
2020/05/08 10:08:47 [I] ++++++
2020/05/08 10:08:47 [I] ++++++
2020/05/08 10:09:24 [I] socket disconnect :disconnect
2020/05/08 10:09:39 [I] ++++++
2020/05/08 10:09:39 [I] ++++++
2020/05/08 10:09:39 [I] ++++++
2020/05/08 10:09:39 [I] connect
2020/05/08 10:09:39 [I] ++++++
2020/05/08 10:09:39 [I] ++++++
2020/05/08 10:09:39 [I] ++++++
2020/05/08 10:09:39 [I] ++++++
2020/05/08 10:09:39 [I] ++++++
2020/05/08 10:09:39 [I] ++++++
2020/05/08 10:27:35 [I] socket keepConnect :keepAlive
2020/05/08 10:37:59 [I] socket keepConnect :keepAlive
2020/05/08 10:38:03 [I] socket keepConnect :keepAlive
2020/05/08 10:39:55 [I] socket keepConnect :keepAlive
2020/05/08 10:40:01 [I] socket keepConnect :keepAlive
2020/05/08 10:40:06 [I] socket keepConnect :keepAlive
2020/05/08 10:44:31 [I] socket keepConnect :keepAlive
2020/05/08 10:44:38 [I] socket keepConnect :keepAlive
2020/05/08 10:44:58 [I] socket keepConnect :keepAlive
2020/05/08 10:45:00 [I] socket keepConnect :keepAlive
2020/05/08 10:45:05 [I] socket keepConnect :keepAlive
2020/05/08 10:45:49 [I] socket keepConnect :keepAlive
2020/05/08 10:57:22 [I] socket keepConnect :keepAlive
2020/05/08 11:03:37 [I] socket keepConnect :keepAlive
2020/05/08 11:05:11 [I] socket keepConnect :keepAlive
2020/05/08 11:05:22 [I] socket keepConnect :keepAlive
2020/05/08 11:05:37 [I] socket keepConnect :keepAlive
2020/05/08 11:05:46 [I] socket keepConnect :keepAlive
2020/05/08 11:05:56 [I] socket keepConnect :keepAlive
2020/05/08 11:08:24 [I] socket keepConnect :keepAlive
2020/05/08 11:08:47 [I] socket keepConnect :keepAlive
2020/05/08 11:09:39 [I] socket keepConnect :keepAlive
2020/05/08 11:27:35 [I] socket keepConnect :keepAlive
2020/05/08 11:37:59 [I] socket keepConnect :keepAlive
2020/05/08 11:38:03 [I] socket keepConnect :keepAlive
2020/05/08 11:39:55 [I] socket keepConnect :keepAlive
2020/05/08 11:40:01 [I] socket keepConnect :keepAlive
2020/05/08 11:40:06 [I] socket keepConnect :keepAlive
2020/05/08 11:44:31 [I] socket keepConnect :keepAlive
2020/05/08 11:44:38 [I] socket keepConnect :keepAlive
2020/05/08 11:44:58 [I] socket keepConnect :keepAlive
2020/05/08 11:45:00 [I] socket keepConnect :keepAlive
2020/05/08 11:45:05 [I] socket keepConnect :keepAlive
2020/05/08 11:45:49 [I] socket keepConnect :keepAlive
2020/05/08 11:57:22 [I] socket keepConnect :keepAlive
2020/05/08 12:03:37 [I] socket keepConnect :keepAlive
2020/05/08 12:05:11 [I] socket keepConnect :keepAlive
2020/05/08 12:05:22 [I] socket keepConnect :keepAlive
2020/05/08 12:05:37 [I] socket keepConnect :keepAlive
2020/05/08 12:05:46 [I] socket keepConnect :keepAlive
2020/05/08 12:05:56 [I] socket keepConnect :keepAlive
2020/05/08 12:08:24 [I] socket keepConnect :keepAlive
2020/05/08 12:08:47 [I] socket keepConnect :keepAlive
2020/05/08 12:09:39 [I] socket keepConnect :keepAlive
2020/05/08 12:27:35 [I] socket keepConnect :keepAlive
2020/05/08 12:37:59 [I] socket keepConnect :keepAlive
2020/05/08 12:38:03 [I] socket keepConnect :keepAlive
2020/05/08 12:39:55 [I] socket keepConnect :keepAlive
2020/05/08 12:40:01 [I] socket keepConnect :keepAlive
2020/05/08 12:40:06 [I] socket keepConnect :keepAlive
2020/05/08 12:44:31 [I] socket keepConnect :keepAlive
2020/05/08 12:44:38 [I] socket keepConnect :keepAlive
2020/05/08 12:44:58 [I] socket keepConnect :keepAlive
2020/05/08 12:45:00 [I] socket keepConnect :keepAlive
2020/05/08 12:45:05 [I] socket keepConnect :keepAlive
2020/05/08 12:45:49 [I] socket keepConnect :keepAlive
2020/05/08 12:57:22 [I] socket keepConnect :keepAlive
2020/05/08 13:03:37 [I] socket keepConnect :keepAlive
2020/05/08 13:05:11 [I] socket keepConnect :keepAlive
2020/05/08 13:05:22 [I] socket keepConnect :keepAlive
2020/05/08 13:05:37 [I] socket keepConnect :keepAlive
2020/05/08 13:05:46 [I] socket keepConnect :keepAlive
2020/05/08 13:05:56 [I] socket keepConnect :keepAlive
2020/05/08 13:08:24 [I] socket keepConnect :keepAlive
2020/05/08 13:08:47 [I] socket keepConnect :keepAlive
2020/05/08 13:09:39 [I] socket keepConnect :keepAlive
2020/05/08 13:27:35 [I] socket keepConnect :keepAlive
2020/05/08 13:37:59 [I] socket keepConnect :keepAlive
2020/05/08 13:38:03 [I] socket keepConnect :keepAlive
2020/05/08 13:39:55 [I] socket keepConnect :keepAlive
2020/05/08 13:40:01 [I] socket keepConnect :keepAlive
2020/05/08 13:40:06 [I] socket keepConnect :keepAlive
2020/05/08 13:44:31 [I] socket keepConnect :keepAlive
2020/05/08 13:44:38 [I] socket keepConnect :keepAlive
2020/05/08 13:44:58 [I] socket keepConnect :keepAlive
2020/05/08 13:45:00 [I] socket keepConnect :keepAlive
2020/05/08 13:45:05 [I] socket keepConnect :keepAlive
2020/05/08 13:45:49 [I] socket keepConnect :keepAlive
2020/05/08 13:48:00 [I] socket disconnect :disconnect
2020/05/08 13:48:01 [I] ++++++
2020/05/08 13:48:01 [I] ++++++
2020/05/08 13:48:01 [I] ++++++
2020/05/08 13:48:01 [I] connect
2020/05/08 13:48:01 [I] ++++++
2020/05/08 13:48:01 [I] ++++++
2020/05/08 13:48:01 [I] ++++++
2020/05/08 13:48:01 [I] ++++++
2020/05/08 13:48:01 [I] ++++++
2020/05/08 13:48:01 [I] ++++++
2020/05/08 13:48:16 [I] socket disconnect :disconnect
2020/05/08 13:48:17 [I] ++++++
2020/05/08 13:48:17 [I] ++++++
2020/05/08 13:48:17 [I] ++++++
2020/05/08 13:48:17 [I] connect
2020/05/08 13:48:17 [I] ++++++
2020/05/08 13:48:17 [I] ++++++
2020/05/08 13:48:17 [I] ++++++
2020/05/08 13:48:17 [I] ++++++
2020/05/08 13:48:17 [I] ++++++
2020/05/08 13:48:17 [I] ++++++
2020/05/08 13:48:47 [I] socket disconnect :disconnect
2020/05/08 13:48:47 [I] ++++++
2020/05/08 13:48:47 [I] ++++++
2020/05/08 13:48:47 [I] ++++++
2020/05/08 13:48:47 [I] connect
2020/05/08 13:48:47 [I] ++++++
2020/05/08 13:48:47 [I] ++++++
2020/05/08 13:48:47 [I] ++++++
2020/05/08 13:48:48 [I] ++++++
2020/05/08 13:48:48 [I] ++++++
2020/05/08 13:48:48 [I] ++++++
2020/05/08 13:49:21 [I] socket disconnect :disconnect
2020/05/08 13:49:21 [I] ++++++
2020/05/08 13:49:21 [I] ++++++
2020/05/08 13:49:21 [I] ++++++
2020/05/08 13:49:21 [I] connect
2020/05/08 13:49:21 [I] ++++++
2020/05/08 13:49:21 [I] ++++++
2020/05/08 13:49:21 [I] ++++++
2020/05/08 13:49:22 [I] ++++++
2020/05/08 13:49:22 [I] ++++++
2020/05/08 13:49:22 [I] ++++++
2020/05/08 13:53:20 [I] socket disconnect :disconnect
2020/05/08 13:53:21 [I] ++++++
2020/05/08 13:53:21 [I] ++++++
2020/05/08 13:53:21 [I] ++++++
2020/05/08 13:53:21 [I] connect
2020/05/08 13:53:21 [I] ++++++
2020/05/08 13:53:21 [I] ++++++
2020/05/08 13:53:21 [I] ++++++
2020/05/08 13:53:21 [I] ++++++
2020/05/08 13:53:21 [I] ++++++
2020/05/08 13:53:21 [I] ++++++
2020/05/08 13:53:22 [I] socket disconnect :disconnect
2020/05/08 13:53:23 [I] ++++++
2020/05/08 13:53:23 [I] ++++++
2020/05/08 13:53:23 [I] ++++++
2020/05/08 13:53:23 [I] connect
2020/05/08 13:53:23 [I] ++++++
2020/05/08 13:53:23 [I] ++++++
2020/05/08 13:53:23 [I] ++++++
2020/05/08 13:53:23 [I] ++++++
2020/05/08 13:53:23 [I] ++++++
2020/05/08 13:53:23 [I] ++++++
2020/05/08 13:54:10 [I] socket disconnect :disconnect
2020/05/08 13:54:11 [I] ++++++
2020/05/08 13:54:11 [I] ++++++
2020/05/08 13:54:11 [I] ++++++
2020/05/08 13:54:11 [I] connect
2020/05/08 13:54:11 [I] ++++++
2020/05/08 13:54:11 [I] ++++++
2020/05/08 13:54:11 [I] ++++++
2020/05/08 13:54:11 [I] ++++++
2020/05/08 13:54:11 [I] ++++++
2020/05/08 13:54:11 [I] ++++++
2020/05/08 13:54:15 [I] socket disconnect :disconnect
2020/05/08 13:54:16 [I] ++++++
2020/05/08 13:54:16 [I] ++++++
2020/05/08 13:54:16 [I] ++++++
2020/05/08 13:54:16 [I] connect
2020/05/08 13:54:16 [I] ++++++
2020/05/08 13:54:16 [I] ++++++
2020/05/08 13:54:16 [I] ++++++
2020/05/08 13:54:16 [I] ++++++
2020/05/08 13:54:16 [I] ++++++
2020/05/08 13:54:16 [I] ++++++
2020/05/08 13:54:44 [I] socket disconnect :disconnect
2020/05/08 13:54:44 [I] ++++++
2020/05/08 13:54:44 [I] ++++++
2020/05/08 13:54:44 [I] ++++++
2020/05/08 13:54:44 [I] connect
2020/05/08 13:54:44 [I] ++++++
2020/05/08 13:54:44 [I] ++++++
2020/05/08 13:54:44 [I] ++++++
2020/05/08 13:54:45 [I] ++++++
2020/05/08 13:54:45 [I] ++++++
2020/05/08 13:54:45 [I] ++++++
2020/05/08 13:55:19 [I] socket disconnect :disconnect
2020/05/08 13:55:20 [I] ++++++
2020/05/08 13:55:20 [I] ++++++
2020/05/08 13:55:20 [I] ++++++
2020/05/08 13:55:20 [I] connect
2020/05/08 13:55:20 [I] ++++++
2020/05/08 13:55:20 [I] ++++++
2020/05/08 13:55:20 [I] ++++++
2020/05/08 13:55:20 [I] ++++++
2020/05/08 13:55:20 [I] ++++++
2020/05/08 13:55:20 [I] ++++++
2020/05/08 13:57:22 [I] socket keepConnect :keepAlive
2020/05/08 14:00:58 [I] socket disconnect :disconnect
2020/05/08 14:00:59 [I] ++++++
2020/05/08 14:00:59 [I] ++++++
2020/05/08 14:00:59 [I] ++++++
2020/05/08 14:00:59 [I] connect
2020/05/08 14:00:59 [I] ++++++
2020/05/08 14:00:59 [I] ++++++
2020/05/08 14:00:59 [I] ++++++
2020/05/08 14:03:37 [I] socket keepConnect :keepAlive
2020/05/08 14:05:11 [I] socket keepConnect :keepAlive
2020/05/08 14:05:22 [I] socket keepConnect :keepAlive
2020/05/08 14:05:28 [I] socket disconnect :disconnect
2020/05/08 14:05:37 [I] socket keepConnect :keepAlive
2020/05/08 14:05:46 [I] socket keepConnect :keepAlive
2020/05/08 14:05:56 [I] socket keepConnect :keepAlive
2020/05/08 14:06:22 [I] ++++++
2020/05/08 14:06:22 [I] ++++++
2020/05/08 14:06:22 [I] ++++++
2020/05/08 14:06:25 [I] ++++++
2020/05/08 14:06:25 [I] ++++++
2020/05/08 14:06:25 [I] ++++++
2020/05/08 14:06:25 [I] connect
2020/05/08 14:06:25 [I] ++++++
2020/05/08 14:06:25 [I] ++++++
2020/05/08 14:06:25 [I] ++++++
2020/05/08 14:08:24 [I] socket keepConnect :keepAlive
2020/05/08 14:08:47 [I] socket keepConnect :keepAlive
2020/05/08 14:09:39 [I] socket keepConnect :keepAlive
2020/05/08 14:10:42 [I] socket disconnect :disconnect
2020/05/08 14:20:02 [I] ++++++
2020/05/08 14:20:02 [I] ++++++
2020/05/08 14:20:02 [I] ++++++
2020/05/08 14:20:20 [I] ++++++
2020/05/08 14:20:20 [I] ++++++
2020/05/08 14:20:20 [I] ++++++
2020/05/08 14:20:20 [I] connect
2020/05/08 14:20:21 [I] ++++++
2020/05/08 14:20:21 [I] ++++++
2020/05/08 14:20:21 [I] ++++++
2020/05/08 14:20:34 [I] socket disconnect :disconnect
2020/05/08 14:20:50 [I] ++++++
2020/05/08 14:20:50 [I] ++++++
2020/05/08 14:20:50 [I] ++++++
2020/05/08 14:20:51 [I] ++++++
2020/05/08 14:20:51 [I] ++++++
2020/05/08 14:20:51 [I] ++++++
2020/05/08 14:20:51 [I] connect
2020/05/08 14:20:51 [I] ++++++
2020/05/08 14:20:51 [I] ++++++
2020/05/08 14:20:51 [I] ++++++
2020/05/08 14:24:19 [I] socket disconnect :disconnect
2020/05/08 14:24:20 [I] ++++++
2020/05/08 14:24:20 [I] ++++++
2020/05/08 14:24:20 [I] ++++++
2020/05/08 14:24:20 [I] connect
2020/05/08 14:24:20 [I] ++++++
2020/05/08 14:24:20 [I] ++++++
2020/05/08 14:24:20 [I] ++++++
2020/05/08 14:24:24 [I] socket disconnect :disconnect
2020/05/08 14:24:24 [I] ++++++
2020/05/08 14:24:24 [I] ++++++
2020/05/08 14:24:24 [I] ++++++
2020/05/08 14:24:24 [I] connect
2020/05/08 14:24:25 [I] ++++++
2020/05/08 14:24:25 [I] ++++++
2020/05/08 14:24:25 [I] ++++++
2020/05/08 14:24:39 [I] socket disconnect :disconnect
2020/05/08 14:25:12 [I] ++++++
2020/05/08 14:25:12 [I] ++++++
2020/05/08 14:25:12 [I] ++++++
2020/05/08 14:25:12 [I] connect
2020/05/08 14:25:13 [I] ++++++
2020/05/08 14:25:13 [I] ++++++
2020/05/08 14:25:41 [I] socket disconnect :disconnect
2020/05/08 14:25:42 [I] ++++++
2020/05/08 14:25:42 [I] ++++++
2020/05/08 14:25:42 [I] ++++++
2020/05/08 14:25:42 [I] connect
2020/05/08 14:25:42 [I] ++++++
2020/05/08 14:25:42 [I] ++++++
2020/05/08 14:25:42 [I] ++++++
2020/05/08 14:25:42 [I] ++++++
2020/05/08 14:25:42 [I] ++++++
2020/05/08 14:25:42 [I] ++++++
2020/05/08 14:25:53 [I] socket disconnect :disconnect
2020/05/08 14:25:54 [I] ++++++
2020/05/08 14:25:54 [I] ++++++
2020/05/08 14:25:54 [I] ++++++
2020/05/08 14:25:54 [I] connect
2020/05/08 14:25:54 [I] ++++++
2020/05/08 14:25:54 [I] ++++++
2020/05/08 14:25:54 [I] ++++++
2020/05/08 14:26:27 [I] socket disconnect :disconnect
2020/05/08 14:26:28 [I] ++++++
2020/05/08 14:26:28 [I] ++++++
2020/05/08 14:26:28 [I] ++++++
2020/05/08 14:26:28 [I] connect
2020/05/08 14:26:28 [I] ++++++
2020/05/08 14:26:28 [I] ++++++
2020/05/08 14:26:28 [I] ++++++
2020/05/08 14:27:34 [I] socket disconnect :disconnect
2020/05/08 14:27:34 [I] ++++++
2020/05/08 14:27:34 [I] ++++++
2020/05/08 14:27:34 [I] ++++++
2020/05/08 14:27:34 [I] connect
2020/05/08 14:27:35 [I] ++++++
2020/05/08 14:27:35 [I] ++++++
2020/05/08 14:27:35 [I] ++++++
2020/05/08 14:27:35 [I] socket keepConnect :keepAlive
2020/05/08 14:28:00 [I] socket disconnect :disconnect
2020/05/08 14:28:01 [I] ++++++
2020/05/08 14:28:01 [I] ++++++
2020/05/08 14:28:01 [I] ++++++
2020/05/08 14:28:01 [I] connect
2020/05/08 14:28:01 [I] ++++++
2020/05/08 14:28:01 [I] ++++++
2020/05/08 14:28:01 [I] ++++++
2020/05/08 14:30:28 [I] socket disconnect :disconnect
2020/05/08 14:30:29 [I] ++++++
2020/05/08 14:30:29 [I] ++++++
2020/05/08 14:30:29 [I] ++++++
2020/05/08 14:30:29 [I] connect
2020/05/08 14:30:29 [I] ++++++
2020/05/08 14:30:29 [I] ++++++
2020/05/08 14:30:29 [I] ++++++
2020/05/08 14:31:50 [I] socket disconnect :disconnect
2020/05/08 14:31:51 [I] ++++++
2020/05/08 14:31:51 [I] ++++++
2020/05/08 14:31:51 [I] ++++++
2020/05/08 14:31:51 [I] connect
2020/05/08 14:31:51 [I] ++++++
2020/05/08 14:31:51 [I] ++++++
2020/05/08 14:31:51 [I] ++++++
2020/05/08 14:32:16 [I] socket disconnect :disconnect
2020/05/08 14:32:17 [I] ++++++
2020/05/08 14:32:17 [I] ++++++
2020/05/08 14:32:17 [I] ++++++
2020/05/08 14:32:17 [I] connect
2020/05/08 14:32:17 [I] ++++++
2020/05/08 14:32:17 [I] ++++++
2020/05/08 14:32:17 [I] ++++++
2020/05/08 14:32:29 [I] socket disconnect :disconnect
2020/05/08 14:32:30 [I] ++++++
2020/05/08 14:32:30 [I] ++++++
2020/05/08 14:32:30 [I] ++++++
2020/05/08 14:32:30 [I] connect
2020/05/08 14:32:30 [I] ++++++
2020/05/08 14:32:30 [I] ++++++
2020/05/08 14:32:30 [I] ++++++
2020/05/08 14:37:59 [I] socket keepConnect :keepAlive
2020/05/08 14:38:03 [I] socket keepConnect :keepAlive
2020/05/08 14:39:55 [I] socket keepConnect :keepAlive
2020/05/08 14:40:01 [I] socket keepConnect :keepAlive
2020/05/08 14:40:06 [I] socket keepConnect :keepAlive
2020/05/08 14:44:31 [I] socket keepConnect :keepAlive
2020/05/08 14:44:38 [I] socket keepConnect :keepAlive
2020/05/08 14:44:58 [I] socket keepConnect :keepAlive
2020/05/08 14:45:00 [I] socket keepConnect :keepAlive
2020/05/08 14:45:05 [I] socket keepConnect :keepAlive
2020/05/08 14:45:49 [I] socket keepConnect :keepAlive
2020/05/08 14:47:13 [I] socket disconnect :disconnect
2020/05/08 14:47:14 [I] ++++++
2020/05/08 14:47:14 [I] ++++++
2020/05/08 14:47:14 [I] ++++++
2020/05/08 14:47:14 [I] connect
2020/05/08 14:47:14 [I] ++++++
2020/05/08 14:47:14 [I] ++++++
2020/05/08 14:47:22 [I] socket disconnect :disconnect
2020/05/08 14:47:23 [I] ++++++
2020/05/08 14:47:23 [I] ++++++
2020/05/08 14:47:23 [I] ++++++
2020/05/08 14:47:23 [I] connect
2020/05/08 14:47:23 [I] ++++++
2020/05/08 14:47:23 [I] ++++++
2020/05/08 14:47:23 [I] ++++++
2020/05/08 14:47:24 [I] ++++++
2020/05/08 14:47:24 [I] ++++++
2020/05/08 14:47:24 [I] ++++++
2020/05/08 14:47:27 [I] socket disconnect :disconnect
2020/05/08 14:47:28 [I] ++++++
2020/05/08 14:47:28 [I] ++++++
2020/05/08 14:47:28 [I] ++++++
2020/05/08 14:47:28 [I] connect
2020/05/08 14:47:28 [I] ++++++
2020/05/08 14:47:28 [I] ++++++
2020/05/08 14:47:28 [I] ++++++
2020/05/08 14:47:28 [I] ++++++
2020/05/08 14:47:28 [I] ++++++
2020/05/08 14:47:28 [I] ++++++
2020/05/08 14:48:01 [I] socket keepConnect :keepAlive
2020/05/08 14:48:17 [I] socket keepConnect :keepAlive
2020/05/08 14:48:18 [I] ++++++
2020/05/08 14:48:18 [I] ++++++
2020/05/08 14:48:18 [I] ++++++
2020/05/08 14:48:18 [I] ++++++
2020/05/08 14:48:18 [I] ++++++
2020/05/08 14:48:18 [I] ++++++
2020/05/08 14:48:20 [I] ++++++
2020/05/08 14:48:20 [I] ++++++
2020/05/08 14:48:31 [I] ++++++
2020/05/08 14:48:31 [I] ++++++
2020/05/08 14:48:39 [I] ++++++
2020/05/08 14:48:39 [I] ++++++
2020/05/08 14:48:39 [I] ++++++
2020/05/08 14:48:39 [I] ++++++
2020/05/08 14:48:39 [I] ++++++
2020/05/08 14:48:39 [I] ++++++
2020/05/08 14:48:47 [I] socket keepConnect :keepAlive
2020/05/08 14:49:21 [I] socket keepConnect :keepAlive
2020/05/08 14:51:09 [I] socket disconnect :disconnect
2020/05/08 14:51:10 [I] ++++++
2020/05/08 14:51:10 [I] ++++++
2020/05/08 14:51:10 [I] ++++++
2020/05/08 14:51:10 [I] connect
2020/05/08 14:51:10 [I] ++++++
2020/05/08 14:51:10 [I] ++++++
2020/05/08 14:51:10 [I] ++++++
2020/05/08 14:51:10 [I] ++++++
2020/05/08 14:51:10 [I] ++++++
2020/05/08 14:51:10 [I] ++++++
2020/05/08 14:51:33 [I] socket disconnect :disconnect
2020/05/08 14:51:34 [I] ++++++
2020/05/08 14:51:34 [I] ++++++
2020/05/08 14:51:34 [I] ++++++
2020/05/08 14:51:34 [I] connect
2020/05/08 14:51:34 [I] ++++++
2020/05/08 14:51:34 [I] ++++++
2020/05/08 14:51:34 [I] ++++++
2020/05/08 14:51:34 [I] ++++++
2020/05/08 14:51:34 [I] ++++++
2020/05/08 14:51:34 [I] ++++++
2020/05/08 14:51:59 [I] socket disconnect :disconnect
2020/05/08 14:51:59 [I] ++++++
2020/05/08 14:51:59 [I] ++++++
2020/05/08 14:51:59 [I] ++++++
2020/05/08 14:51:59 [I] connect
2020/05/08 14:51:59 [I] ++++++
2020/05/08 14:51:59 [I] ++++++
2020/05/08 14:51:59 [I] ++++++
2020/05/08 14:52:00 [I] ++++++
2020/05/08 14:52:00 [I] ++++++
2020/05/08 14:52:00 [I] ++++++
2020/05/08 14:53:21 [I] socket keepConnect :keepAlive
2020/05/08 14:53:23 [I] socket keepConnect :keepAlive
2020/05/08 14:54:11 [I] socket keepConnect :keepAlive
2020/05/08 14:54:16 [I] socket keepConnect :keepAlive
2020/05/08 14:54:44 [I] socket keepConnect :keepAlive
2020/05/08 14:55:20 [I] socket keepConnect :keepAlive
2020/05/08 14:57:22 [I] socket keepConnect :keepAlive
2020/05/08 14:59:31 [I] socket disconnect :disconnect
2020/05/08 14:59:31 [I] ++++++
2020/05/08 14:59:31 [I] ++++++
2020/05/08 14:59:31 [I] ++++++
2020/05/08 14:59:31 [I] connect
2020/05/08 14:59:31 [I] ++++++
2020/05/08 14:59:31 [I] ++++++
2020/05/08 14:59:31 [I] ++++++
2020/05/08 14:59:32 [I] ++++++
2020/05/08 14:59:32 [I] ++++++
2020/05/08 14:59:32 [I] ++++++
2020/05/08 15:00:59 [I] socket keepConnect :keepAlive
2020/05/08 15:03:37 [I] socket keepConnect :keepAlive
2020/05/08 15:05:11 [I] socket keepConnect :keepAlive
2020/05/08 15:05:22 [I] socket keepConnect :keepAlive
2020/05/08 15:05:37 [I] socket keepConnect :keepAlive
2020/05/08 15:05:46 [I] socket keepConnect :keepAlive
2020/05/08 15:05:56 [I] socket keepConnect :keepAlive
2020/05/08 15:06:25 [I] socket keepConnect :keepAlive
2020/05/08 15:08:24 [I] socket keepConnect :keepAlive
2020/05/08 15:08:47 [I] socket keepConnect :keepAlive
2020/05/08 15:09:39 [I] socket keepConnect :keepAlive
2020/05/08 15:20:20 [I] socket keepConnect :keepAlive
2020/05/08 15:20:51 [I] socket keepConnect :keepAlive
2020/05/08 15:24:20 [I] socket keepConnect :keepAlive
2020/05/08 15:24:24 [I] socket keepConnect :keepAlive
2020/05/08 15:25:12 [I] socket keepConnect :keepAlive
2020/05/08 15:25:42 [I] socket keepConnect :keepAlive
2020/05/08 15:25:54 [I] socket keepConnect :keepAlive
2020/05/08 15:26:28 [I] socket keepConnect :keepAlive
2020/05/08 15:27:34 [I] socket keepConnect :keepAlive
2020/05/08 15:27:35 [I] socket keepConnect :keepAlive
2020/05/08 15:28:01 [I] socket keepConnect :keepAlive
2020/05/08 15:30:29 [I] socket keepConnect :keepAlive
2020/05/08 15:31:51 [I] socket keepConnect :keepAlive
2020/05/08 15:32:17 [I] socket keepConnect :keepAlive
2020/05/08 15:32:30 [I] socket keepConnect :keepAlive
2020/05/08 15:37:26 [I] ++++++
2020/05/08 15:37:28 [I] ++++++
2020/05/08 15:37:59 [I] socket keepConnect :keepAlive
2020/05/08 15:38:03 [I] socket keepConnect :keepAlive
2020/05/08 15:39:55 [I] socket keepConnect :keepAlive
2020/05/08 15:40:01 [I] socket keepConnect :keepAlive
2020/05/08 15:40:06 [I] socket keepConnect :keepAlive
2020/05/08 15:44:31 [I] socket keepConnect :keepAlive
2020/05/08 15:44:38 [I] socket keepConnect :keepAlive
2020/05/08 15:44:58 [I] socket keepConnect :keepAlive
2020/05/08 15:45:00 [I] socket keepConnect :keepAlive
2020/05/08 15:45:05 [I] socket keepConnect :keepAlive
2020/05/08 15:45:32 [I] socket disconnect :disconnect
2020/05/08 15:45:32 [I] ++++++
2020/05/08 15:45:32 [I] ++++++
2020/05/08 15:45:32 [I] ++++++
2020/05/08 15:45:32 [I] connect
2020/05/08 15:45:33 [I] ++++++
2020/05/08 15:45:33 [I] ++++++
2020/05/08 15:45:33 [I] ++++++
2020/05/08 15:45:42 [I] socket disconnect :disconnect
2020/05/08 15:45:43 [I] ++++++
2020/05/08 15:45:43 [I] ++++++
2020/05/08 15:45:43 [I] ++++++
2020/05/08 15:45:43 [I] connect
2020/05/08 15:45:43 [I] ++++++
2020/05/08 15:45:43 [I] ++++++
2020/05/08 15:45:43 [I] ++++++
2020/05/08 15:45:49 [I] socket keepConnect :keepAlive
2020/05/08 15:47:14 [I] socket keepConnect :keepAlive
2020/05/08 15:47:23 [I] socket keepConnect :keepAlive
2020/05/08 15:47:28 [I] socket keepConnect :keepAlive
2020/05/08 15:48:01 [I] socket keepConnect :keepAlive
2020/05/08 15:48:17 [I] socket keepConnect :keepAlive
2020/05/08 15:48:47 [I] socket keepConnect :keepAlive
2020/05/08 15:49:21 [I] socket keepConnect :keepAlive
2020/05/08 15:51:10 [I] socket keepConnect :keepAlive
2020/05/08 15:51:34 [I] socket keepConnect :keepAlive
2020/05/08 15:51:59 [I] socket keepConnect :keepAlive
2020/05/08 15:53:21 [I] socket keepConnect :keepAlive
2020/05/08 15:53:23 [I] socket keepConnect :keepAlive
2020/05/08 15:54:11 [I] socket keepConnect :keepAlive
2020/05/08 15:54:16 [I] socket keepConnect :keepAlive
2020/05/08 15:54:27 [I] socket disconnect :disconnect
2020/05/08 15:54:27 [I] ++++++
2020/05/08 15:54:27 [I] ++++++
2020/05/08 15:54:27 [I] ++++++
2020/05/08 15:54:27 [I] connect
2020/05/08 15:54:27 [I] ++++++
2020/05/08 15:54:27 [I] ++++++
2020/05/08 15:54:27 [I] ++++++
2020/05/08 15:54:28 [I] ++++++
2020/05/08 15:54:28 [I] ++++++
2020/05/08 15:54:28 [I] ++++++
2020/05/08 15:54:44 [I] socket keepConnect :keepAlive
2020/05/08 15:54:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/05/08 15:54:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:54:59 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/05/08 15:55:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/05/08 15:55:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:55:01 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:03 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:55:04 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:04 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/05/08 15:55:05 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:55:06 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:06 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/05/08 15:55:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,
SELECT DATE_FORMAT(a.record_time,'%m-%d') as time,count(id) as count from show_consulting a
where DATE_SUB(CURDATE(),INTERVAL 7 day) < a.record_time
GROUP BY DATE_FORMAT(a.record_time,'%Y-%m-%d')
2020/05/08 15:55:07 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:55:08 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:09 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/05/08 15:55:10 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:55:10 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:11 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/05/08 15:55:11 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/05/08 15:55:12 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:55:12 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:14 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:55:14 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:14 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/05/08 15:55:16 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:55:16 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:16 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/05/08 15:55:18 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:55:18 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/05/08 15:55:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,select name,code,level,maintain_integral_total 
from show_integral 
ORDER BY maintain_integral_total DESC limit 10
2020/05/08 15:55:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(create_time,'%Y-%m'),count(*) from exam_student_grade
where year(NOW()) = year(create_time)
GROUP BY DATE_FORMAT(create_time,'%Y-%m')
2020/05/08 15:55:19 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=0 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m')
2020/05/08 15:55:20 [I] socket keepConnect :keepAlive
2020/05/08 15:55:20 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT score_interval,examinee_count from show_exam_score_interval_count
2020/05/08 15:55:20 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT b.name,b.work_number,a.level,a.daily FROM point a
LEFT JOIN train_student b ON b.id = a.student_id 
ORDER BY exam DESC LIMIT 10;
2020/05/08 15:55:20 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT (
	SELECT COUNT(*)
	FROM train_activity a
	LEFT JOIN train_activity_plan b ON b.activity_id = a.id AND b.del_flag = 0
	WHERE a.del_flag = 0
	AND a.audit_result = 3
	AND b.id in(SELECT DISTINCT plan_id FROM train_plan_teacher_asso WHERE teacher_id = tt.id)
	AND b.end_time <= NOW()
)AS count_a,tt.name FROM train_teacher tt ORDER BY count_a desc
2020/05/08 15:55:20 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT name,gender FROM train_teacher
2020/05/08 15:55:21 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT time_month,count FROM show_common_echart WHERE type = 31 ORDER BY `order`
2020/05/08 15:55:21 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT a.name,a.type_name,count(*) as count from show_consulting a
GROUP BY a.name
ORDER BY count desc limit 5

2020/05/08 15:55:21 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT DATE_FORMAT(start_time,'%Y-%m') as date,count(online_flag=1 or null) as count from show_train 
where year(now()) = year(start_time)
GROUP BY DATE_FORMAT(start_time,'%Y-%m') 
2020/05/08 15:55:21 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT if(score<80,'fail','pass') as status,count(*) as count from show_exam_student
GROUP BY if(score <80,0,1)

2020/05/08 15:55:21 [addRedis.go:343 GetApiData()] [E] dial tcp 118.178.182.6:3306: i/o timeout,SELECT count(*),type_name from show_consulting a
GROUP BY a.type
2020/05/08 15:57:22 [I] socket keepConnect :keepAlive
2020/05/08 15:59:31 [I] socket keepConnect :keepAlive
2020/05/08 16:00:59 [I] socket keepConnect :keepAlive
2020/05/08 16:03:37 [I] socket keepConnect :keepAlive
2020/05/08 16:05:11 [I] socket keepConnect :keepAlive
2020/05/08 16:05:22 [I] socket keepConnect :keepAlive
2020/05/08 16:05:37 [I] socket keepConnect :keepAlive
2020/05/08 16:05:46 [I] socket keepConnect :keepAlive
2020/05/08 16:05:56 [I] socket keepConnect :keepAlive
2020/05/08 16:06:25 [I] socket keepConnect :keepAlive
2020/05/08 16:08:24 [I] socket keepConnect :keepAlive
2020/05/08 16:08:47 [I] socket keepConnect :keepAlive
2020/05/08 16:09:39 [I] socket keepConnect :keepAlive
2020/05/08 16:20:20 [I] socket keepConnect :keepAlive
2020/05/08 16:20:51 [I] socket keepConnect :keepAlive
2020/05/08 16:24:20 [I] socket keepConnect :keepAlive
2020/05/08 16:24:24 [I] socket keepConnect :keepAlive
2020/05/08 16:25:12 [I] socket keepConnect :keepAlive
2020/05/08 16:25:42 [I] socket keepConnect :keepAlive
2020/05/08 16:25:54 [I] socket keepConnect :keepAlive
2020/05/08 16:26:28 [I] socket keepConnect :keepAlive
2020/05/08 16:27:34 [I] socket keepConnect :keepAlive
2020/05/08 16:27:35 [I] socket keepConnect :keepAlive
2020/05/08 16:28:01 [I] socket keepConnect :keepAlive
2020/05/08 16:30:29 [I] socket keepConnect :keepAlive
2020/05/08 16:31:51 [I] socket keepConnect :keepAlive
2020/05/08 16:32:17 [I] socket keepConnect :keepAlive
2020/05/08 16:32:30 [I] socket keepConnect :keepAlive
2020/05/08 16:37:59 [I] socket keepConnect :keepAlive
2020/05/08 16:38:03 [I] socket keepConnect :keepAlive
2020/05/08 16:39:55 [I] socket keepConnect :keepAlive
2020/05/08 16:40:01 [I] socket keepConnect :keepAlive
2020/05/08 16:40:06 [I] socket keepConnect :keepAlive
2020/05/08 16:44:31 [I] socket keepConnect :keepAlive
2020/05/08 16:44:38 [I] socket keepConnect :keepAlive
2020/05/08 16:44:58 [I] socket keepConnect :keepAlive
2020/05/08 16:45:00 [I] socket keepConnect :keepAlive
2020/05/08 16:45:05 [I] socket keepConnect :keepAlive
2020/05/08 16:45:32 [I] socket keepConnect :keepAlive
2020/05/08 16:45:43 [I] socket keepConnect :keepAlive
2020/05/08 16:45:49 [I] socket keepConnect :keepAlive
2020/05/08 16:47:14 [I] socket keepConnect :keepAlive
2020/05/08 16:47:23 [I] socket keepConnect :keepAlive
2020/05/08 16:47:28 [I] socket keepConnect :keepAlive
2020/05/08 16:48:01 [I] socket keepConnect :keepAlive
2020/05/08 16:48:17 [I] socket keepConnect :keepAlive
2020/05/08 16:48:47 [I] socket keepConnect :keepAlive
2020/05/08 16:49:21 [I] socket keepConnect :keepAlive
2020/05/08 16:51:10 [I] socket keepConnect :keepAlive
2020/05/08 16:51:34 [I] socket keepConnect :keepAlive
2020/05/08 16:51:59 [I] socket keepConnect :keepAlive
2020/05/08 16:53:21 [I] socket keepConnect :keepAlive
2020/05/08 16:53:23 [I] socket keepConnect :keepAlive
2020/05/08 16:54:11 [I] socket keepConnect :keepAlive
2020/05/08 16:54:16 [I] socket keepConnect :keepAlive
2020/05/08 16:54:27 [I] socket keepConnect :keepAlive
2020/05/08 16:54:44 [I] socket keepConnect :keepAlive
2020/05/08 16:55:20 [I] socket keepConnect :keepAlive
2020/05/08 16:57:22 [I] socket keepConnect :keepAlive
2020/05/08 16:59:31 [I] socket keepConnect :keepAlive
2020/05/08 17:00:59 [I] socket keepConnect :keepAlive
2020/05/08 17:03:37 [I] socket keepConnect :keepAlive
2020/05/08 17:05:11 [I] socket keepConnect :keepAlive
2020/05/08 17:05:22 [I] socket keepConnect :keepAlive
2020/05/08 17:05:37 [I] socket keepConnect :keepAlive
2020/05/08 17:05:46 [I] socket keepConnect :keepAlive
2020/05/08 17:05:56 [I] socket keepConnect :keepAlive
2020/05/08 17:06:25 [I] socket keepConnect :keepAlive
2020/05/08 17:08:24 [I] socket keepConnect :keepAlive
2020/05/08 17:08:47 [I] socket keepConnect :keepAlive
2020/05/08 17:09:39 [I] socket keepConnect :keepAlive
2020/05/08 17:20:20 [I] socket keepConnect :keepAlive
2020/05/08 17:20:51 [I] socket keepConnect :keepAlive
2020/05/08 17:24:20 [I] socket keepConnect :keepAlive
2020/05/08 17:24:24 [I] socket keepConnect :keepAlive
2020/05/08 17:25:12 [I] socket keepConnect :keepAlive
2020/05/08 17:25:42 [I] socket keepConnect :keepAlive
2020/05/08 17:25:54 [I] socket keepConnect :keepAlive
2020/05/08 17:26:28 [I] socket keepConnect :keepAlive
2020/05/08 17:27:34 [I] socket keepConnect :keepAlive
2020/05/08 17:27:35 [I] socket keepConnect :keepAlive
2020/05/08 17:28:01 [I] socket keepConnect :keepAlive
2020/05/08 17:30:29 [I] socket keepConnect :keepAlive
2020/05/08 17:31:51 [I] socket keepConnect :keepAlive
2020/05/08 17:32:17 [I] socket keepConnect :keepAlive
2020/05/08 17:32:30 [I] socket keepConnect :keepAlive
2020/05/08 17:37:59 [I] socket keepConnect :keepAlive
2020/05/08 17:38:03 [I] socket keepConnect :keepAlive
2020/05/08 17:39:55 [I] socket keepConnect :keepAlive
2020/05/08 17:40:01 [I] socket keepConnect :keepAlive
2020/05/08 17:40:06 [I] socket keepConnect :keepAlive
2020/05/08 17:44:31 [I] socket keepConnect :keepAlive
2020/05/08 17:44:38 [I] socket keepConnect :keepAlive
2020/05/08 17:44:58 [I] socket keepConnect :keepAlive
2020/05/08 17:45:00 [I] socket keepConnect :keepAlive
2020/05/08 17:45:05 [I] socket keepConnect :keepAlive
2020/05/08 17:45:32 [I] socket keepConnect :keepAlive
2020/05/08 17:45:43 [I] socket keepConnect :keepAlive
2020/05/08 17:45:49 [I] socket keepConnect :keepAlive
2020/05/08 17:47:14 [I] socket keepConnect :keepAlive
2020/05/08 17:47:23 [I] socket keepConnect :keepAlive
2020/05/08 17:47:28 [I] socket keepConnect :keepAlive
2020/05/08 17:48:01 [I] socket keepConnect :keepAlive
2020/05/08 17:48:17 [I] socket keepConnect :keepAlive
2020/05/08 17:48:47 [I] socket keepConnect :keepAlive
2020/05/08 17:49:21 [I] socket keepConnect :keepAlive
2020/05/08 17:51:10 [I] socket keepConnect :keepAlive
2020/05/08 17:51:34 [I] socket keepConnect :keepAlive
2020/05/08 17:51:59 [I] socket keepConnect :keepAlive
2020/05/08 17:53:21 [I] socket keepConnect :keepAlive
2020/05/08 17:53:23 [I] socket keepConnect :keepAlive
2020/05/08 17:54:11 [I] socket keepConnect :keepAlive
2020/05/08 17:54:16 [I] socket keepConnect :keepAlive
2020/05/08 17:54:27 [I] socket keepConnect :keepAlive
2020/05/08 17:54:44 [I] socket keepConnect :keepAlive
2020/05/08 17:55:20 [I] socket keepConnect :keepAlive
2020/05/08 17:57:22 [I] socket keepConnect :keepAlive
2020/05/08 17:59:31 [I] socket keepConnect :keepAlive
2020/05/08 18:00:59 [I] socket keepConnect :keepAlive
2020/05/08 18:03:37 [I] socket keepConnect :keepAlive
2020/05/08 18:05:11 [I] socket keepConnect :keepAlive
2020/05/08 18:05:22 [I] socket keepConnect :keepAlive
2020/05/08 18:05:37 [I] socket keepConnect :keepAlive
2020/05/08 18:05:46 [I] socket keepConnect :keepAlive
2020/05/08 18:05:56 [I] socket keepConnect :keepAlive
2020/05/08 18:06:25 [I] socket keepConnect :keepAlive
2020/05/08 18:08:24 [I] socket keepConnect :keepAlive
2020/05/08 18:08:47 [I] socket keepConnect :keepAlive
2020/05/08 18:09:39 [I] socket keepConnect :keepAlive
2020/05/08 18:20:21 [I] socket keepConnect :keepAlive
2020/05/08 18:20:51 [I] socket keepConnect :keepAlive
2020/05/08 18:24:20 [I] socket keepConnect :keepAlive
2020/05/08 18:24:24 [I] socket keepConnect :keepAlive
2020/05/08 18:25:12 [I] socket keepConnect :keepAlive
2020/05/08 18:25:42 [I] socket keepConnect :keepAlive
2020/05/08 18:25:54 [I] socket keepConnect :keepAlive
2020/05/08 18:26:28 [I] socket keepConnect :keepAlive
2020/05/08 18:27:34 [I] socket keepConnect :keepAlive
2020/05/08 18:27:35 [I] socket keepConnect :keepAlive
2020/05/08 18:28:01 [I] socket keepConnect :keepAlive
2020/05/08 18:30:29 [I] socket keepConnect :keepAlive
2020/05/08 18:31:51 [I] socket keepConnect :keepAlive
2020/05/08 18:32:17 [I] socket keepConnect :keepAlive
2020/05/08 18:32:30 [I] socket keepConnect :keepAlive
2020/05/08 18:37:59 [I] socket keepConnect :keepAlive
2020/05/08 18:38:03 [I] socket keepConnect :keepAlive
2020/05/08 18:39:55 [I] socket keepConnect :keepAlive
2020/05/08 18:40:01 [I] socket keepConnect :keepAlive
2020/05/08 18:40:06 [I] socket keepConnect :keepAlive
2020/05/08 18:43:58 [I] socket disconnect :disconnect
2020/05/09 09:46:44 [I] ----------maxDataCount---200--maxDataSetCount---200
2020/05/09 09:46:44 [I] ---MySQLHost-121.37.166.182----MySQLPassword-das1432@Si---UyunUrl-----ShowUrl- ---StoreUlr------
2020/05/09 09:46:44 [I] Starting Show
2020/05/09 09:46:44 [I] Version: v1, Commit: ad676622-dirty, Build date: 2017-06-16 15:54:54 +0800 CST
2020/05/09 09:46:44 [I] Configuration Info
Config files:
  [0]: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/defaults.properties
Paths:
  home: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server
  data: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data
  logs: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server\data\log
  plugins: C:\Users\Administrator\Desktop\dashboard-windows(本地可运行版)\server/conf/plugin
  oracleEnv: 
  tenantUrl: 
  certificate: /bin/uyuntest.crt
  showurl: 
  pkg_config_path: 
  verification: true
  MaxDataCount: 200
  Language: 
  MaxDataSetCount: 200

2020/05/09 09:46:44 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/05/09 09:46:44 [I] Database: mysql
2020/05/09 09:46:44 [I] ---mysql---host-121.37.166.182:3306------name-dashboard_demo----user-dash_zw----paw-das1432@Si----
2020/05/09 09:46:44 [I] Database: mysql
2020/05/09 09:46:45 [createRedis.go:34 Create()] [E] NOAUTH Authentication required.
2020/05/09 09:46:45 [createdb.go:39 CreateDb()] [E] plugin: not implemented
2020/05/09 09:46:45 [builtInData.go:31 Built_in_data()] [E] open : The system cannot find the file specified.
2020/05/09 09:46:47 [I] Listen: http://0.0.0.0:7700
2020/05/09 09:49:23 [I] ++++++
2020/05/09 09:49:23 [I] ++++++
2020/05/09 09:49:23 [I] ++++++
2020/05/09 09:49:35 [I] ++++++
2020/05/09 09:49:35 [I] ++++++
2020/05/09 09:49:35 [I] ++++++
2020/05/09 09:49:35 [I] connect
2020/05/09 09:49:35 [I] ++++++
2020/05/09 09:49:36 [I] ++++++
2020/05/09 09:49:36 [I] ++++++
2020/05/09 09:49:36 [I] ++++++
2020/05/09 09:49:36 [I] ++++++
2020/05/09 09:49:36 [I] ++++++
2020/05/09 09:52:27 [I] socket disconnect :disconnect
2020/05/09 09:52:27 [I] socket disconnect :disconnect
2020/05/09 09:52:27 [I] ++++++
2020/05/09 09:52:27 [I] ++++++
2020/05/09 09:52:27 [I] ++++++
2020/05/09 09:52:27 [I] ++++++
2020/05/09 09:52:27 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] connect
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] socket disconnect :disconnect
2020/05/09 09:52:29 [I] socket disconnect :disconnect
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:29 [I] ++++++
2020/05/09 09:52:35 [I] ++++++
2020/05/09 09:52:35 [I] connect
2020/05/09 09:52:35 [I] ++++++
2020/05/09 09:52:35 [I] ++++++
2020/05/09 09:52:35 [I] ++++++
2020/05/09 09:52:35 [I] ++++++
2020/05/09 09:52:35 [I] ++++++
2020/05/09 09:52:35 [I] ++++++
2020/05/09 09:52:35 [I] ++++++
2020/05/09 09:52:35 [I] ++++++
2020/05/09 09:53:36 [I] socket disconnect :disconnect
2020/05/09 09:53:36 [I] socket disconnect :disconnect
2020/05/09 09:53:36 [I] ++++++
2020/05/09 09:53:36 [I] ++++++
2020/05/09 09:53:36 [I] ++++++
2020/05/09 09:53:36 [I] ++++++
2020/05/09 09:53:36 [I] ++++++
2020/05/09 09:53:38 [I] ++++++
2020/05/09 09:53:38 [I] ++++++
2020/05/09 09:53:38 [I] ++++++
2020/05/09 09:53:38 [I] connect
2020/05/09 09:53:38 [I] ++++++
2020/05/09 09:53:38 [I] ++++++
2020/05/09 09:53:38 [I] ++++++
2020/05/09 09:53:38 [I] ++++++
2020/05/09 09:53:38 [I] ++++++
2020/05/09 09:53:38 [I] ++++++
2020/05/09 09:53:41 [I] socket disconnect :disconnect
2020/05/09 09:53:41 [I] socket disconnect :disconnect
2020/05/09 09:53:41 [I] ++++++
2020/05/09 09:53:41 [I] ++++++
2020/05/09 09:53:41 [I] ++++++
2020/05/09 09:53:41 [I] ++++++
2020/05/09 09:53:41 [I] ++++++
2020/05/09 09:55:08 [I] ++++++
2020/05/09 09:55:08 [I] ++++++
2020/05/09 09:55:08 [I] ++++++
2020/05/09 09:55:08 [I] connect
2020/05/09 09:55:08 [I] ++++++
2020/05/09 09:55:08 [I] ++++++
2020/05/09 09:55:08 [I] ++++++
2020/05/09 09:55:08 [I] ++++++
2020/05/09 09:55:08 [I] ++++++
2020/05/09 09:55:08 [I] ++++++
2020/05/09 09:55:11 [I] socket disconnect :disconnect
2020/05/09 09:55:12 [I] ++++++
2020/05/09 09:55:12 [I] ++++++
2020/05/09 09:55:12 [I] ++++++
2020/05/09 09:55:12 [I] connect
2020/05/09 09:55:12 [I] ++++++
2020/05/09 09:55:12 [I] ++++++
2020/05/09 09:55:12 [I] ++++++
2020/05/09 09:55:12 [I] ++++++
2020/05/09 09:55:12 [I] ++++++
2020/05/09 09:55:12 [I] ++++++
2020/05/09 09:56:20 [I] socket disconnect :disconnect
2020/05/09 09:56:21 [I] ++++++
2020/05/09 09:56:21 [I] ++++++
2020/05/09 09:56:21 [I] ++++++
2020/05/09 09:56:21 [I] connect
2020/05/09 09:56:21 [I] ++++++
2020/05/09 09:56:21 [I] ++++++
2020/05/09 09:56:21 [I] ++++++
2020/05/09 09:56:21 [I] ++++++
2020/05/09 09:56:21 [I] ++++++
2020/05/09 09:56:21 [I] ++++++
2020/05/09 09:57:13 [I] socket disconnect :disconnect
2020/05/09 09:57:14 [I] ++++++
2020/05/09 09:57:14 [I] ++++++
2020/05/09 09:57:14 [I] ++++++
2020/05/09 09:57:14 [I] connect
2020/05/09 09:57:14 [I] ++++++
2020/05/09 09:57:14 [I] ++++++
2020/05/09 09:57:14 [I] ++++++
2020/05/09 09:57:14 [I] ++++++
2020/05/09 09:57:14 [I] ++++++
2020/05/09 09:57:14 [I] ++++++
2020/05/09 09:57:25 [I] socket disconnect :disconnect
2020/05/09 09:57:25 [I] ++++++
2020/05/09 09:57:25 [I] ++++++
2020/05/09 09:57:25 [I] ++++++
2020/05/09 09:57:25 [I] connect
2020/05/09 09:57:25 [I] ++++++
2020/05/09 09:57:25 [I] ++++++
2020/05/09 09:57:25 [I] ++++++
2020/05/09 09:57:26 [I] ++++++
2020/05/09 09:57:26 [I] ++++++
2020/05/09 09:57:26 [I] ++++++
2020/05/09 09:58:24 [I] socket disconnect :disconnect
2020/05/09 09:58:24 [I] socket disconnect :disconnect
2020/05/09 09:58:24 [I] ++++++
2020/05/09 09:58:24 [I] ++++++
2020/05/09 09:58:24 [I] ++++++
2020/05/09 09:58:24 [I] ++++++
2020/05/09 09:58:24 [I] ++++++
2020/05/09 09:58:38 [I] ++++++
2020/05/09 09:58:38 [I] ++++++
2020/05/09 09:58:38 [I] ++++++
2020/05/09 09:58:38 [I] connect
2020/05/09 09:58:38 [I] ++++++
2020/05/09 09:58:38 [I] ++++++
2020/05/09 09:58:38 [I] ++++++
2020/05/09 09:58:38 [I] ++++++
2020/05/09 09:58:38 [I] ++++++
2020/05/09 09:58:38 [I] ++++++
2020/05/09 09:59:42 [I] socket disconnect :disconnect
2020/05/09 09:59:43 [I] ++++++
2020/05/09 09:59:43 [I] ++++++
2020/05/09 09:59:43 [I] ++++++
2020/05/09 09:59:43 [I] connect
2020/05/09 09:59:43 [I] ++++++
2020/05/09 09:59:43 [I] ++++++
2020/05/09 09:59:43 [I] ++++++
2020/05/09 09:59:43 [I] ++++++
2020/05/09 09:59:43 [I] ++++++
2020/05/09 09:59:43 [I] ++++++
2020/05/09 10:00:29 [I] socket disconnect :disconnect
2020/05/09 10:00:30 [I] ++++++
2020/05/09 10:00:30 [I] ++++++
2020/05/09 10:00:30 [I] ++++++
2020/05/09 10:00:30 [I] connect
2020/05/09 10:00:30 [I] ++++++
2020/05/09 10:00:30 [I] ++++++
2020/05/09 10:00:30 [I] ++++++
2020/05/09 10:00:30 [I] ++++++
2020/05/09 10:00:30 [I] ++++++
2020/05/09 10:00:30 [I] ++++++
2020/05/09 10:01:13 [I] socket disconnect :disconnect
2020/05/09 10:01:13 [I] socket disconnect :disconnect
2020/05/09 10:01:13 [I] ++++++
2020/05/09 10:01:13 [I] ++++++
2020/05/09 10:01:13 [I] ++++++
2020/05/09 10:01:13 [I] ++++++
2020/05/09 10:01:13 [I] ++++++
2020/05/09 10:01:15 [I] ++++++
2020/05/09 10:01:15 [I] ++++++
2020/05/09 10:01:15 [I] ++++++
2020/05/09 10:01:15 [I] connect
2020/05/09 10:01:15 [I] ++++++
2020/05/09 10:01:15 [I] ++++++
2020/05/09 10:01:15 [I] ++++++
2020/05/09 10:01:16 [I] ++++++
2020/05/09 10:01:16 [I] ++++++
2020/05/09 10:01:16 [I] ++++++
2020/05/09 10:01:18 [I] socket disconnect :disconnect
2020/05/09 10:01:19 [I] ++++++
2020/05/09 10:01:19 [I] ++++++
2020/05/09 10:01:19 [I] ++++++
2020/05/09 10:01:19 [I] connect
2020/05/09 10:01:19 [I] ++++++
2020/05/09 10:01:19 [I] ++++++
2020/05/09 10:01:19 [I] ++++++
2020/05/09 10:01:19 [I] ++++++
2020/05/09 10:01:19 [I] ++++++
2020/05/09 10:01:19 [I] ++++++
2020/05/09 10:12:41 [I] socket disconnect :disconnect
2020/05/09 10:12:42 [I] ++++++
2020/05/09 10:12:42 [I] ++++++
2020/05/09 10:12:42 [I] ++++++
2020/05/09 10:12:42 [I] connect
2020/05/09 10:12:42 [I] ++++++
2020/05/09 10:12:42 [I] ++++++
2020/05/09 10:12:42 [I] ++++++
2020/05/09 10:12:42 [I] ++++++
2020/05/09 10:12:42 [I] ++++++
2020/05/09 10:12:42 [I] ++++++
2020/05/09 10:45:50 [I] socket disconnect :disconnect
2020/05/09 10:45:50 [I] socket disconnect :disconnect
2020/05/09 10:45:50 [I] ++++++
2020/05/09 10:45:50 [I] ++++++
2020/05/09 10:45:50 [I] ++++++
2020/05/09 10:45:50 [I] ++++++
2020/05/09 10:45:50 [I] ++++++
2020/05/09 10:47:25 [I] ++++++
2020/05/09 10:47:25 [I] ++++++
2020/05/09 10:47:25 [I] ++++++
2020/05/09 10:47:25 [I] connect
2020/05/09 10:47:25 [I] ++++++
2020/05/09 10:47:25 [I] ++++++
2020/05/09 10:47:25 [I] ++++++
2020/05/09 10:47:25 [I] ++++++
2020/05/09 10:47:25 [I] ++++++
2020/05/09 10:47:25 [I] ++++++
2020/05/09 10:47:40 [I] socket disconnect :disconnect
2020/05/09 10:47:40 [I] socket disconnect :disconnect
2020/05/09 10:47:40 [I] ++++++
2020/05/09 10:47:40 [I] ++++++
2020/05/09 10:47:40 [I] ++++++
2020/05/09 10:47:40 [I] ++++++
2020/05/09 10:47:40 [I] ++++++
2020/05/09 10:48:29 [I] ++++++
2020/05/09 10:48:29 [I] ++++++
2020/05/09 10:48:29 [I] ++++++
2020/05/09 10:48:29 [I] connect
2020/05/09 10:48:29 [I] ++++++
2020/05/09 10:48:29 [I] ++++++
2020/05/09 10:48:29 [I] ++++++
2020/05/09 10:48:29 [I] ++++++
2020/05/09 10:48:29 [I] ++++++
2020/05/09 10:48:29 [I] ++++++
2020/05/09 10:48:40 [I] socket disconnect :disconnect
2020/05/09 10:48:40 [I] socket disconnect :disconnect
2020/05/09 10:48:40 [I] ++++++
2020/05/09 10:48:40 [I] ++++++
2020/05/09 10:48:40 [I] ++++++
2020/05/09 10:48:40 [I] ++++++
2020/05/09 10:48:40 [I] ++++++
2020/05/09 10:48:44 [I] ++++++
2020/05/09 10:48:44 [I] connect
2020/05/09 10:48:44 [I] ++++++
2020/05/09 10:48:44 [I] ++++++
2020/05/09 10:48:44 [I] ++++++
2020/05/09 10:48:44 [I] ++++++
2020/05/09 10:48:44 [I] ++++++
2020/05/09 10:48:44 [I] ++++++
2020/05/09 10:48:44 [I] ++++++
2020/05/09 10:48:44 [I] ++++++
2020/05/09 10:48:48 [I] socket disconnect :disconnect
2020/05/09 10:48:48 [I] socket disconnect :disconnect
2020/05/09 10:48:48 [I] ++++++
2020/05/09 10:48:48 [I] ++++++
2020/05/09 10:48:49 [I] ++++++
2020/05/09 10:48:49 [I] ++++++
2020/05/09 10:48:49 [I] ++++++
2020/05/09 10:49:01 [I] ++++++
2020/05/09 10:49:01 [I] ++++++
2020/05/09 10:49:01 [I] ++++++
2020/05/09 10:49:01 [I] connect
2020/05/09 10:49:02 [I] ++++++
2020/05/09 10:49:02 [I] ++++++
2020/05/09 10:49:02 [I] ++++++
2020/05/09 10:49:02 [I] ++++++
2020/05/09 10:49:02 [I] ++++++
2020/05/09 10:49:02 [I] ++++++
2020/05/09 10:49:04 [I] socket disconnect :disconnect
2020/05/09 10:49:04 [I] socket disconnect :disconnect
2020/05/09 10:49:04 [I] ++++++
2020/05/09 10:49:04 [I] ++++++
2020/05/09 10:49:05 [I] ++++++
2020/05/09 10:49:05 [I] ++++++
2020/05/09 10:49:05 [I] ++++++
2020/05/09 10:49:17 [I] ++++++
2020/05/09 10:49:17 [I] connect
2020/05/09 10:49:17 [I] ++++++
2020/05/09 10:49:17 [I] ++++++
2020/05/09 10:49:17 [I] ++++++
2020/05/09 10:49:17 [I] ++++++
2020/05/09 10:49:17 [I] ++++++
2020/05/09 10:49:18 [I] ++++++
2020/05/09 10:49:18 [I] ++++++
2020/05/09 10:49:18 [I] ++++++
2020/05/09 10:49:35 [I] socket keepConnect :keepAlive
2020/05/09 10:52:29 [I] socket keepConnect :keepAlive
2020/05/09 10:52:35 [I] socket keepConnect :keepAlive
2020/05/09 10:53:15 [I] socket disconnect :disconnect
2020/05/09 10:53:38 [I] socket keepConnect :keepAlive
2020/05/09 10:54:05 [I] ++++++
2020/05/09 10:54:05 [I] ++++++
2020/05/09 10:54:05 [I] ++++++
2020/05/09 10:54:05 [I] connect
2020/05/09 10:54:05 [I] ++++++
2020/05/09 10:54:05 [I] ++++++
2020/05/09 10:54:05 [I] ++++++
2020/05/09 10:54:05 [I] ++++++
2020/05/09 10:54:06 [I] ++++++
2020/05/09 10:54:06 [I] ++++++
2020/05/09 10:54:46 [I] socket disconnect :disconnect
2020/05/09 10:54:47 [I] ++++++
2020/05/09 10:54:47 [I] ++++++
2020/05/09 10:54:47 [I] ++++++
2020/05/09 10:54:47 [I] connect
2020/05/09 10:54:47 [I] ++++++
2020/05/09 10:54:47 [I] ++++++
2020/05/09 10:54:47 [I] ++++++
2020/05/09 10:54:47 [I] ++++++
2020/05/09 10:54:47 [I] ++++++
2020/05/09 10:54:47 [I] ++++++
2020/05/09 10:55:08 [I] socket keepConnect :keepAlive
2020/05/09 10:55:12 [I] socket keepConnect :keepAlive
2020/05/09 10:56:21 [I] socket keepConnect :keepAlive
2020/05/09 10:56:23 [I] ++++++
2020/05/09 10:56:23 [I] ++++++
2020/05/09 10:56:23 [I] ++++++
2020/05/09 10:56:23 [I] ++++++
2020/05/09 10:56:23 [I] ++++++
2020/05/09 10:56:23 [I] ++++++
2020/05/09 10:57:14 [I] socket keepConnect :keepAlive
2020/05/09 10:57:25 [I] socket keepConnect :keepAlive
2020/05/09 10:57:33 [I] ++++++
2020/05/09 10:57:33 [I] ++++++
2020/05/09 10:57:33 [I] ++++++
2020/05/09 10:57:33 [I] ++++++
2020/05/09 10:57:33 [I] ++++++
2020/05/09 10:57:33 [I] ++++++
2020/05/09 10:58:38 [I] socket keepConnect :keepAlive
2020/05/09 10:59:23 [I] socket disconnect :disconnect
2020/05/09 10:59:24 [I] ++++++
2020/05/09 10:59:24 [I] ++++++
2020/05/09 10:59:24 [I] ++++++
2020/05/09 10:59:24 [I] connect
2020/05/09 10:59:24 [I] ++++++
2020/05/09 10:59:24 [I] ++++++
2020/05/09 10:59:24 [I] ++++++
2020/05/09 10:59:24 [I] ++++++
2020/05/09 10:59:24 [I] ++++++
2020/05/09 10:59:24 [I] ++++++
2020/05/09 10:59:37 [I] socket disconnect :disconnect
2020/05/09 10:59:38 [I] ++++++
2020/05/09 10:59:38 [I] ++++++
2020/05/09 10:59:38 [I] ++++++
2020/05/09 10:59:38 [I] connect
2020/05/09 10:59:38 [I] ++++++
2020/05/09 10:59:38 [I] ++++++
2020/05/09 10:59:38 [I] ++++++
2020/05/09 10:59:38 [I] ++++++
2020/05/09 10:59:38 [I] ++++++
2020/05/09 10:59:38 [I] ++++++
2020/05/09 10:59:43 [I] socket keepConnect :keepAlive
2020/05/09 11:00:25 [I] ++++++
2020/05/09 11:00:30 [I] socket keepConnect :keepAlive
2020/05/09 11:00:34 [I] ++++++
2020/05/09 11:00:39 [I] ++++++
2020/05/09 11:00:44 [I] ++++++
2020/05/09 11:00:46 [I] ++++++
2020/05/09 11:00:48 [I] ++++++
2020/05/09 11:00:51 [I] ++++++
2020/05/09 11:00:53 [I] ++++++
2020/05/09 11:00:56 [I] socket disconnect :disconnect
2020/05/09 11:00:56 [I] ++++++
2020/05/09 11:00:56 [I] ++++++
2020/05/09 11:00:56 [I] ++++++
2020/05/09 11:00:56 [I] connect
2020/05/09 11:00:56 [I] ++++++
2020/05/09 11:00:56 [I] ++++++
2020/05/09 11:00:56 [I] ++++++
2020/05/09 11:00:57 [I] ++++++
2020/05/09 11:00:57 [I] ++++++
2020/05/09 11:00:57 [I] ++++++
2020/05/09 11:01:15 [I] socket keepConnect :keepAlive
2020/05/09 11:01:19 [I] socket keepConnect :keepAlive
2020/05/09 11:12:42 [I] socket keepConnect :keepAlive
2020/05/09 11:15:45 [I] ++++++
2020/05/09 11:15:45 [I] ++++++
2020/05/09 11:15:45 [I] ++++++
2020/05/09 11:15:45 [I] ++++++
2020/05/09 11:15:45 [I] ++++++
2020/05/09 11:15:45 [I] ++++++
2020/05/09 11:15:50 [I] ++++++
2020/05/09 11:15:50 [I] ++++++
2020/05/09 11:15:50 [I] ++++++
2020/05/09 11:15:50 [I] ++++++
2020/05/09 11:15:50 [I] ++++++
2020/05/09 11:15:50 [I] ++++++
2020/05/09 11:15:52 [I] ++++++
2020/05/09 11:15:52 [I] ++++++
2020/05/09 11:15:52 [I] ++++++
2020/05/09 11:15:52 [I] ++++++
2020/05/09 11:15:52 [I] ++++++
2020/05/09 11:15:52 [I] ++++++
2020/05/09 11:16:38 [I] socket disconnect :disconnect
2020/05/09 11:16:39 [I] ++++++
2020/05/09 11:16:39 [I] ++++++
2020/05/09 11:16:39 [I] ++++++
2020/05/09 11:16:39 [I] connect
2020/05/09 11:16:39 [I] ++++++
2020/05/09 11:16:39 [I] ++++++
2020/05/09 11:16:39 [I] ++++++
2020/05/09 11:16:39 [I] ++++++
2020/05/09 11:16:39 [I] ++++++
2020/05/09 11:16:39 [I] ++++++
2020/05/09 11:26:39 [I] socket disconnect :disconnect
2020/05/09 11:26:40 [I] ++++++
2020/05/09 11:26:40 [I] ++++++
2020/05/09 11:26:40 [I] ++++++
2020/05/09 11:26:40 [I] connect
2020/05/09 11:26:40 [I] ++++++
2020/05/09 11:26:40 [I] ++++++
2020/05/09 11:26:40 [I] ++++++
2020/05/09 11:26:40 [I] ++++++
2020/05/09 11:26:40 [I] ++++++
2020/05/09 11:26:40 [I] ++++++
2020/05/09 11:47:25 [I] socket keepConnect :keepAlive
2020/05/09 11:48:29 [I] socket keepConnect :keepAlive
2020/05/09 11:48:44 [I] socket keepConnect :keepAlive
2020/05/09 11:49:01 [I] socket keepConnect :keepAlive
2020/05/09 11:49:17 [I] socket keepConnect :keepAlive
2020/05/09 11:49:35 [I] socket keepConnect :keepAlive
2020/05/09 11:52:29 [I] socket keepConnect :keepAlive
2020/05/09 11:52:35 [I] socket keepConnect :keepAlive
2020/05/09 11:53:38 [I] socket keepConnect :keepAlive
2020/05/09 11:54:05 [I] socket keepConnect :keepAlive
2020/05/09 11:54:47 [I] socket keepConnect :keepAlive
2020/05/09 11:55:08 [I] socket keepConnect :keepAlive
2020/05/09 11:55:12 [I] socket keepConnect :keepAlive
2020/05/09 11:56:21 [I] socket keepConnect :keepAlive
2020/05/09 11:57:14 [I] socket keepConnect :keepAlive
2020/05/09 11:57:25 [I] socket keepConnect :keepAlive
2020/05/09 11:58:38 [I] socket keepConnect :keepAlive
2020/05/09 11:59:24 [I] socket keepConnect :keepAlive
2020/05/09 11:59:38 [I] socket keepConnect :keepAlive
2020/05/09 11:59:43 [I] socket keepConnect :keepAlive
2020/05/09 12:00:30 [I] socket keepConnect :keepAlive
2020/05/09 12:00:56 [I] socket keepConnect :keepAlive
2020/05/09 12:01:15 [I] socket keepConnect :keepAlive
2020/05/09 12:01:19 [I] socket keepConnect :keepAlive
2020/05/09 12:12:42 [I] socket keepConnect :keepAlive
2020/05/09 12:16:39 [I] socket keepConnect :keepAlive
2020/05/09 12:26:40 [I] socket keepConnect :keepAlive
2020/05/09 12:47:25 [I] socket keepConnect :keepAlive
2020/05/09 12:48:29 [I] socket keepConnect :keepAlive
2020/05/09 12:48:44 [I] socket keepConnect :keepAlive
2020/05/09 12:49:01 [I] socket keepConnect :keepAlive
2020/05/09 12:49:17 [I] socket keepConnect :keepAlive
2020/05/09 12:49:35 [I] socket keepConnect :keepAlive
2020/05/09 12:52:29 [I] socket keepConnect :keepAlive
2020/05/09 12:52:35 [I] socket keepConnect :keepAlive
2020/05/09 12:53:38 [I] socket keepConnect :keepAlive
2020/05/09 12:54:05 [I] socket keepConnect :keepAlive
2020/05/09 12:54:47 [I] socket keepConnect :keepAlive
2020/05/09 12:55:08 [I] socket keepConnect :keepAlive
2020/05/09 12:55:12 [I] socket keepConnect :keepAlive
2020/05/09 12:56:21 [I] socket keepConnect :keepAlive
2020/05/09 12:57:14 [I] socket keepConnect :keepAlive
2020/05/09 12:57:25 [I] socket keepConnect :keepAlive
2020/05/09 12:58:38 [I] socket keepConnect :keepAlive
2020/05/09 12:59:24 [I] socket keepConnect :keepAlive
2020/05/09 12:59:38 [I] socket keepConnect :keepAlive
2020/05/09 12:59:43 [I] socket keepConnect :keepAlive
2020/05/09 13:00:30 [I] socket keepConnect :keepAlive
2020/05/09 13:00:56 [I] socket keepConnect :keepAlive
2020/05/09 13:01:15 [I] socket keepConnect :keepAlive
2020/05/09 13:01:19 [I] socket keepConnect :keepAlive
2020/05/09 13:12:42 [I] socket keepConnect :keepAlive
2020/05/09 13:16:39 [I] socket keepConnect :keepAlive
2020/05/09 13:26:40 [I] socket keepConnect :keepAlive
2020/05/09 13:47:07 [I] socket disconnect :disconnect
2020/05/09 13:47:25 [I] socket keepConnect :keepAlive
2020/05/09 13:47:28 [I] ++++++
2020/05/09 13:47:28 [I] connect
2020/05/09 13:47:28 [I] ++++++
2020/05/09 13:47:28 [I] ++++++
2020/05/09 13:47:28 [I] ++++++
2020/05/09 13:47:28 [I] ++++++
2020/05/09 13:47:28 [I] ++++++
2020/05/09 13:47:28 [I] ++++++
2020/05/09 13:47:29 [I] ++++++
2020/05/09 13:47:29 [I] ++++++
2020/05/09 13:47:41 [I] socket disconnect :disconnect
2020/05/09 13:48:29 [I] socket keepConnect :keepAlive
2020/05/09 13:48:44 [I] socket keepConnect :keepAlive
2020/05/09 13:49:01 [I] socket keepConnect :keepAlive
2020/05/09 13:49:17 [I] socket keepConnect :keepAlive
2020/05/09 13:49:35 [I] socket keepConnect :keepAlive
2020/05/09 13:51:16 [I] ++++++
2020/05/09 13:51:16 [I] ++++++
2020/05/09 13:51:16 [I] ++++++
2020/05/09 13:51:16 [I] connect
2020/05/09 13:51:16 [I] ++++++
2020/05/09 13:51:16 [I] ++++++
2020/05/09 13:51:16 [I] ++++++
2020/05/09 13:51:17 [I] ++++++
2020/05/09 13:51:17 [I] ++++++
2020/05/09 13:51:17 [I] ++++++
2020/05/09 13:52:07 [I] socket disconnect :disconnect
2020/05/09 13:52:08 [I] ++++++
2020/05/09 13:52:08 [I] ++++++
2020/05/09 13:52:08 [I] ++++++
2020/05/09 13:52:08 [I] connect
2020/05/09 13:52:08 [I] ++++++
2020/05/09 13:52:08 [I] ++++++
2020/05/09 13:52:08 [I] ++++++
2020/05/09 13:52:08 [I] ++++++
2020/05/09 13:52:09 [I] ++++++
2020/05/09 13:52:09 [I] ++++++
2020/05/09 13:52:29 [I] socket keepConnect :keepAlive
2020/05/09 13:52:35 [I] socket keepConnect :keepAlive
2020/05/09 13:53:38 [I] socket keepConnect :keepAlive
2020/05/09 13:54:03 [I] socket disconnect :disconnect
2020/05/09 13:54:04 [I] ++++++
2020/05/09 13:54:04 [I] ++++++
2020/05/09 13:54:04 [I] ++++++
2020/05/09 13:54:04 [I] connect
2020/05/09 13:54:04 [I] ++++++
2020/05/09 13:54:04 [I] ++++++
2020/05/09 13:54:04 [I] ++++++
2020/05/09 13:54:05 [I] ++++++
2020/05/09 13:54:05 [I] ++++++
2020/05/09 13:54:05 [I] ++++++
2020/05/09 13:54:05 [I] socket keepConnect :keepAlive
2020/05/09 13:54:47 [I] socket keepConnect :keepAlive
2020/05/09 13:55:05 [I] socket disconnect :disconnect
2020/05/09 13:55:08 [I] socket keepConnect :keepAlive
2020/05/09 13:55:12 [I] socket keepConnect :keepAlive
2020/05/09 13:56:21 [I] socket keepConnect :keepAlive
2020/05/09 13:57:14 [I] socket keepConnect :keepAlive
2020/05/09 13:57:25 [I] socket keepConnect :keepAlive
2020/05/09 13:58:38 [I] socket keepConnect :keepAlive
2020/05/09 13:59:24 [I] socket keepConnect :keepAlive
2020/05/09 13:59:38 [I] socket keepConnect :keepAlive
2020/05/09 13:59:43 [I] socket keepConnect :keepAlive
2020/05/09 14:00:30 [I] socket keepConnect :keepAlive
2020/05/09 14:00:56 [I] socket keepConnect :keepAlive
2020/05/09 14:01:15 [I] socket keepConnect :keepAlive
2020/05/09 14:01:19 [I] socket keepConnect :keepAlive
2020/05/09 14:12:42 [I] socket keepConnect :keepAlive
2020/05/09 14:15:56 [I] ++++++
2020/05/09 14:15:56 [I] ++++++
2020/05/09 14:15:56 [I] ++++++
2020/05/09 14:15:56 [I] connect
2020/05/09 14:15:56 [I] ++++++
2020/05/09 14:15:56 [I] ++++++
2020/05/09 14:15:56 [I] ++++++
2020/05/09 14:15:57 [I] ++++++
2020/05/09 14:15:57 [I] ++++++
2020/05/09 14:15:57 [I] ++++++
2020/05/09 14:16:39 [I] socket keepConnect :keepAlive
2020/05/09 14:16:57 [I] socket disconnect :disconnect
2020/05/09 14:26:40 [I] socket keepConnect :keepAlive
2020/05/09 14:26:42 [I] ++++++
2020/05/09 14:26:42 [I] ++++++
2020/05/09 14:26:42 [I] ++++++
2020/05/09 14:26:42 [I] connect
2020/05/09 14:26:42 [I] ++++++
2020/05/09 14:26:43 [I] ++++++
2020/05/09 14:26:43 [I] ++++++
2020/05/09 14:26:43 [I] ++++++
2020/05/09 14:26:43 [I] ++++++
2020/05/09 14:26:43 [I] ++++++
2020/05/09 14:27:20 [I] socket disconnect :disconnect
2020/05/09 14:27:21 [I] ++++++
2020/05/09 14:27:21 [I] ++++++
2020/05/09 14:27:21 [I] ++++++
2020/05/09 14:27:21 [I] connect
2020/05/09 14:27:21 [I] ++++++
2020/05/09 14:27:21 [I] ++++++
2020/05/09 14:27:21 [I] ++++++
2020/05/09 14:27:22 [I] ++++++
2020/05/09 14:27:22 [I] ++++++
2020/05/09 14:27:22 [I] ++++++
2020/05/09 14:28:22 [I] socket disconnect :disconnect
2020/05/09 14:33:29 [I] ++++++
2020/05/09 14:33:29 [I] connect
2020/05/09 14:33:29 [I] ++++++
2020/05/09 14:33:29 [I] ++++++
2020/05/09 14:33:29 [I] ++++++
2020/05/09 14:33:29 [I] ++++++
2020/05/09 14:33:29 [I] ++++++
2020/05/09 14:33:29 [I] ++++++
2020/05/09 14:33:29 [I] ++++++
2020/05/09 14:33:29 [I] ++++++
2020/05/09 14:34:18 [I] socket disconnect :disconnect
2020/05/09 14:34:21 [I] ++++++
2020/05/09 14:34:21 [I] connect
2020/05/09 14:34:21 [I] ++++++
2020/05/09 14:34:21 [I] ++++++
2020/05/09 14:34:21 [I] ++++++
2020/05/09 14:34:21 [I] ++++++
2020/05/09 14:34:21 [I] ++++++
2020/05/09 14:34:22 [I] ++++++
2020/05/09 14:34:22 [I] ++++++
2020/05/09 14:34:22 [I] ++++++
2020/05/09 14:34:46 [I] socket disconnect :disconnect
2020/05/09 14:34:48 [I] ++++++
2020/05/09 14:34:48 [I] ++++++
2020/05/09 14:34:48 [I] ++++++
2020/05/09 14:34:48 [I] connect
2020/05/09 14:34:48 [I] ++++++
2020/05/09 14:34:48 [I] ++++++
2020/05/09 14:34:48 [I] ++++++
2020/05/09 14:34:48 [I] ++++++
2020/05/09 14:34:48 [I] ++++++
2020/05/09 14:34:49 [I] ++++++
2020/05/09 14:35:31 [I] socket disconnect :disconnect
2020/05/09 14:35:35 [I] ++++++
2020/05/09 14:35:35 [I] ++++++
2020/05/09 14:35:35 [I] ++++++
2020/05/09 14:35:35 [I] connect
2020/05/09 14:35:35 [I] ++++++
2020/05/09 14:35:35 [I] ++++++
2020/05/09 14:35:35 [I] ++++++
2020/05/09 14:35:36 [I] ++++++
2020/05/09 14:35:36 [I] ++++++
2020/05/09 14:35:36 [I] ++++++
2020/05/09 14:36:02 [I] socket disconnect :disconnect
2020/05/09 14:36:05 [I] ++++++
2020/05/09 14:36:05 [I] ++++++
2020/05/09 14:36:05 [I] ++++++
2020/05/09 14:36:05 [I] connect
2020/05/09 14:36:05 [I] ++++++
2020/05/09 14:36:05 [I] ++++++
2020/05/09 14:36:05 [I] ++++++
2020/05/09 14:36:06 [I] ++++++
2020/05/09 14:36:06 [I] ++++++
2020/05/09 14:36:06 [I] ++++++
2020/05/09 14:37:06 [I] socket disconnect :disconnect
2020/05/09 14:45:53 [I] ++++++
2020/05/09 14:45:56 [I] ++++++
2020/05/09 14:45:58 [I] ++++++
2020/05/09 14:46:00 [I] ++++++
2020/05/09 14:46:04 [I] ++++++
2020/05/09 14:46:09 [I] ++++++
2020/05/09 14:46:15 [I] ++++++
2020/05/09 14:46:16 [I] ++++++
2020/05/09 14:46:16 [I] ++++++
2020/05/09 14:46:16 [I] ++++++
2020/05/09 14:46:16 [I] connect
2020/05/09 14:46:16 [I] ++++++
2020/05/09 14:46:16 [I] ++++++
2020/05/09 14:46:16 [I] ++++++
2020/05/09 14:46:17 [I] ++++++
2020/05/09 14:46:17 [I] ++++++
2020/05/09 14:46:17 [I] ++++++
2020/05/09 14:47:25 [I] socket keepConnect :keepAlive
2020/05/09 14:47:28 [I] socket keepConnect :keepAlive
2020/05/09 14:48:29 [I] socket keepConnect :keepAlive
2020/05/09 14:48:44 [I] socket keepConnect :keepAlive
2020/05/09 14:49:01 [I] socket keepConnect :keepAlive
2020/05/09 14:49:17 [I] socket keepConnect :keepAlive
2020/05/09 14:49:35 [I] socket keepConnect :keepAlive
2020/05/09 14:49:42 [I] socket disconnect :disconnect
2020/05/09 14:49:43 [I] ++++++
2020/05/09 14:49:43 [I] ++++++
2020/05/09 14:49:43 [I] ++++++
2020/05/09 14:49:43 [I] connect
2020/05/09 14:49:43 [I] ++++++
2020/05/09 14:49:43 [I] ++++++
2020/05/09 14:49:43 [I] ++++++
2020/05/09 14:49:44 [I] ++++++
2020/05/09 14:49:44 [I] ++++++
2020/05/09 14:49:44 [I] ++++++
2020/05/09 14:49:54 [I] socket disconnect :disconnect
2020/05/09 14:49:55 [I] ++++++
2020/05/09 14:49:55 [I] ++++++
2020/05/09 14:49:55 [I] ++++++
2020/05/09 14:49:55 [I] connect
2020/05/09 14:49:55 [I] ++++++
2020/05/09 14:49:55 [I] ++++++
2020/05/09 14:49:55 [I] ++++++
2020/05/09 14:49:56 [I] ++++++
2020/05/09 14:49:56 [I] ++++++
2020/05/09 14:49:56 [I] ++++++
2020/05/09 14:51:16 [I] socket keepConnect :keepAlive
2020/05/09 14:52:08 [I] socket keepConnect :keepAlive
2020/05/09 14:52:29 [I] socket keepConnect :keepAlive
2020/05/09 14:52:35 [I] socket keepConnect :keepAlive
2020/05/09 14:53:38 [I] socket keepConnect :keepAlive
2020/05/09 14:54:04 [I] socket keepConnect :keepAlive
2020/05/09 14:54:05 [I] socket keepConnect :keepAlive
2020/05/09 14:54:47 [I] socket keepConnect :keepAlive
2020/05/09 14:54:51 [I] socket disconnect :disconnect
2020/05/09 14:54:52 [I] ++++++
2020/05/09 14:54:52 [I] ++++++
2020/05/09 14:54:52 [I] ++++++
2020/05/09 14:54:52 [I] connect
2020/05/09 14:54:52 [I] ++++++
2020/05/09 14:54:52 [I] ++++++
2020/05/09 14:54:52 [I] ++++++
2020/05/09 14:54:52 [I] ++++++
2020/05/09 14:54:52 [I] ++++++
2020/05/09 14:54:52 [I] ++++++
2020/05/09 14:55:02 [I] ++++++
2020/05/09 14:55:02 [I] ++++++
2020/05/09 14:55:02 [I] ++++++
2020/05/09 14:55:02 [I] ++++++
2020/05/09 14:55:02 [I] ++++++
2020/05/09 14:55:02 [I] ++++++
2020/05/09 14:55:08 [I] socket keepConnect :keepAlive
2020/05/09 14:55:12 [I] socket keepConnect :keepAlive
2020/05/09 14:55:28 [I] socket disconnect :disconnect
2020/05/09 14:55:29 [I] ++++++
2020/05/09 14:55:29 [I] connect
2020/05/09 14:55:29 [I] ++++++
2020/05/09 14:55:29 [I] ++++++
2020/05/09 14:55:29 [I] ++++++
2020/05/09 14:55:29 [I] ++++++
2020/05/09 14:55:29 [I] ++++++
2020/05/09 14:55:30 [I] ++++++
2020/05/09 14:55:30 [I] ++++++
2020/05/09 14:55:30 [I] ++++++
2020/05/09 14:56:21 [I] socket keepConnect :keepAlive
2020/05/09 14:57:14 [I] socket keepConnect :keepAlive
2020/05/09 14:57:25 [I] socket keepConnect :keepAlive
2020/05/09 14:58:38 [I] socket keepConnect :keepAlive
2020/05/09 14:59:24 [I] socket keepConnect :keepAlive
2020/05/09 14:59:38 [I] socket keepConnect :keepAlive
2020/05/09 14:59:43 [I] socket keepConnect :keepAlive
2020/05/09 15:00:30 [I] socket keepConnect :keepAlive
2020/05/09 15:00:56 [I] socket keepConnect :keepAlive
2020/05/09 15:01:15 [I] socket keepConnect :keepAlive
2020/05/09 15:01:19 [I] socket keepConnect :keepAlive
2020/05/09 15:12:42 [I] socket keepConnect :keepAlive
2020/05/09 15:15:56 [I] socket keepConnect :keepAlive
2020/05/09 15:16:39 [I] socket keepConnect :keepAlive
2020/05/09 15:18:29 [I] socket disconnect :disconnect
2020/05/09 15:18:29 [I] socket disconnect :disconnect
2020/05/09 15:18:29 [I] ++++++
2020/05/09 15:18:29 [I] ++++++
2020/05/09 15:18:29 [I] ++++++
2020/05/09 15:18:29 [I] ++++++
2020/05/09 15:18:29 [I] ++++++
2020/05/09 15:18:30 [I] ++++++
2020/05/09 15:18:30 [I] connect
2020/05/09 15:18:30 [I] ++++++
2020/05/09 15:18:30 [I] ++++++
2020/05/09 15:18:30 [I] ++++++
2020/05/09 15:18:31 [I] ++++++
2020/05/09 15:18:31 [I] ++++++
2020/05/09 15:18:31 [I] ++++++
2020/05/09 15:18:31 [I] ++++++
2020/05/09 15:18:33 [I] ++++++
2020/05/09 15:18:33 [I] ++++++
2020/05/09 15:18:33 [I] ++++++
2020/05/09 15:18:33 [I] connect
2020/05/09 15:18:33 [I] ++++++
2020/05/09 15:18:33 [I] ++++++
2020/05/09 15:18:33 [I] ++++++
2020/05/09 15:18:33 [I] ++++++
2020/05/09 15:18:33 [I] ++++++
2020/05/09 15:18:33 [I] ++++++
2020/05/09 15:18:41 [I] socket disconnect :disconnect
2020/05/09 15:18:42 [I] ++++++
2020/05/09 15:18:42 [I] ++++++
2020/05/09 15:18:42 [I] ++++++
2020/05/09 15:18:42 [I] connect
2020/05/09 15:18:42 [I] ++++++
2020/05/09 15:18:42 [I] ++++++
2020/05/09 15:18:42 [I] ++++++
2020/05/09 15:18:43 [I] ++++++
2020/05/09 15:18:43 [I] ++++++
2020/05/09 15:18:43 [I] ++++++
2020/05/09 15:19:32 [I] socket disconnect :disconnect
2020/05/09 15:21:59 [I] socket disconnect :disconnect
2020/05/09 15:21:59 [I] ++++++
2020/05/09 15:21:59 [I] ++++++
2020/05/09 15:21:59 [I] ++++++
2020/05/09 15:21:59 [I] connect
2020/05/09 15:21:59 [I] ++++++
2020/05/09 15:21:59 [I] ++++++
2020/05/09 15:21:59 [I] ++++++
2020/05/09 15:22:00 [I] ++++++
2020/05/09 15:22:00 [I] ++++++
2020/05/09 15:22:00 [I] ++++++
2020/05/09 15:23:16 [I] socket disconnect :disconnect
2020/05/09 15:23:17 [I] ++++++
2020/05/09 15:23:17 [I] connect
2020/05/09 15:23:17 [I] ++++++
2020/05/09 15:23:17 [I] ++++++
2020/05/09 15:23:17 [I] ++++++
2020/05/09 15:23:17 [I] ++++++
2020/05/09 15:23:17 [I] ++++++
2020/05/09 15:23:18 [I] ++++++
2020/05/09 15:23:18 [I] ++++++
2020/05/09 15:23:18 [I] ++++++
2020/05/09 15:24:00 [I] socket disconnect :disconnect
2020/05/09 15:24:01 [I] ++++++
2020/05/09 15:24:01 [I] ++++++
2020/05/09 15:24:01 [I] ++++++
2020/05/09 15:24:01 [I] connect
2020/05/09 15:24:01 [I] ++++++
2020/05/09 15:24:01 [I] ++++++
2020/05/09 15:24:01 [I] ++++++
2020/05/09 15:24:02 [I] ++++++
2020/05/09 15:24:02 [I] ++++++
2020/05/09 15:24:02 [I] ++++++
2020/05/09 15:24:14 [I] socket disconnect :disconnect
2020/05/09 15:24:15 [I] ++++++
2020/05/09 15:24:15 [I] ++++++
2020/05/09 15:24:15 [I] ++++++
2020/05/09 15:24:15 [I] connect
2020/05/09 15:24:15 [I] ++++++
2020/05/09 15:24:15 [I] ++++++
2020/05/09 15:24:15 [I] ++++++
2020/05/09 15:24:15 [I] ++++++
2020/05/09 15:24:15 [I] ++++++
2020/05/09 15:24:16 [I] ++++++
2020/05/09 15:26:40 [I] socket keepConnect :keepAlive
2020/05/09 15:26:42 [I] socket keepConnect :keepAlive
2020/05/09 15:27:21 [I] socket keepConnect :keepAlive
2020/05/09 15:28:05 [I] socket disconnect :disconnect
2020/05/09 15:28:05 [I] ++++++
2020/05/09 15:28:05 [I] ++++++
2020/05/09 15:28:05 [I] ++++++
2020/05/09 15:28:05 [I] connect
2020/05/09 15:28:05 [I] ++++++
2020/05/09 15:28:05 [I] ++++++
2020/05/09 15:28:05 [I] ++++++
2020/05/09 15:28:06 [I] ++++++
2020/05/09 15:28:06 [I] ++++++
2020/05/09 15:28:06 [I] ++++++
2020/05/09 15:30:09 [I] socket disconnect :disconnect
2020/05/09 15:30:09 [I] ++++++
2020/05/09 15:30:09 [I] ++++++
2020/05/09 15:30:09 [I] ++++++
2020/05/09 15:30:09 [I] connect
2020/05/09 15:30:09 [I] ++++++
2020/05/09 15:30:09 [I] ++++++
2020/05/09 15:30:09 [I] ++++++
2020/05/09 15:30:10 [I] ++++++
2020/05/09 15:30:10 [I] ++++++
2020/05/09 15:30:10 [I] ++++++
2020/05/09 15:30:27 [I] socket disconnect :disconnect
2020/05/09 15:30:28 [I] ++++++
2020/05/09 15:30:28 [I] ++++++
2020/05/09 15:30:28 [I] ++++++
2020/05/09 15:30:28 [I] connect
2020/05/09 15:30:28 [I] ++++++
2020/05/09 15:30:28 [I] ++++++
2020/05/09 15:30:28 [I] ++++++
2020/05/09 15:30:29 [I] ++++++
2020/05/09 15:30:29 [I] ++++++
2020/05/09 15:30:29 [I] ++++++
2020/05/09 15:30:39 [I] socket disconnect :disconnect
2020/05/09 15:30:39 [I] socket disconnect :disconnect
2020/05/09 15:30:39 [I] ++++++
2020/05/09 15:30:39 [I] ++++++
2020/05/09 15:30:39 [I] ++++++
2020/05/09 15:30:39 [I] ++++++
2020/05/09 15:30:39 [I] ++++++
2020/05/09 15:30:40 [I] ++++++
2020/05/09 15:30:40 [I] ++++++
2020/05/09 15:30:40 [I] ++++++
2020/05/09 15:30:40 [I] connect
2020/05/09 15:30:40 [I] ++++++
2020/05/09 15:30:40 [I] ++++++
2020/05/09 15:30:40 [I] ++++++
2020/05/09 15:30:40 [I] ++++++
2020/05/09 15:30:40 [I] ++++++
2020/05/09 15:30:40 [I] ++++++
2020/05/09 15:33:29 [I] socket keepConnect :keepAlive
2020/05/09 15:34:21 [I] socket keepConnect :keepAlive
2020/05/09 15:34:48 [I] socket keepConnect :keepAlive
2020/05/09 15:35:35 [I] socket keepConnect :keepAlive
2020/05/09 15:35:49 [I] socket disconnect :disconnect
2020/05/09 15:36:05 [I] socket keepConnect :keepAlive
2020/05/09 15:46:16 [I] socket keepConnect :keepAlive
2020/05/09 15:47:25 [I] socket keepConnect :keepAlive
2020/05/09 15:47:28 [I] socket keepConnect :keepAlive
2020/05/09 15:48:29 [I] socket keepConnect :keepAlive
2020/05/09 15:48:44 [I] socket keepConnect :keepAlive
2020/05/09 15:49:01 [I] socket keepConnect :keepAlive
2020/05/09 15:49:17 [I] socket keepConnect :keepAlive
2020/05/09 15:49:28 [I] Received signal interrupt. shutting down
