
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       7700;
        server_name  127.0.0.1;
        charset utf-8;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}
        # 如果需要启用SSL，则取消以下4行注释
		# ssl                 on;
		# ssl_certificate     server.crt;
		# ssl_certificate_key server.key;		
		# proxy_set_header		browser_protocol https;
		
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header                browser_host $http_host:$server_port;
        proxy_connect_timeout   5s;   # 连接上服务器的超时时间
        proxy_send_timeout      10m;  # 发送数据到服务器的时间，一般为上传时间
        proxy_read_timeout      90s;  # 等待服务器响应的时间
        proxy_buffer_size       8k;
        proxy_buffers           32 8k;
        proxy_busy_buffers_size 64k;
        proxy_temp_file_write_size 2m;

        # 上传数据/文件大小控制
        client_max_body_size  50M;
        client_body_buffer_size 128k;
        
        set $show_home .././;

        location ^~ /notify {
            proxy_pass http://192.168.31.122:3000/notify;
        }       

  	    location ^~ /api/ws {
              proxy_pass http://192.168.31.122:3000/api/ws;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
              proxy_set_header Host $host;
          }

  	    location ^~ /api {
              proxy_pass http://192.168.31.122:3000/api;
          }

  	    location ^~ /verify {
              proxy_pass http://192.168.31.122:3000/verify;
          }
	
  	    location ^~ /tenant {
              proxy_pass http://192.168.31.122:3000/tenant;
  	    }

        location ^~ /upload {
            proxy_pass http://192.168.31.122:3000/upload;
        }

        location ^~ /resource {
            proxy_pass http://192.168.31.122:3000/resource;
        }

        location ^~ /simulate {
            proxy_pass http://192.168.31.122:3000/simulate;
        }
		location ^~ /openapi {
            proxy_pass http://192.168.31.122:3000/openapi;
        }
        location / {
            root   "$show_home";
            index  index.html;
        }
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
